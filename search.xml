<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>解决Hexo NexT中Fancybox与Lazyload冲突的问题</title>
    <url>/zh-CN/be16ea65/</url>
    <content><![CDATA[<a id="more"></a>


<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul>
<li>Hexo v4.2.0</li>
<li>NexT v7.7.0</li>
<li>Fancybox v3.5.7</li>
<li>Hexo-Lazyload-image v1.0.5</li>
</ul>
<!-- more -->

<h1 id="问题产生的原因"><a href="#问题产生的原因" class="headerlink" title="问题产生的原因"></a>问题产生的原因</h1><p><a href="https://hexiongbiao.cn/fancyboxandlazyload/" target="_blank" rel="noopener">这篇文章</a>解释地非常清楚了。</p>
<p>因为图片懒加载预先会使用占位图来替代图片的<code>src</code>，等图片加载完成后，再用<code>data-original</code>里面的内容替换<code>src</code>里面的内容。然而 <strong>fancybox</strong> 的原理是在页面加载时给页面中所有的图片套一层<code>a标签</code>，<code>a标签</code>的<code>href</code>就是 <strong>fancybox</strong> 在页面加载时获取的图片<code>src</code>，恰好这时候获取的<code>src</code>偏偏就是 <strong>lazyload</strong> 的占位图的 url。</p>
<h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>在上面提及的博客中，作者提出了一种使用js脚本，在图片完成加载后，对<code>a标签</code>中的<code>href</code>进行修正的方法。但是，我觉得这种方法不利于之后的升级维护，所以没有采用。  </p>
<p>这里，我使用了另一种方法来解决了冲突的问题：更换Lazyload的实现方式。</p>
<p>NexT主题集成了使用<code>lozad.js</code>来实现Lazyload懒加载。使用这个方法则不会与Fancybox产生冲突。具体配置方法，详见<a href="https://securitytech.site/zh-CN/44bf8def##启用Lazyload图片懒加载">在NexT中启用Lazyload</a>。<code>lozad.js</code>使用<code>img</code>标签的<code>data-src</code>属性来保存目标图片的路径。在Lazyload加载前，<code>img</code>标签中并不包含<code>src</code>属性，而Fancybox也能正确从<code>data-src</code>中获取到图片的正确路径。</p>
<h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1><p>前面说了，使用这种方法可以实现Lazyload的功能，但该NexT中集成<code>lozad.js</code>没有提供设置占位图片的选项。所以，如果你一定希望有占位图片，那么这种方法可能并不能满足你的需求。<br>不过，我有一个想法，如果把<code>Hexo-Lazyload-image</code>插件中的<code>data-original</code>属性改成<code>data-src</code>属性，那么能不能实现与Fancybox的兼容呢？我暂时没有进行尝试，只是一个猜想而已。之后有机会的话会尝试一下，再来更新。</p>
<hr>
<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul>
<li><a href="http://hexiongbiao.cn/fancyboxandlazyload/" target="_blank" rel="noopener">http://hexiongbiao.cn/fancyboxandlazyload/</a></li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
        <tag>Lazyload</tag>
        <tag>Fancybox</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo + NexT 深度个性化配置 (2020.1 更新)</title>
    <url>/zh-CN/44bf8def/</url>
    <content><![CDATA[<p><strong>所有操作均在Hexo v4.2.0, NexT v7.7.0 版本上验证。如有版本变化，请根据实际情况对部分步骤进行相应修改</strong></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近重新拾起博客，更新，域名迁移，重新配置，优化。这一套下来我真的，脑阔都大了！！<br>于是非常自觉的弹出了这么一个想法，我在这个过程中所有的操作都记录下来。一来，方便未来知道自己究竟改过些什么，其次，也可以给他人一个参考。有些前人已经踩进去过的泥潭就没有必要再去踩一遍啦！！  </p>
<p>由于Hexo和NexT的更新还是比较频繁的，变化的幅度也相当大。所以文章的内容可能不经意间就out了。其实，归根结底，所有的博客只能是作为一个引导，具体的操作永远会因为各种各样的原因而不能照搬。希望大家可以先仔细阅读官方的文档，这样可以对Hexo+NexT有更深的理解。Hexo的官方文档相对而言比较残旧，直接完全按照官方文档来做是会遇到一头包的。NexT的官方文档相对好很多，但需要跟上更新速度。  </p>
<a id="more"></a>

<h1 id="Hexo-和-NexT本地安装"><a href="#Hexo-和-NexT本地安装" class="headerlink" title="Hexo 和 NexT本地安装"></a>Hexo 和 NexT本地安装</h1><p>这部分网上教程茫茫多。所以懒得写了。。。哈哈！没想到吧！<br>大多数情况跟着官方文档直接操作即可。nodeJS跟npm的安装有时会比较tricky。</p>
<h1 id="站点配置"><a href="#站点配置" class="headerlink" title="站点配置"></a>站点配置</h1><p>对于站点配置，我们大多对<code>blog/_config.yml</code>文件进行修改。</p>
<h2 id="Github-Pages部署自定义域名"><a href="#Github-Pages部署自定义域名" class="headerlink" title="Github Pages部署自定义域名"></a>Github Pages部署自定义域名</h2><p>我图省事儿，就直接将博客部署在Github Pages上。同时，我又正好有一个自己的域名，所以就想要使用自己的域名。有办法吗？？？当然！<br>现在Github Pages对于自定义域名有很好的支持，并且支持HTTPS。具体操作参见<a href="https://io-oi.me/tech/custom-domains-on-github-pages" target="_blank" rel="noopener">这篇教程</a>。<br>很清楚，照做就好了。  </p>
<blockquote>
<p>如果之前对域名使用过其他的CDN服务，请先取消CDN服务。否则，你使用HTTPS访问自己的域名时，浏览器左侧的小锁会没法锁上！</p>
</blockquote>
<h2 id="修改文章永久链接"><a href="#修改文章永久链接" class="headerlink" title="修改文章永久链接"></a>修改文章永久链接</h2><p>默认的永久链接格式是<code>/year/month/day/title/</code>这样的形式。感觉有些冗余，也不美观。所以我对其进行修改：<br>在主题配置文件中搜索<strong>permalink:</strong>，并对其进行配置。以下是我使用的配置，仅供参考：<br>(这里使用到了<code>hexo-abbrlink</code>这个插件，需要通过<code>npm install hexo-abbrlink --save</code>安装。)  </p>
<figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line"># URL</span><br><span class="line">## <span class="keyword">If</span> your site <span class="keyword">is</span> put <span class="keyword">in</span> a subdirectory, <span class="keyword">set</span> url <span class="keyword">as</span> <span class="string">'http://yoursite.com/child'</span> <span class="keyword">and</span> root <span class="keyword">as</span> <span class="string">'/child/'</span></span><br><span class="line">url: https:<span class="comment">//securitytech.site</span></span><br><span class="line">root: /</span><br><span class="line">permalink: :lang/:abbrlink/</span><br><span class="line">abbrlink: </span><br><span class="line">  alg: crc32 #算法：crc16(<span class="keyword">default</span>), crc32</span><br><span class="line">  rep: hex   #进制：dec(<span class="keyword">default</span>), hex</span><br><span class="line">permalink_defaults:</span><br><span class="line">pretty_urls:</span><br><span class="line">  trailing_index: <span class="keyword">true</span> # <span class="keyword">Set</span> <span class="keyword">to</span> <span class="keyword">false</span> <span class="keyword">to</span> <span class="keyword">remove</span> trailing <span class="string">'index.html'</span> <span class="keyword">from</span> permalinks</span><br><span class="line">  trailing_html: <span class="keyword">true</span> # <span class="keyword">Set</span> <span class="keyword">to</span> <span class="keyword">false</span> <span class="keyword">to</span> <span class="keyword">remove</span> trailing <span class="string">'.html'</span> <span class="keyword">from</span> permalinks</span><br></pre></td></tr></table></figure>

<h2 id="双语博客配置"><a href="#双语博客配置" class="headerlink" title="双语博客配置"></a>双语博客配置</h2><p>详见<a href="https://UPWNothing.github.io/zh-CN/78ced6ec/" target="_blank" rel="noopener">利用Hexo框架搭建中英文双语网站</a></p>
<h2 id="添加About页面"><a href="#添加About页面" class="headerlink" title="添加About页面"></a>添加About页面</h2><p>待完善</p>
<h2 id="添加个性化404页面"><a href="#添加个性化404页面" class="headerlink" title="添加个性化404页面"></a>添加个性化404页面</h2><p>其实如果像我一样在Github Page上部署网页，Github有提供统一的404页面。当然，如果希望可以对404页面进行个性化改造，那么就需要稍许折腾一番。<br>一种是直接在<code>source</code>目录下创建一个<code>404.html</code>文件，并将你想要的样式以及HTML源码都添加到这个文件中。同时在站点配置文件<code>_config.yml</code>中，配置<code>skip_render</code>:</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="meta"># Directory</span></span><br><span class="line"><span class="symbol">source_dir:</span> source</span><br><span class="line"><span class="symbol">public_dir:</span> public</span><br><span class="line"><span class="symbol">tag_dir:</span> tags</span><br><span class="line"><span class="symbol">archive_dir:</span> archives</span><br><span class="line"><span class="symbol">category_dir:</span> categories</span><br><span class="line"><span class="symbol">code_dir:</span> downloads/code</span><br><span class="line"><span class="symbol">i18n_dir:</span> :lang</span><br><span class="line"><span class="symbol">skip_render:</span></span><br><span class="line">  - <span class="string">"404.html"</span></span><br></pre></td></tr></table></figure>

<p>也可以通过<code>hexo new page 404</code>来创建一个与博客整体风格一致的404页面，然后编辑<code>source/404/index.md</code>。网上很容易搜到有许多使用腾讯公益的404页面源码。</p>
<h2 id="添加Sitemap"><a href="#添加Sitemap" class="headerlink" title="添加Sitemap"></a>添加Sitemap</h2><p>为自己的网站配置sitemap，可以有效地提升SEO。具体方法如下：</p>
<p>安装<code>hexo-generator-sitemap</code>和<code>hexo-generator-baidu-sitemap</code>。  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-generator-sitemap <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-baidu-sitemap <span class="comment">--save</span></span><br></pre></td></tr></table></figure>

<p>并在站点配置文件<code>_config.yml</code>的末尾添加：  </p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">sitemap:</span></span><br><span class="line"><span class="symbol">  path:</span> sitemap.xml</span><br><span class="line"><span class="symbol">baidusitemap:</span></span><br><span class="line"><span class="symbol">  path:</span> baidusitemap.xml</span><br></pre></td></tr></table></figure>


<h2 id="图片懒加载配置"><a href="#图片懒加载配置" class="headerlink" title="图片懒加载配置"></a>图片懒加载配置</h2><p><strong>注意！！不推荐在站点配置中设置图片懒加载。该功能其实已经集成在NexT主题中，如何启用详见:</strong><a href="##启用Lazyload图片懒加载">在NexT中启用Lazyload</a></p>
<p>前面提到过，由于网站是搭建在Github Pages上，服务器不在国内，所以对于一些图片很多的文章，文章加载会非常慢。为了解决这个问题，我们可以启用图片懒加载功能。  </p>
<p>图片懒加载可以有效地提升网站性能和用户体验。其原理是仅先加载用户可见部分的图片，其余的都暂时先不加载。  </p>
<p>首先安装<code>hexo-lazyload-image</code>插件：</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">npm install hexo-lazyload-<span class="built_in">image</span> --<span class="built_in">save</span></span><br></pre></td></tr></table></figure>

<p>再在站点配置文件<code>_config.yml</code>中添加上下列内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Lazyload Image</span></span><br><span class="line"><span class="comment">## npm install hexo-lazyload-image --save</span></span><br><span class="line"><span class="attr">lazyload:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">onlypost:</span> <span class="literal">false</span>  <span class="comment"># 设置为true，那么只有page和post页面中的图片会使用LazyLoad</span></span><br><span class="line">  <span class="attr">loadingImg:</span> <span class="comment"># /images/loading.gif    # 默认为空，加上图片地址可以自定义加载时显示的图片</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用<code>Hexo-lazyload-image</code>方法启用图片懒加载时，如果同时也启用了Fancybox拓展，那么可能会造成冲突。<br>而使用NexT集成的Lazyload库则不会与Fancybox产生冲突。缺点则是，NexT主题中的Lazyload无法配置onlypost与loadingImg。</p>
</blockquote>
<h1 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h1><p>默认的NexT主题配置文件为：<code>blog/themes/next/_config.yml</code>。<br><strong>但是</strong>,！目前NexT的更新都是通过git pull的方式来获取的，每次更新需要花费很大的精力来解决冲突。<br>这显然不是一种科学的方法。对此，官方提出的<a href="https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/DATA-FILES.md" target="_blank" rel="noopener">解决方法</a>为:  </p>
<ol>
<li>不需要修改<code>blog/themes/next/_config.yml</code>，而是将全部主题配置都置于Hexo站点配置文件<code>blog/_config.yml</code>下。所有的主题配置都放置在<code>theme_config:</code>后，并缩进两个空格。</li>
<li>不需要修改<code>blog/themes/next/_config.yml</code>，而是将全部主题配置都置于<code>blog/themes/_data/next.yml</code>下。</li>
</ol>
<p>具体的使用方法官方文档写得非常明确了。我这边选择的是第一种方法。<br>所以，对于需要修改的配置项，我们要做的是：</p>
<ol>
<li>在<code>blog/themes/next/_config.yml</code>中找到相关配置，并复制。</li>
<li>粘帖到<code>blog/_config.yml</code>中的<code>theme_config:</code>下方，并调整缩进为两个空格。</li>
<li>在<code>blog/_config.yml</code>中修改对应的配置项。</li>
</ol>
<p>这些步骤我在下文都会用”修改主题配置文件“代替。请务必先理解这句话对应的操作是这三步。 </p>
<h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><p>一些一看就懂的配置项，在这里一笔带过。</p>
<h4 id="网站图标"><a href="#网站图标" class="headerlink" title="网站图标"></a>网站图标</h4><p>在主题配置文件中将对应项的值修改为图片路径即可。</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">favicon:</span></span><br><span class="line"><span class="symbol">  small:</span> <span class="meta-keyword">/images/</span>favicon<span class="number">-16</span>x16-next.png</span><br><span class="line"><span class="symbol">  medium:</span> <span class="meta-keyword">/images/</span>favicon<span class="number">-32</span>x32-next.png</span><br><span class="line"><span class="symbol">  apple_touch_icon:</span> <span class="meta-keyword">/images/</span>apple-touch-icon-next.png</span><br><span class="line"><span class="symbol">  safari_pinned_tab:</span> <span class="meta-keyword">/images/</span>logo.svg</span><br><span class="line">  <span class="meta">#android_manifest: /images/manifest.json</span></span><br><span class="line">  <span class="meta">#ms_browserconfig: /images/browserconfig.xml</span></span><br></pre></td></tr></table></figure>

<ul>
<li>favicon效果<br><img data-src="/zh-CN/44bf8def/favicon.png" alt="favicon效果"></li>
</ul>
<h4 id="网站页脚配置"><a href="#网站页脚配置" class="headerlink" title="网站页脚配置"></a>网站页脚配置</h4><p><code>since:</code>设置后，页脚会显示为[开始年份] - [当前年份]。保持默认配置不变则仅显示当前年份。  </p>
<p><code>icon</code>默认是<code>user</code>小人。官方推荐使用红心(heart)，可以在<a href="https://fontawesome.com/v4.7.0/icons" target="_blank" rel="noopener">fontawesome</a>中找自己喜欢的替换即可。我使用了小爪子，<code>animated</code>设置为<code>true</code>可以开启动画效果。也可以自己设置颜色。</p>
<p><code>powered:</code>和<code>theme</code>配置项则用来配置是否在页脚显示Hexo和NexT的名字以及版本号。</p>
<p><code>Beian</code>可以用来显示网站的公安备案信息。我这边没有这个需求。</p>
<ul>
<li>页脚效果<br><img data-src="/zh-CN/44bf8def/footer.png" alt="页脚效果"></li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="comment"># Specify the date when the site was setup. If not defined, current year will be used.</span></span><br><span class="line">  <span class="attr">since:</span> <span class="number">2017</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Icon between year and copyright info.</span></span><br><span class="line">  <span class="attr">icon:</span></span><br><span class="line">    <span class="comment"># Icon name in Font Awesome. See: https://fontawesome.com/v4.7.0/icons/</span></span><br><span class="line">    <span class="comment"># `heart` is recommended with animation in red (#ff0000).</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">paw</span></span><br><span class="line">    <span class="comment"># If you want to animate the icon, set it to true.</span></span><br><span class="line">    <span class="attr">animated:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Change the color of icon, using Hex Code.</span></span><br><span class="line">    <span class="attr">color:</span> <span class="string">"#808080"</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># If not defined, `author` from Hexo `_config.yml` will be used.</span></span><br><span class="line">  <span class="attr">copyright:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">powered:</span></span><br><span class="line">    <span class="comment"># Hexo link (Powered by Hexo).</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Version info of Hexo after Hexo link (vX.X.X).</span></span><br><span class="line">    <span class="attr">version:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">theme:</span></span><br><span class="line">    <span class="comment"># Theme &amp; scheme info link (Theme - NexT.scheme).</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Version info of NexT after scheme info (vX.X.X).</span></span><br><span class="line">    <span class="attr">version:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Beian ICP and gongan information for Chinese users. See: http://www.beian.miit.gov.cn, http://www.beian.gov.cn</span></span><br><span class="line">  <span class="attr">beian:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">icp:</span></span><br><span class="line">    <span class="comment"># The digit in the num of gongan beian.</span></span><br><span class="line">    <span class="attr">gongan_id:</span></span><br><span class="line">    <span class="comment"># The full num of gongan beian.</span></span><br><span class="line">    <span class="attr">gongan_num:</span></span><br><span class="line">    <span class="comment"># The icon for gongan beian. See: http://www.beian.gov.cn/portal/download</span></span><br><span class="line">    <span class="attr">gongan_icon_url:</span></span><br></pre></td></tr></table></figure>

<h4 id="侧边栏头像配置"><a href="#侧边栏头像配置" class="headerlink" title="侧边栏头像配置"></a>侧边栏头像配置</h4><p>在主题配置文件中修改如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># Replace the default image and set the url here.</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/icon.jpeg</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be dispalyed in circle.</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">true</span>      <span class="comment"># 头像显示为圆形</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be rotated with the cursor.</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">true</span>       <span class="comment"># 设置为true时，鼠标移动到头像上时头像会旋转一圈</span></span><br></pre></td></tr></table></figure>

<ul>
<li>侧边栏头像效果<br><img data-src="/zh-CN/44bf8def/avatar.png" alt="侧边栏头像效果"></li>
</ul>
<h2 id="添加背景动态效果"><a href="#添加背景动态效果" class="headerlink" title="添加背景动态效果"></a>添加背景动态效果</h2><h4 id="Canvas-nest安装配置"><a href="#Canvas-nest安装配置" class="headerlink" title="Canvas-nest安装配置"></a>Canvas-nest安装配置</h4><p>进入<code>themes/next</code>目录,执行命令：  </p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">git clone <span class="symbol">https:</span>/<span class="regexp">/github.com/theme</span>-<span class="keyword">next</span>/theme-<span class="keyword">next</span>-canvas-nest source/<span class="class"><span class="keyword">lib</span>/<span class="title">canvas</span>-<span class="title">nest</span></span></span><br></pre></td></tr></table></figure>

<p>其实就是下载canvas-next动态效果的js文件，并添加到<code>source/lib</code>目录下。</p>
<p>在_config.yml中，在<code>theme_config:</code>下添加: </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">canvas_nest:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> </span><br><span class="line">  <span class="attr">onmobile:</span> <span class="literal">true</span> <span class="comment"># Display on mobile or not</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">"0,0,255"</span> <span class="comment"># RGB values, use `,` to separate</span></span><br><span class="line">  <span class="attr">opacity:</span> <span class="number">0.5</span> <span class="comment"># The opacity of line: 0~1</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">-1</span> <span class="comment"># z-index property of the background</span></span><br><span class="line">  <span class="attr">count:</span> <span class="number">99</span> <span class="comment"># The number of lines</span></span><br></pre></td></tr></table></figure>

<p><code>enable</code>后面5行可以根据自己的需要进行修改。如果认为默认的参数都不错的话，那么就可以直接省略这几行。</p>
<h2 id="添加相关文章推荐功能"><a href="#添加相关文章推荐功能" class="headerlink" title="添加相关文章推荐功能"></a>添加相关文章推荐功能</h2><p>该功能需要安装依赖的插件<a href="https://github.com/tea3/hexo-related-popular-posts" target="_blank" rel="noopener">Hexo-Related-Popular-Posts</a>：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-related-popular-posts <span class="comment">--save</span></span><br></pre></td></tr></table></figure>

<p>再在<code>_config.yml</code>中对主题进行配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">related_posts:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Custom header, leave empty to use the default one 设置推荐区块的标题</span></span><br><span class="line">  <span class="attr">title:</span>     </span><br><span class="line">  <span class="attr">display_in_home:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">params:</span></span><br><span class="line">    <span class="attr">maxCount:</span> <span class="number">5</span></span><br><span class="line">    <span class="comment">#PPMixingRate: 0.0</span></span><br><span class="line">    <span class="comment">#isDate: false</span></span><br><span class="line">    <span class="comment">#isImage: false</span></span><br><span class="line">    <span class="comment">#isExcerpt: false</span></span><br></pre></td></tr></table></figure>



<h2 id="启用Hexo-NexT本地搜索"><a href="#启用Hexo-NexT本地搜索" class="headerlink" title="启用Hexo NexT本地搜索"></a>启用Hexo NexT本地搜索</h2><p>NexT主题中，搜索功能支持多种搜索服务，其中最常用的是本地搜索和Algolia搜索两种。  </p>
<ul>
<li>Algolia搜索借助Algolia提供的SaaS搜索服务，实现文档的搜索功能。  </li>
<li>本地搜索通过<code>hexo-generator-searchdb</code>插件，在本地生成search.xml。该文件作为一个小型的数据库，配合js脚本实现了本地搜索的功能。</li>
</ul>
<p>首先，安装插件：  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-generator-searchdb <span class="comment">--save</span></span><br></pre></td></tr></table></figure>
<p>再修改配置文件<code>_config.yml</code>，启用本地搜索功能：  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h2 id="代码块样式修改"><a href="#代码块样式修改" class="headerlink" title="代码块样式修改"></a>代码块样式修改</h2><p>在主题配置<code>theme_config</code>下添加：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="comment"># Code Highlight theme</span></span><br><span class="line">  <span class="comment"># Available values: normal | night | night eighties | night blue | night bright | solarized | solarized dark | galactic</span></span><br><span class="line">  <span class="comment"># See: https://github.com/chriskempson/tomorrow-theme</span></span><br><span class="line">  <span class="attr">highlight_theme:</span> <span class="string">solarized</span> <span class="string">dark</span></span><br><span class="line">  <span class="comment"># Add copy button on codeblock</span></span><br><span class="line">  <span class="attr">copy_button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Show text copy result.</span></span><br><span class="line">    <span class="attr">show_result:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># Available values: default | flat | mac</span></span><br><span class="line">    <span class="attr">style:</span> <span class="string">mac</span></span><br></pre></td></tr></table></figure>

<p>本来的注释中就已经有了比较详细的说明，所以就不多做介绍了。根据自己的需要设置即可。</p>
<p><img data-src="/zh-CN/44bf8def/codeblock.png" alt="代码块效果图"></p>
<h2 id="文章页面阅读进度显示"><a href="#文章页面阅读进度显示" class="headerlink" title="文章页面阅读进度显示"></a>文章页面阅读进度显示</h2><h4 id="返回页面顶部按钮"><a href="#返回页面顶部按钮" class="headerlink" title="返回页面顶部按钮"></a>返回页面顶部按钮</h4><p>在主题配置<code>theme_config</code>下添加：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">back2top:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Back to top in sidebar.</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Scroll percent label in b2t button.</span></span><br><span class="line">  <span class="attr">scrollpercent:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>启用后，可以在页面右下角显示一个返回页面顶部的小按钮。如果<code>scrollpercent</code>设置为<code>true</code>，则在这个按钮中会显示页面的阅读进度数值。</p>
<p><img data-src="/zh-CN/44bf8def/back2top.png" alt="back2top效果图"></p>
<p>而<code>sidebar</code>设置为<code>true</code>时，该按钮将与侧边栏结合到一起：</p>
<p><img data-src="/zh-CN/44bf8def/back2top_sidebar.png" alt="back2top侧边栏效果图"></p>
<h4 id="页面顶部进度条"><a href="#页面顶部进度条" class="headerlink" title="页面顶部进度条"></a>页面顶部进度条</h4><p>在主题配置中直接找到<code>reading_progress</code>。将其添加到站点配置文件<code>_config.yml</code>中的<code>theme_confg</code>下。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Reading progress bar</span></span><br><span class="line"><span class="attr">reading_progress:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Available values: top | bottom</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">top</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">"#37c6c0"</span></span><br><span class="line">  <span class="attr">height:</span> <span class="string">3px</span></span><br></pre></td></tr></table></figure>
<p>但是，尝试一次以后发现并没有产生效果。后来，经过搜索发现，该功能同样依赖<code>theme-next-reading-progress</code>拓展来实现。由于默认配置文件中的注释里没有提到，所以我一开始完全没意识到需要安装。  </p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">cd themes/<span class="keyword">next</span></span><br><span class="line">git clone <span class="symbol">https:</span>/<span class="regexp">/github.com/theme</span>-<span class="keyword">next</span>/theme-<span class="keyword">next</span>-reading-progress source/<span class="class"><span class="keyword">lib</span>/<span class="title">reading_progress</span></span></span><br></pre></td></tr></table></figure>
<p>通过上述命令完成安装即可。</p>
<h2 id="开启文章页面加载进度条"><a href="#开启文章页面加载进度条" class="headerlink" title="开启文章页面加载进度条"></a>开启文章页面加载进度条</h2><p>与阅读进度条类似，首先安装拓展<code>theme-next-pace</code>：  </p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">cd themes/<span class="keyword">next</span></span><br><span class="line">git clone <span class="symbol">https:</span>/<span class="regexp">/github.com/theme</span>-<span class="keyword">next</span>/theme-<span class="keyword">next</span>-pace source/<span class="class"><span class="keyword">lib</span>/<span class="title">pace</span></span></span><br></pre></td></tr></table></figure>
<p>安装完成后，在主题配置<code>theme_config</code>下添加配置：  </p>
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line"># Progress bar <span class="built_in">in</span> the <span class="built_in">top</span> during page loading.</span><br><span class="line"># <span class="keyword">Dependencies</span>: https://github.com/theme-next/theme-next-pace</span><br><span class="line"># For more information: https://github.com/HubSpot/pace</span><br><span class="line">pace:</span><br><span class="line">  enable: true</span><br><span class="line">  # Themes list:</span><br><span class="line">  # big-counter | <span class="type">bounce</span> | <span class="type">barber</span>-shop | <span class="type">center</span>-atom | <span class="type">center</span>-circle | <span class="type">center</span>-radar | <span class="type">center</span>-<span class="built_in">simple</span></span><br><span class="line">  # corner-indicator | <span class="type">fill</span>-<span class="built_in">left</span> | <span class="type">flat</span>-<span class="built_in">top</span> | <span class="type">flash</span> | <span class="type">loading</span>-bar | <span class="type">mac</span>-osx | <span class="type">material</span> | <span class="type">minimal</span></span><br><span class="line">  theme: center-radar</span><br></pre></td></tr></table></figure>
<p>主题<code>theme:</code>可以设置为自己喜欢的样式，这里我设置为了 <em>center-radar</em> 的样式。在这个<a href="https://github.hubspot.com/pace/docs/welcome/" target="_blank" rel="noopener">页面</a>可以看到所有样式的demo。 </p>
<blockquote>
<p>顺带提一下，当前版本的NexT没有办法在配置文件中直接修改该组件的颜色，如果你觉得组件的颜色与自己的博客无法搭配，那么可以进入到<code>themes/next/source/lib/pace/pace-theme-[你要用的主题].min.css</code>，找到 <code>border-color:#29d</code> 将RGB变量修改为你需要的颜色。</p>
</blockquote>
<h2 id="站点首页不显示文章全文"><a href="#站点首页不显示文章全文" class="headerlink" title="站点首页不显示文章全文"></a>站点首页不显示文章全文</h2><p>其实，最佳的方法是在文章中间加入<code>&lt;!-- more --&gt;</code>来精确控制文章的摘要预览。<br>同时，NexT还提供了 <strong>Auto Excerpt</strong> 的功能来实现对文章的自动截取。<br>在主题的配置文件中可以找到<code>excerpt_description: true</code>。这项在当前版本是默认开启的。所以我们不需要进行额外配置。  </p>
<h2 id="启用评论模块"><a href="#启用评论模块" class="headerlink" title="启用评论模块"></a>启用评论模块</h2><p>详见<a href="https://UPWNothing.github.io/zh-CN/c0899d18/" target="_blank" rel="noopener">为Hexo NexT 添加评论系统</a></p>
<h2 id="开启赞赏功能"><a href="#开启赞赏功能" class="headerlink" title="开启赞赏功能"></a>开启赞赏功能</h2><p> NexT 主题还内置了打赏的功能。首先在<code>theme_config</code>下，添加  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Reward (Donate)</span></span><br><span class="line"><span class="comment"># Front-matter variable (unsupport animation).</span></span><br><span class="line"><span class="attr">reward_settings:</span></span><br><span class="line">  <span class="comment"># If true, reward will be displayed in every article by default.</span></span><br><span class="line">  <span class="comment"># 设置为True, 那么打赏按钮会默认显示在每篇文章的底部</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">animation:</span> <span class="literal">true</span>  <span class="comment"># 开启动画效果</span></span><br><span class="line">  <span class="comment"># comment: #加入显示的打赏用语 </span></span><br><span class="line"><span class="attr">reward:</span></span><br><span class="line">  <span class="attr">wechatpay:</span> <span class="string">/images/wechatpay.png</span> <span class="comment">#微信支付 </span></span><br><span class="line">  <span class="attr">alipay:</span> <span class="string">/images/alipay.png</span>  <span class="comment">#支付宝</span></span><br><span class="line">  <span class="comment"># bitcoin: /images/bitcoin.png  #比特比</span></span><br></pre></td></tr></table></figure>

<p>然后将微信支付，支付宝的收款二维码图片保存为上述的路径。重新生成后就可以在文章底部看到打赏的按钮了。</p>
<h2 id="启用Lazyload图片懒加载"><a href="#启用Lazyload图片懒加载" class="headerlink" title="启用Lazyload图片懒加载"></a>启用Lazyload图片懒加载</h2><p>首先在主题配置文件中，配置  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">lazyload:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>并添加本地js第三方库：</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">cd themes/<span class="keyword">next</span></span><br><span class="line">git clone <span class="symbol">https:</span>/<span class="regexp">/github.com/theme</span>-<span class="keyword">next</span>/theme-<span class="keyword">next</span>-jquery-lazyload source/<span class="class"><span class="keyword">lib</span>/<span class="title">jquery_lazyload</span></span></span><br></pre></td></tr></table></figure>

<p>或者，也可以直接在主题配置中启用第三方CDN</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vendors:</span><br><span class="line">  lazyload: <span class="regexp">//</span>cdn.jsdelivr.net<span class="regexp">/npm/</span>lozad@<span class="number">1</span><span class="regexp">/dist/</span>lozad.min.js</span><br></pre></td></tr></table></figure>

<p>在<code>hexo cl &amp;&amp; hexo g</code>之后，进入自己的网页，随意对任一图片进行”审查元素”. </p>
<p>如果你的<code>img</code>元素中包含<code>data-loaded=&quot;true&quot;</code>,那就说明Lazyload已经生效。</p>
<p><img data-src="/zh-CN/44bf8def/lazyload.png" alt="Lazyload效果"></p>
<h2 id="启用Fancybox图片效果"><a href="#启用Fancybox图片效果" class="headerlink" title="启用Fancybox图片效果"></a>启用Fancybox图片效果</h2><p>首先在主题配置文件中，配置  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">fancybox:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>并添加本地js第三方库(Fancybox2 或 Fancybox3 任选一个)：</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">cd themes/<span class="keyword">next</span></span><br><span class="line">git clone <span class="symbol">https:</span>/<span class="regexp">/github.com/theme</span>-<span class="keyword">next</span>/theme-<span class="keyword">next</span>-fancybox3 source/<span class="class"><span class="keyword">lib</span>/<span class="title">fancybox</span>   <span class="comment"># install Fancybox 3.x</span></span></span><br><span class="line">git clone <span class="symbol">https:</span>/<span class="regexp">/github.com/theme</span>-<span class="keyword">next</span>/theme-<span class="keyword">next</span>-fancybox source/<span class="class"><span class="keyword">lib</span>/<span class="title">fancybox</span>    <span class="comment"># install Fancybox 2.x</span></span></span><br></pre></td></tr></table></figure>

<p>或者，也可以直接在主题配置中启用第三方CDN (同样根据自己的需要选择版本)</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">vendors:</span></span><br><span class="line">  <span class="meta"># FancyBox</span></span><br><span class="line"><span class="symbol">  jquery:</span> <span class="comment">//cdn.jsdelivr.net/npm/jquery@3/dist/jquery.min.js</span></span><br><span class="line"><span class="symbol">  fancybox:</span> <span class="comment">//cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.js</span></span><br><span class="line"><span class="symbol">  fancybox_css:</span> <span class="comment">//cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.css</span></span><br><span class="line">  <span class="meta"># jquery: <span class="comment">//cdn.jsdelivr.net/jquery/2.1.3/jquery.min.js</span></span></span><br><span class="line">  <span class="meta"># fancybox: <span class="comment">//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.min.js</span></span></span><br><span class="line">  <span class="meta"># fancybox_css: <span class="comment">//cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.min.css</span></span></span><br></pre></td></tr></table></figure>

<p>在<code>hexo cl &amp;&amp; hexo g</code>之后，进入自己的网页，就可以看到网页上的图片都可以点开放大浏览了。 </p>
<p><img data-src="/zh-CN/44bf8def/fancybox.png" alt="Fancybox3效果"></p>
<h2 id="配置第三方CDN"><a href="#配置第三方CDN" class="headerlink" title="配置第三方CDN"></a>配置第三方CDN</h2><p>对于这一部分的内容，其实前面在插件介绍中也已经有所涉及了。NexT提供了CDN配置的功能，如果你对某个插件进行了CDN的配置，那么页面在加载时，将会从CDN来下载相关的js脚本。如果配置为空，则会在本地目录读取对应的文件。<br>在加载页面时，可以在Chrome中按F12进入开发者菜单，点击<code>Network</code>标签，可以看到页面在加载时，哪些文件耗费了比较长的时间。如果启用了一些比较大的插件，如<code>Busuanzi</code>，<code>Valine</code>,那么使用CDN来加载静态文件，可以有效地加速页面的加载速度。</p>
<p>在主题配置文件<code>themes/next/_config.yml</code>中，搜索<code>vendors:</code>即可找到第三方CDN的配置项。</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"><span class="symbol">vendors:</span></span><br><span class="line">  <span class="comment"># Internal path prefix.</span></span><br><span class="line">  \<span class="symbol">_internal:</span> <span class="class"><span class="keyword">lib</span></span></span><br></pre></td></tr></table></figure>

<p>这里定义了如果某插件的CDN没有进行配置，那么就会在<code>themes/next/source/lib/</code>目录下，加载插件所需的静态文件。</p>
<p>然后根据自己启用插件的情况，将需要的行添加到主题配置<code>themes_config</code>下。这里贴出我启用的配置，仅供参考：</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"><span class="symbol">vendors:</span></span><br><span class="line">  <span class="symbol">fontawesome:</span> /<span class="regexp">/cdn.jsdelivr.net/npm</span><span class="regexp">/font-awesome@4/css</span><span class="regexp">/font-awesome.min.css</span></span><br><span class="line"><span class="regexp">  jquery: /</span><span class="regexp">/cdn.jsdelivr.net/npm</span><span class="regexp">/jquery@3/dist</span><span class="regexp">/jquery.min.js</span></span><br><span class="line"><span class="regexp">  fancybox: /</span><span class="regexp">/cdn.jsdelivr.net/gh</span><span class="regexp">/fancyapps/fancybox</span>@<span class="number">3</span>/dist/jquery.fancybox.min.js</span><br><span class="line">  <span class="symbol">fancybox_css:</span> /<span class="regexp">/cdn.jsdelivr.net/gh</span><span class="regexp">/fancyapps/fancybox</span>@<span class="number">3</span>/dist/jquery.fancybox.min.css</span><br><span class="line">  <span class="symbol">lazyload:</span> /<span class="regexp">/cdn.jsdelivr.net/npm</span><span class="regexp">/lozad@1/dist</span><span class="regexp">/lozad.min.js</span></span><br><span class="line"><span class="regexp">  valine: /</span><span class="regexp">/cdn.jsdelivr.net/npm</span><span class="regexp">/valine@1/dist</span><span class="regexp">/Valine.min.js</span></span><br><span class="line"><span class="regexp">  pace: /</span><span class="regexp">/cdn.jsdelivr.net/npm</span><span class="regexp">/pace-js@1/pace</span>.min.js</span><br><span class="line">  <span class="symbol">pace_css:</span> /<span class="regexp">/cdn.jsdelivr.net/npm</span><span class="regexp">/pace-js@1/themes</span><span class="regexp">/blue/pace</span>-theme-minimal.css</span><br><span class="line">  <span class="symbol">canvas_nest:</span> /<span class="regexp">/cdn.jsdelivr.net/gh</span><span class="regexp">/theme-next/theme</span>-<span class="keyword">next</span>-canvas-nest@<span class="number">1</span>/canvas-nest.min.js</span><br><span class="line">  <span class="symbol">canvas_nest_nomobile:</span> /<span class="regexp">/cdn.jsdelivr.net/gh</span><span class="regexp">/theme-next/theme</span>-<span class="keyword">next</span>-canvas-nest@<span class="number">1</span>/canvas-nest-nomobile.min.js</span><br></pre></td></tr></table></figure>

<h1 id="NexT内置主题样式美化"><a href="#NexT内置主题样式美化" class="headerlink" title="NexT内置主题样式美化"></a>NexT内置主题样式美化</h1><p>这一部分其实主要是对样式进行自定义修改，基本思路就是在自定义的样式文件中加入对应元素的css属性设置。</p>
<h2 id="侧边栏圆角"><a href="#侧边栏圆角" class="headerlink" title="侧边栏圆角"></a>侧边栏圆角</h2><p>打开<code>themes/next/source/css/_variables/Gemini.styl</code>，根据启用的不同主题，选择相应的文件。这里修改的是<code>Gemini.styl</code>。<br>在文件中修改代码：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">$border-radius-inner   = <span class="number">0</span> <span class="number">0</span> <span class="number">10</span>px <span class="number">10</span>px;</span><br><span class="line">$border-radius         = <span class="number">10</span>px;</span><br></pre></td></tr></table></figure>

<hr>
<p>参考文档：</p>
<ul>
<li><a href="https://io-oi.me/tech/hexo-next-optimization" target="_blank" rel="noopener">https://io-oi.me/tech/hexo-next-optimization</a></li>
<li><a href="https://gis90.github.io/articles/3412/" target="_blank" rel="noopener">https://gis90.github.io/articles/3412/</a></li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>为Hexo NexT 添加评论系统</title>
    <url>/zh-CN/c0899d18/</url>
    <content><![CDATA[<h1 id="选择合适的评论系统"><a href="#选择合适的评论系统" class="headerlink" title="选择合适的评论系统"></a>选择合适的评论系统</h1><p>我选择评论系统时，考虑到以下几点：</p>
<ul>
<li>免费 ( 排除 <strong>hypercomments</strong> )</li>
<li>无需翻墙 ( 排除 <strong>disqus</strong> )</li>
<li>评论无需注册登录 ( 排除 <strong>gitment</strong>, <strong>gitalk</strong>, <strong>gitter</strong> 这三个github相关的评论系统 )</li>
<li>不要求网站备案 ( 排除一系列国内的评论系统 )</li>
</ul>
<p>在剩下的为数不多的可选项中，<a href="https://valine.js.org/" target="_blank" rel="noopener">Valine</a>就成为了那个被我最终选择的评论系统。</p>
<p><strong>最终效果图:</strong><br><img data-src="/zh-CN/c0899d18/result.PNG" alt="效果图"></p>
<a id="more"></a>

<h1 id="LeanCloud-注册及配置"><a href="#LeanCloud-注册及配置" class="headerlink" title="LeanCloud 注册及配置"></a><a href="https://www.leancloud.cn/" target="_blank" rel="noopener">LeanCloud</a> 注册及配置</h1><h2 id="账号注册"><a href="#账号注册" class="headerlink" title="账号注册"></a>账号注册</h2><p><strong>Valine</strong>是一款基于<strong>LeanCloud</strong>的快速、简洁且高效的无后端评论系统。所以我们需要先注册一个账号。  </p>
<p>这里顺带提一句，在Valine上注册需要手机号码接受验证码，以及通过实名身份认证。</p>
<p><img data-src="/zh-CN/c0899d18/Valine_register.PNG" alt="Valine_register"></p>
<p>Valine已经计划在未来支持基于Firebase的评论存储。Firebase可以避免实名身份认证等问题。</p>
<h2 id="创建应用并获取APP-ID-和-APP-Key"><a href="#创建应用并获取APP-ID-和-APP-Key" class="headerlink" title="创建应用并获取APP ID 和 APP Key"></a>创建应用并获取APP ID 和 APP Key</h2><p>在完成上述认证步骤之后，我们可以开始创建应用。  </p>
<p><img data-src="/zh-CN/c0899d18/LeanCloud_Create.jpg" alt="创建应用">  </p>
<p>应用创建好以后，进入刚刚创建的应用，选择左下角的设置&gt;应用Key，然后就能看到你的APP ID和APP Key了：</p>
<p><img data-src="/zh-CN/c0899d18/LeanCloud_AppKey.jpg" alt="获取App ID和Key"></p>
<p>之后再在左边栏点击储存，查看结构化数据中有没有<em>Comment</em>和<em>Counter</em>这两个Classes。如果没有，点击创建Class，默认选项即可直接创建。</p>
<p><img data-src="/zh-CN/c0899d18/LeanCloud_AddClass.PNG" alt="LeanCloud_AddClass"></p>
<p>再进入设置-安全中心，设置自己的安全域名：</p>
<p><img data-src="/zh-CN/c0899d18/LeanCloud_SecuredDomain.PNG" alt="LeanCloud_SecuredDomain"></p>
<p>至此，就是全部需要在LeanCloud中进行的操作了。</p>
<h1 id="配置NexT"><a href="#配置NexT" class="headerlink" title="配置NexT"></a>配置NexT</h1><p>在主题配置文件中找到Valine配置项，根据自己的需要进行配置。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Valine</span></span><br><span class="line"><span class="comment"># For more information: https://valine.js.org, https://github.com/xCss/Valine</span></span><br><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">appid:</span> <span class="comment"># Your leancloud application appid</span></span><br><span class="line">  <span class="attr">appkey:</span> <span class="comment"># Your leancloud application appkey</span></span><br><span class="line">  <span class="attr">notify:</span> <span class="literal">false</span> <span class="comment"># Mail notifier</span></span><br><span class="line">  <span class="attr">verify:</span> <span class="literal">false</span> <span class="comment"># Verification code</span></span><br><span class="line">  <span class="attr">placeholder:</span> <span class="string">Your</span> <span class="string">comments...</span> <span class="comment"># Comment box placeholder</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">monsterid</span> <span class="comment"># Gravatar style</span></span><br><span class="line">  <span class="attr">guest_info:</span> <span class="string">nick,mail,link</span> <span class="comment"># Custom comment header</span></span><br><span class="line">  <span class="attr">pageSize:</span> <span class="number">10</span> <span class="comment"># Pagination size</span></span><br><span class="line">  <span class="attr">language:</span> <span class="string">en</span> <span class="comment"># Language, available values: en, zh-cn</span></span><br><span class="line">  <span class="attr">visitor:</span> <span class="literal">true</span> <span class="comment"># Article reading statistic</span></span><br><span class="line">  <span class="attr">comment_count:</span> <span class="literal">true</span> <span class="comment"># If false, comment count will only be displayed in post page, not in home page</span></span><br><span class="line">  <span class="attr">recordIP:</span> <span class="literal">true</span> <span class="comment"># Whether to record the commenter IP</span></span><br><span class="line">  <span class="attr">serverURLs:</span> <span class="comment"># When the custom domain name is enabled, fill it in here (it will be detected automatically by default, no need to fill in)</span></span><br><span class="line">  <span class="comment">#post_meta_order: 0</span></span><br></pre></td></tr></table></figure>

<p>具体参数的含义可以查看<a href="https://valine.js.org/configuration.html" target="_blank" rel="noopener">官方文档</a>.<br>这里简单说明一下：</p>
<ul>
<li>enable: true   不解释</li>
<li>appid 和 appkey, 填上之前LeanCloud中获得的对应值</li>
<li>notify: 控制邮件通知。需要配合LeanCloud的配置，详见：<a href="https://github.com/xCss/Valine/wiki/Valine-%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E9%82%AE%E4%BB%B6%E6%8F%90%E9%86%92%E8%AE%BE%E7%BD%AE" target="_blank" rel="noopener">https://github.com/xCss/Valine/wiki/Valine-%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E9%82%AE%E4%BB%B6%E6%8F%90%E9%86%92%E8%AE%BE%E7%BD%AE</a></li>
<li>verify: 验证码服务</li>
<li>placeholder: 评论框的占位提示符，默认为”Just go go”。这里可以修改成任意你觉得有趣的话。</li>
<li>avatar: 默认为mm，具体详见：<a href="https://valine.js.org/avatar.html" target="_blank" rel="noopener">https://valine.js.org/avatar.html</a></li>
<li>pageSize: 评论分页每页条数</li>
<li>language: 目前仅支持en和zh-cn。暂时还不知道如何可以让评论区的语言与文章的语言统一。</li>
<li>visitor: 是否启用阅读量统计</li>
<li>comment_count: 如果是true评论数统计会显示在主页上，false的话则评论数仅在文章页面显示。</li>
<li>recordIP: 是否记录评论者IP</li>
</ul>
<h1 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h1><p>完成配置后，执行<code>hexo cl &amp;&amp; hexo g</code>来观察效果。</p>
<p><img data-src="/zh-CN/c0899d18/result.PNG" alt="最终效果"></p>
<p>Perfect! 一次成功！</p>
<p><em>评论的功能在所有页面都默认开启，我们可以通过在Front-matter中添加comments: false 来关闭评论</em></p>
<h1 id="评论管理"><a href="#评论管理" class="headerlink" title="评论管理"></a>评论管理</h1><p>通过 <a href="https://github.com/panjunwen/Valine-Admin" target="_blank" rel="noopener">Valine Admin</a> 可以实现了评论邮件通知、评论管理、垃圾评论过滤等功能。支持完全自定义的邮件通知模板。<br>目前我并没有启用这个功能。毕竟几乎没有评论，也不需要集中管理。如果之后有需要添加，再更新这一部分的内容。</p>
<hr>
<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul>
<li><a href="https://www.zhihu.com/question/267598518" target="_blank" rel="noopener">Hexo（NexT 主题）评论系统哪个好？</a></li>
<li><a href="https://www.jianshu.com/p/3e200908b9fc" target="_blank" rel="noopener">Hexo NexT主题评论功能的筛选对比</a></li>
<li><a href="https://valine.js.org/quickstart.html" target="_blank" rel="noopener">Valine官方文档</a></li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
        <tag>Valine</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo版本升级指南</title>
    <url>/zh-CN/3ba3be9/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>进来想起来自己还有这么一个博客。那么第一件事当然是对版本进行升级咯！可升级的过程远远没有想象中的那般顺利，因此在此记录一下，其他人如果遇到类似的问题，也可以有一个借鉴。<br>升级前，先检查当前hexo的版本号：<code>hexo --version</code>。版本信息如下图所示：<br><img data-src="/zh-CN/3ba3be9/hexo_check_version.png" alt="Hexo版本信息"> </p>
<h1 id="升级步骤"><a href="#升级步骤" class="headerlink" title="升级步骤"></a>升级步骤</h1><p> 在Hexo的文档中搜索一番，结果！！完全没有提及版本升级的方法。。。行吧，只能借助万能的Google，经过比较，终于找到了一个简单粗暴的方法：<br>首先进入Hexo的主目录，然后直接执行</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> update</span><br></pre></td></tr></table></figure>

<p>等等等…没动静呐！看来有必要重新配置一下NPM…</p>
<a id="more"></a>

<h2 id="更换NPM镜像服务器地址，解决国内NPM安装依赖速度慢的问题"><a href="#更换NPM镜像服务器地址，解决国内NPM安装依赖速度慢的问题" class="headerlink" title="更换NPM镜像服务器地址，解决国内NPM安装依赖速度慢的问题"></a>更换NPM镜像服务器地址，解决国内NPM安装依赖速度慢的问题</h2><p>在npm的命令最后使用<code>--registry</code>参数指定国内镜像服务器地址，就可以让NPM的安装速度获得显著的提升。<br>这里我们使用阿里巴巴的镜像：</p>
<figure class="highlight tcl"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">update</span> --<span class="keyword">registry</span>=<span class="keyword">http</span>://<span class="keyword">registry</span>.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p>当然，也可以通过如下的命令对NPM进行永久配置：</p>
<figure class="highlight tcl"><table><tr><td class="code"><pre><span class="line">npm config <span class="keyword">set</span> <span class="keyword">registry</span> <span class="keyword">http</span>://<span class="keyword">registry</span>.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p>这样子，我们的NPM命令就可以快速地执行了！</p>
<h2 id="使用NPM进行Hexo版本升级"><a href="#使用NPM进行Hexo版本升级" class="headerlink" title="使用NPM进行Hexo版本升级"></a>使用NPM进行Hexo版本升级</h2><p>这就完了？？？是的！再执行一遍<code>hexo --version</code>,看一下是不是已经到了最新的版本：<br><img data-src="/zh-CN/3ba3be9/hexo_check_version_2.png" alt="Hexo版本信息2"></p>
<p>Hmmmmm…版本信息确实产生了变化，从3.7.1升级到了3.9.0。但是，这貌似也不是<a href="http://www.npmjs.com/package/hexo?activeTab=versions" target="_blank" rel="noopener">最新的版本</a>呀！！  </p>
<p>难道是Node.js的版本问题？<a href="https://hexo.io/docs/#installation" target="_blank" rel="noopener">Hexo官方文档</a>中有Node.js的版本要求，Hexo 4.1+ 需要至少8.10版本。</p>
<p><img data-src="/zh-CN/3ba3be9/hexo_nodejs_requirement.png" alt="NodeJS版本要求"></p>
<p>我重新看了一下之前<code>hexo --version</code>的输出结果：<code>node: 13.5.0</code>..<br>这个显然是满足的呀！所以完全不会是Node.js的版本问题造成无法更新到最新版本。</p>
<h2 id="Package-json-修改版本信息"><a href="#Package-json-修改版本信息" class="headerlink" title="Package.json 修改版本信息"></a>Package.json 修改版本信息</h2><p>那么，究竟是哪里出了问题呢？<br>仔细思考：NPM是如何管理本地安装的呢？ <strong>package.json</strong>!! 赶紧查看Hexo目录下的<code>package.json</code>文件。果然！我清清楚楚地看到了<code>&quot;hexo&quot; : &quot;^3.9.0&quot;</code>的字样。问题是找到了，但是这一整列的插件，我们如果一个个去查最新的版本，肯定是要费不少功夫，那么有没有更快速的方法呢？<br>我们可以用下列命令来自动化完成这项工作：</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> install -g <span class="built_in">npm</span>-check</span><br><span class="line"><span class="built_in">npm</span> install -g <span class="built_in">npm</span>-upgrade</span><br><span class="line"><span class="built_in">npm</span>-check</span><br><span class="line"><span class="built_in">npm</span>-upgrade</span><br></pre></td></tr></table></figure>

<p>执行结果如下图：<br><img data-src="/zh-CN/3ba3be9/npm_upgrade.png" alt="npm-upgrade执行结果"></p>
<p>至此，我们完成了<code>package.json</code>中，版本信息的更新。</p>
<h2 id="完成Hexo版本升级"><a href="#完成Hexo版本升级" class="headerlink" title="完成Hexo版本升级"></a>完成Hexo版本升级</h2><p>我们再次执行<code>npm update</code>。<br>完成以后，我们再次通过<code>hexo version</code>确认版本号。成功，我们终于顺利将Hexo升级到了最新的版本。<br><img data-src="/zh-CN/3ba3be9/hexo_check_version_3.png" alt="Hexo版本信息3"></p>
<hr>
<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul>
<li><a href="https://jianshu.com/p/5adcee63c3b8" target="_blank" rel="noopener">https://jianshu.com/p/5adcee63c3b8</a></li>
<li><a href="https://hexo.io/docs/" target="_blank" rel="noopener">https://hexo.io/docs/</a></li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Configuration</tag>
        <tag>NPM</tag>
      </tags>
  </entry>
  <entry>
    <title>Installing-Docker-in-Kali</title>
    <url>/undefined/8b79501d/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>MySQL Binlog 调查取证</title>
    <url>/zh-CN/82b8fc5e/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>最近，公司有一个客户的MySQL数据库被篡改了数据，因此需要对该客户被攻击的服务器进行调查。其中涉及到对MySQL的Binlog日志分析。在任务完成后，将其中相关的步骤进行总结。</p>
<h1 id="Binlog"><a href="#Binlog" class="headerlink" title="Binlog"></a>Binlog</h1><h2 id="定位-Binlog-位置"><a href="#定位-Binlog-位置" class="headerlink" title="定位 Binlog 位置"></a>定位 Binlog 位置</h2><p>找到MySQL安装目录中bin目录的位置，同时确认binlog的储存位置。其相应的配置在my.cnf的log_bin=””中。<br>如果能够使用mySQL命令行连接，也可以使用 <code>showvariables like &#39;%log_bin%&#39;</code>命令查看binlog的相关配置。</p>
<a id="more"></a>

<h2 id="Binlog-结构"><a href="#Binlog-结构" class="headerlink" title="Binlog 结构"></a>Binlog 结构</h2><p>在binlog所在的数据目录(默认为data目录)，可以看到mysql-bin.index 及 mysql-bin.0000xx 文件。其中.index文件为索引文件，记录数据文件列表。每当数据库重启或者当前一个文件写满后会生成新文件，同时使用命令<code>flush logs</code>也可以重新生成新的binlog日志文件。<code>reset master</code>命令可以用于清空binlog日志文件。</p>
<h2 id="Binlog-格式"><a href="#Binlog-格式" class="headerlink" title="Binlog 格式"></a>Binlog 格式</h2><p>Binlog的格式有三个选项：<br>    - Row<br>    - Statement<br>    - Mixed<br>简单介绍这三种格式，分别为：<br>    - Row: 默认格式，记录导致表的行发生变化的事件<br>    - Statement: 记录被执行的原始SQL查询语句<br>    - Mixed: 默认使用Statement格式，再特定情况下使用Row格式<br>Binlog格式可以在my.cnf的binlog-format=中进行配置。在MySQL命令行中可以通过<code>SHOW VARIABLES LIKE &#39;binlog_format&#39;;</code>查看。</p>
<h2 id="Binlog-内容"><a href="#Binlog-内容" class="headerlink" title="Binlog 内容"></a>Binlog 内容</h2><p>由于binlog是以二进制格式储存的，所以无法直接查看。MySQL自带的mysqlbinlog工具可以用来查看binlog。<code>[MySQL directory]\bin\mysqlbinlog mysql-bin.000008</code>即可获取binlog中的内容。当然也可以添加参数(–start-porition, –stop-position, –start-time, –stop-time)来筛选日志。在很多事件调查中，其实都可以将目标时间确定在一个范围之内，因此使用参数进行筛选会给我们带来极大的便利。<br>对于Row格式的Binlog，还可以使用-v参数将日志记录转译为”伪-SQL语句”。</p>
<hr>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://cloud.tencent.com/developer/article/1032755" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1032755</a><br><a href="https://maxchadwick.xyz/blog/working-with-mysql-binary-logs" target="_blank" rel="noopener">https://maxchadwick.xyz/blog/working-with-mysql-binary-logs</a></p>
]]></content>
      <categories>
        <category>Security</category>
        <category>Forensics</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>Binlog</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim 配置</title>
    <url>/zh-CN/b8c5a601/</url>
    <content><![CDATA[<h1 id="Vim插件管理器：Vundle安装"><a href="#Vim插件管理器：Vundle安装" class="headerlink" title="Vim插件管理器：Vundle安装"></a>Vim插件管理器：Vundle安装</h1><ol>
<li>下载Vundle<br><code>git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim</code></li>
</ol>
<a id="more"></a>

<h1 id="修改Vim配置文件-vimrc"><a href="#修改Vim配置文件-vimrc" class="headerlink" title="修改Vim配置文件 ~/.vimrc"></a>修改Vim配置文件 ~/.vimrc</h1><p>将下面的配置添加到<code>~/.vimrc</code>中。可以根据自己的需要添加或者移除Plugin。</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> nocompatible              <span class="comment">" be iMproved, required</span></span><br><span class="line"><span class="keyword">filetype</span> off                  <span class="comment">" required</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" set the runtime path to include Vundle and initialize</span></span><br><span class="line"><span class="keyword">set</span> rtp+=~/.<span class="keyword">vim</span>/bundle/Vundle.<span class="keyword">vim</span></span><br><span class="line"><span class="keyword">call</span> vundle#begin()</span><br><span class="line"><span class="comment">" alternatively, pass a path where Vundle should install plugins</span></span><br><span class="line"><span class="comment">"call vundle#begin('~/some/path/here')</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" let Vundle manage Vundle, required</span></span><br><span class="line">Plugin <span class="string">'VundleVim/Vundle.vim'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" The following are examples of different formats supported.</span></span><br><span class="line"><span class="comment">" Keep Plugin commands between vundle#begin/end.</span></span><br><span class="line"><span class="comment">" plugin on GitHub repo</span></span><br><span class="line">Plugin <span class="string">'tpope/vim-fugitive'</span></span><br><span class="line">Plugin <span class="string">'Valloric/YouCompleteMe'</span></span><br><span class="line">Plugin <span class="string">'plasticboy/vim-markdown'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">" plugin from http://vim-scripts.org/vim/scripts.html</span></span><br><span class="line"><span class="comment">" Plugin 'L9'</span></span><br><span class="line"><span class="comment">" Git plugin not hosted on GitHub</span></span><br><span class="line"><span class="comment">" git repos on your local machine (i.e. when working on your own plugin)</span></span><br><span class="line"><span class="comment">"Plugin 'file:///home/gmarik/path/to/plugin'</span></span><br><span class="line"><span class="comment">" The sparkup vim script is in a subdirectory of this repo called vim.</span></span><br><span class="line"><span class="comment">" Pass the path to set the runtimepath properly.</span></span><br><span class="line">Plugin <span class="string">'rstacruz/sparkup'</span>, &#123;<span class="string">'rtp'</span>: <span class="string">'vim/'</span>&#125;</span><br><span class="line"><span class="comment">" Install L9 and avoid a Naming conflict if you've already installed a</span></span><br><span class="line"><span class="comment">" different version somewhere else.</span></span><br><span class="line"><span class="comment">" Plugin 'ascenator/L9', &#123;'name': 'newL9'&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" Color schemes</span></span><br><span class="line">Plugin <span class="string">'tomasr/molokai'</span></span><br><span class="line">Plugin <span class="string">'altercation/vim-colors-solarized'</span></span><br><span class="line">Plugin <span class="string">'flazz/vim-colorschemes'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">" All of your Plugins must be added before the following line</span></span><br><span class="line"><span class="keyword">call</span> vundle#end()            <span class="comment">" required</span></span><br><span class="line"><span class="keyword">filetype</span> plugin <span class="built_in">indent</span> <span class="keyword">on</span>    <span class="comment">" required</span></span><br><span class="line"><span class="comment">" To ignore plugin indent changes, instead use:</span></span><br><span class="line"><span class="comment">"filetype plugin on</span></span><br><span class="line"><span class="comment">"</span></span><br><span class="line"><span class="comment">" Brief help</span></span><br><span class="line"><span class="comment">" :PluginList       - lists configured plugins</span></span><br><span class="line"><span class="comment">" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate</span></span><br><span class="line"><span class="comment">" :PluginSearch foo - searches for foo; append `!` to refresh local cache</span></span><br><span class="line"><span class="comment">" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal</span></span><br><span class="line"><span class="comment">"</span></span><br><span class="line"><span class="comment">" see :h vundle for more details or wiki for FAQ</span></span><br><span class="line"><span class="comment">" Put your non-Plugin stuff after this line</span></span><br><span class="line"><span class="comment">" </span></span><br><span class="line"><span class="comment">"</span></span><br><span class="line"><span class="comment">"</span></span><br><span class="line"><span class="keyword">syntax</span> enable</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> fdm=marker</span><br><span class="line"><span class="keyword">set</span> tabstop=<span class="number">8</span> softtabstop=<span class="number">0</span> expandtab <span class="built_in">shiftwidth</span>=<span class="number">4</span> smarttab</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">nu</span></span><br></pre></td></tr></table></figure>


<h1 id="下载插件"><a href="#下载插件" class="headerlink" title="下载插件"></a>下载插件</h1><p>通过<code>git clone</code>命令，将需要的插件下载到<code>~/.vim/bundle</code>目录下。<br><img data-src="/zh-CN/b8c5a601/plugin_download.png" alt></p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/VundleVim/Vundle.<span class="keyword">vim</span>.git ~/.<span class="keyword">vim</span>/bundle/Vundle.<span class="keyword">vim</span></span><br><span class="line"><span class="keyword">cd</span> ~/.<span class="keyword">vim</span>/bundle</span><br><span class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/tpope/<span class="keyword">vim</span>-fugitive</span><br><span class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/altercation/<span class="keyword">vim</span>-colors-solarized</span><br><span class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/Valloric/YouCompleteMe</span><br><span class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/rstacruz/sparkup</span><br><span class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/plasticboy/<span class="keyword">vim</span>-markdown</span><br></pre></td></tr></table></figure>

<h1 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h1><p>运行<strong>Vim</strong>,然后执行<code>:PluginInstall</code>。<br>当然也可以直接在命令行执行<code>vim +PluginInstall +qall</code></p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Vim</category>
      </categories>
      <tags>
        <tag>Configuration</tag>
        <tag>Vim</tag>
        <tag>Vundle</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim Configuration</title>
    <url>/en/aa4adef2/</url>
    <content><![CDATA[<h1 id="Install-Vim-Plug-in-Manager：Vundle"><a href="#Install-Vim-Plug-in-Manager：Vundle" class="headerlink" title="Install Vim Plug-in Manager：Vundle"></a>Install Vim Plug-in Manager：Vundle</h1><ol>
<li>Download Vundle<br><code>git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim</code></li>
</ol>
<a id="more"></a>


<h1 id="Configure-Vim-file-vimrc"><a href="#Configure-Vim-file-vimrc" class="headerlink" title="Configure Vim file ~/.vimrc"></a>Configure Vim file ~/.vimrc</h1><p>Add the following content to <code>~/.vimrc</code> file. It’s up to you to add/remove some plug-ins.</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> nocompatible              <span class="comment">" be iMproved, required</span></span><br><span class="line"><span class="keyword">filetype</span> off                  <span class="comment">" required</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" set the runtime path to include Vundle and initialize</span></span><br><span class="line"><span class="keyword">set</span> rtp+=~/.<span class="keyword">vim</span>/bundle/Vundle.<span class="keyword">vim</span></span><br><span class="line"><span class="keyword">call</span> vundle#begin()</span><br><span class="line"><span class="comment">" alternatively, pass a path where Vundle should install plugins</span></span><br><span class="line"><span class="comment">"call vundle#begin('~/some/path/here')</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" let Vundle manage Vundle, required</span></span><br><span class="line">Plugin <span class="string">'VundleVim/Vundle.vim'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" The following are examples of different formats supported.</span></span><br><span class="line"><span class="comment">" Keep Plugin commands between vundle#begin/end.</span></span><br><span class="line"><span class="comment">" plugin on GitHub repo</span></span><br><span class="line">Plugin <span class="string">'tpope/vim-fugitive'</span></span><br><span class="line">Plugin <span class="string">'Valloric/YouCompleteMe'</span></span><br><span class="line">Plugin <span class="string">'plasticboy/vim-markdown'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">" plugin from http://vim-scripts.org/vim/scripts.html</span></span><br><span class="line"><span class="comment">" Plugin 'L9'</span></span><br><span class="line"><span class="comment">" Git plugin not hosted on GitHub</span></span><br><span class="line"><span class="comment">" git repos on your local machine (i.e. when working on your own plugin)</span></span><br><span class="line"><span class="comment">"Plugin 'file:///home/gmarik/path/to/plugin'</span></span><br><span class="line"><span class="comment">" The sparkup vim script is in a subdirectory of this repo called vim.</span></span><br><span class="line"><span class="comment">" Pass the path to set the runtimepath properly.</span></span><br><span class="line">Plugin <span class="string">'rstacruz/sparkup'</span>, &#123;<span class="string">'rtp'</span>: <span class="string">'vim/'</span>&#125;</span><br><span class="line"><span class="comment">" Install L9 and avoid a Naming conflict if you've already installed a</span></span><br><span class="line"><span class="comment">" different version somewhere else.</span></span><br><span class="line"><span class="comment">" Plugin 'ascenator/L9', &#123;'name': 'newL9'&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" Color schemes</span></span><br><span class="line">Plugin <span class="string">'tomasr/molokai'</span></span><br><span class="line">Plugin <span class="string">'altercation/vim-colors-solarized'</span></span><br><span class="line">Plugin <span class="string">'flazz/vim-colorschemes'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">" All of your Plugins must be added before the following line</span></span><br><span class="line"><span class="keyword">call</span> vundle#end()            <span class="comment">" required</span></span><br><span class="line"><span class="keyword">filetype</span> plugin <span class="built_in">indent</span> <span class="keyword">on</span>    <span class="comment">" required</span></span><br><span class="line"><span class="comment">" To ignore plugin indent changes, instead use:</span></span><br><span class="line"><span class="comment">"filetype plugin on</span></span><br><span class="line"><span class="comment">"</span></span><br><span class="line"><span class="comment">" Brief help</span></span><br><span class="line"><span class="comment">" :PluginList       - lists configured plugins</span></span><br><span class="line"><span class="comment">" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate</span></span><br><span class="line"><span class="comment">" :PluginSearch foo - searches for foo; append `!` to refresh local cache</span></span><br><span class="line"><span class="comment">" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal</span></span><br><span class="line"><span class="comment">"</span></span><br><span class="line"><span class="comment">" see :h vundle for more details or wiki for FAQ</span></span><br><span class="line"><span class="comment">" Put your non-Plugin stuff after this line</span></span><br><span class="line"><span class="comment">" </span></span><br><span class="line"><span class="comment">"</span></span><br><span class="line"><span class="comment">"</span></span><br><span class="line"><span class="keyword">syntax</span> enable</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> fdm=marker</span><br><span class="line"><span class="keyword">set</span> tabstop=<span class="number">8</span> softtabstop=<span class="number">0</span> expandtab <span class="built_in">shiftwidth</span>=<span class="number">4</span> smarttab</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">nu</span></span><br></pre></td></tr></table></figure>


<h1 id="Download-Plug-ins"><a href="#Download-Plug-ins" class="headerlink" title="Download Plug-ins"></a>Download Plug-ins</h1><p>Run <code>git clone</code> for each plug-ins, Download them to<code>~/.vim/bundle</code>。<br><img data-src="/en/aa4adef2/plugin_download.png" alt></p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/VundleVim/Vundle.<span class="keyword">vim</span>.git ~/.<span class="keyword">vim</span>/bundle/Vundle.<span class="keyword">vim</span></span><br><span class="line"><span class="keyword">cd</span> ~/.<span class="keyword">vim</span>/bundle</span><br><span class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/tpope/<span class="keyword">vim</span>-fugitive</span><br><span class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/altercation/<span class="keyword">vim</span>-colors-solarized</span><br><span class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/Valloric/YouCompleteMe</span><br><span class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/rstacruz/sparkup</span><br><span class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/plasticboy/<span class="keyword">vim</span>-markdown</span><br></pre></td></tr></table></figure>

<h1 id="Install-Plug-ins"><a href="#Install-Plug-ins" class="headerlink" title="Install Plug-ins"></a>Install Plug-ins</h1><p>Run<strong>Vim</strong>, and then execute<code>:PluginInstall</code>。<br>Alternatively, you can run <code>vim +PluginInstall +qall</code> directly in shell. </p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Vim</category>
      </categories>
      <tags>
        <tag>Configuration</tag>
        <tag>Vim</tag>
        <tag>Vundle</tag>
      </tags>
  </entry>
  <entry>
    <title>利用Hexo框架搭建中英文双语网站</title>
    <url>/zh-CN/78ced6ec/</url>
    <content><![CDATA[<h1 id="2019-12更新"><a href="#2019-12更新" class="headerlink" title="2019.12更新"></a>2019.12更新</h1><p>对该方法进行了更新，文中引用的代码适用于Hexo v4.2.0, Next v7.7.0.<br>请各位根据自己的版本情况进行相应的微调。  </p>
<hr>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Hexo本身有对于博客国际化的多语言的支持。但 是简单倒腾后发现，所谓的国际化只是在显示文章时，根据文章设定的语言将导航栏，侧边栏中的链接名称改为相对应的语言。但博客本身的博文列表中，各个语言的文章仍然混杂在一起。</p>
<p>而我理想中的中英文双语站点可以通过一张图片非常形象的表示出来：<br><img data-src="/zh-CN/78ced6ec/bilingualize.png" alt="理想网站结构"></p>
<p>通过一段时间的搜索，我发现了两种较为可行的方法来实现这个功能。这里我挑选了一个我认为更加合理的方法来实现。</p>
<a id="more"></a>

<p>（另一种方法通过两套Hexo+NexT来实现。即构建中英文两个相互独立的Hexo站点。这样做的好处在于结构清晰，两种语言不存在互相干扰的可能。但缺点则是这样子相当于维护两套Hexo站点，每次生成都需要执行两次，致使操作相对繁杂。具体的实现方法详见：<a href="https://chenyxmr.github.io/2016/08/04/hexo-bilingual/）" target="_blank" rel="noopener">https://chenyxmr.github.io/2016/08/04/hexo-bilingual/）</a></p>
<p>好了，切入正题，接下来我将详细介绍基于hexo-generator-i18n插件的方法。</p>
<h1 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h1><h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><p> 首先，安装hexo-generator-i18n插件。相信这条命令大家已经非常熟悉了。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-generator-i18n <span class="comment">--save</span></span><br></pre></td></tr></table></figure>
<p>插件成功安装完成后，在Hexo的根目录中找到package.json文件，这个文件记录了已经安装的各个Hexo插件名称及版本号。在这个文件中将<code>hexo-generator-i18n</code>所在的这一行移动到<code>hexo-generator-</code>的最后一行。</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="string">"dependencies"</span>: &#123;</span><br><span class="line">  <span class="string">"canvas-nest.js"</span>: <span class="string">"^2.0.3"</span>,</span><br><span class="line">  <span class="string">"gitment"</span>: <span class="string">"0.0.3"</span>,</span><br><span class="line">  <span class="string">"hexo"</span>: <span class="string">"^3.7.0"</span>,</span><br><span class="line">  <span class="string">"hexo-asset-image"</span>: <span class="string">"0.0.3"</span>,</span><br><span class="line">  <span class="string">"hexo-deployer-git"</span>: <span class="string">"^0.3.1"</span>,</span><br><span class="line">  <span class="string">"hexo-generator-archive"</span>: <span class="string">"^0.1.5"</span>,</span><br><span class="line">  <span class="string">"hexo-generator-category"</span>: <span class="string">"^0.1.3"</span>,</span><br><span class="line">  <span class="string">"hexo-generator-index"</span>: <span class="string">"^0.2.1"</span>,</span><br><span class="line">  <span class="string">"hexo-generator-searchdb"</span>: <span class="string">"^1.0.8"</span>,</span><br><span class="line">  <span class="string">"hexo-generator-tag"</span>: <span class="string">"^0.2.0"</span>,             </span><br><span class="line">  <span class="string">"hexo-generator-i18n"</span>: <span class="string">"0.0.7"</span>,</span><br><span class="line">  <span class="string">"hexo-neat"</span>: <span class="string">"^1.0.4"</span>,</span><br><span class="line">  <span class="string">"hexo-renderer-ejs"</span>: <span class="string">"^0.3.1"</span>,</span><br><span class="line">  <span class="string">"hexo-renderer-marked"</span>: <span class="string">"^0.3.2"</span>,</span><br><span class="line">  <span class="string">"hexo-renderer-stylus"</span>: <span class="string">"^0.3.3"</span>,</span><br></pre></td></tr></table></figure>
<p><em>（根据观察，每次重新安装完插件的时候该文件会自动根据首字母重新排序,要记得修改顺序。）</em></p>
<h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><p>首先修改Hexo根目录中的配置文件_config.yml的语言选项：</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="meta">#language: </span></span><br><span class="line"><span class="meta">#- zh-CN</span></span><br><span class="line"><span class="meta">#- en</span></span><br><span class="line"><span class="symbol">language:</span> [zh-CN,en]</span><br><span class="line"><span class="symbol">i18n:</span></span><br><span class="line"><span class="symbol">  type:</span> [page, post]</span><br><span class="line"><span class="symbol">  generator:</span> [index, archive, category, tag]</span><br></pre></td></tr></table></figure>

<p>完成后保存并退出。尝试运行命令 <code>hexo clean &amp;&amp; hexo g</code> 重新生成public文件夹。<br>此时，public目录下应该会包含了一个新的目录/en。 这个目录就是英文站相关文件所在的路径。每次执行<code>hexo g</code>命令时，所有的博文会在这两个文件目录中各生成一份。此时，如果我们访问网站时，已经可以通过访问 <a href="http://www.yourwebsite.com/en" target="_blank" rel="noopener">www.yourwebsite.com/en</a> 来进入英文站点。但是，显而易见，在当前条件下，无论文章是以何种语言呈现，所有的文章都会在中英文网站中各出现一次。这显然也不是我们所希望得到的效果。因此，我们还需要找一个方法，让Hexo在生成页面时，根据文章的语言将其呈现在对应的页面中。</p>
<p><strong>注意</strong>: 对于NexT v6.0.0以后的版本，务必在主题配置文件中修改配置：  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>否则，在语言切换的过程中，菜单栏以及页脚的语言会出现问题。</p>
<h2 id="添加生成条件"><a href="#添加生成条件" class="headerlink" title="添加生成条件"></a>添加生成条件</h2><p>首先，在博文(post)的标题处加上lang:标识。简体中文博客标记为lang: zh-CN，英文版则是lang: en。</p>
<p>在 themes/next/layout/index.swig文件中，为 </p>
<figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">&#123;&#123; partial(<span class="name">'_macro/post.swig'</span>, &#123;post: post, is_index: <span class="literal">true</span>&#125;) &#125;&#125;</span><br></pre></td></tr></table></figure>

<p> 添加判断条件。   (题外话：此处使用行内代码写包含<code>{</code> <code>%</code> <code>%</code> <code>}</code>这样的语句，会使渲染器尝试解析该断代码，并导致<code>Template render error:</code>这样的错误。我找到的<a href="https://hoxis.github.io/hexo-unexpected-token.html" target="_blank" rel="noopener">相关解决方法</a>)<br>具体代码如下(<em>记得删除注释</em>)：</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> content %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"posts-expand"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;%- <span class="name"><span class="name">for</span></span> post <span class="keyword">in</span> page.posts.toArray() %&#125;</span></span><br><span class="line"><span class="xml">      </span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> page.lang === post.lang %&#125;</span></span><br><span class="line"><span class="xml">        </span><span class="template-variable">&#123;&#123; partial('_macro/post.swig', &#123;post: post, is_index: true&#125;) &#125;&#125;</span></span><br><span class="line"><span class="xml">      </span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;%- <span class="name"><span class="name">endfor</span></span> %&#125;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">  </span><span class="template-tag">&#123;% <span class="name"><span class="name">include</span></span> '_partials/pagination.swig' %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span></span><br></pre></td></tr></table></figure>

<p>再加入该语句之后，只有当页面的语言与文章的语言完全一致时，这篇文章才会被生成。此时再打开首页观察一下，所有的文章都已经根据语言分类到对应的页面中了。</p>
<p>同理，如果站点启用了其他导航页面，你希望在这些页面中，显示的文章同样也根据当前页面的语言来显示的话。那就对其相对应的生成页面做相同的改动就可以了。如，我希望更改归档页面，那就找到themes/next/layout/archive.swig, 并为</p>
<figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">&#123;&#123; partial(<span class="name">'_macro/post.swig'</span>, &#123;post: post, is_index: <span class="literal">true</span>&#125;) &#125;&#125;</span><br></pre></td></tr></table></figure>
<p>添加判断条件。</p>
<p>但是，这也还没有结束。虽然我们已经有两个基本符合我们想象的中英文页面，但他们却还互不相通。因此，我们还需要在导航栏中创建一个链接来实现中英文页面之间的跳转。</p>
<h2 id="在目录栏中添加切换语言项"><a href="#在目录栏中添加切换语言项" class="headerlink" title="在目录栏中添加切换语言项"></a>在目录栏中添加切换语言项</h2><p>首先，找到/themes/next/_config.yml文件，在<code>Menu:</code>下添加<code>switch_lang:</code>关键词：</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">menu:</span></span><br><span class="line"><span class="symbol">  home:</span> / || home</span><br><span class="line">  <span class="meta">#about: /about/ || user</span></span><br><span class="line">  <span class="meta">#tags: /tags/ || tags</span></span><br><span class="line"><span class="symbol">  categories:</span> <span class="meta-keyword">/categories/</span> || th</span><br><span class="line"><span class="symbol">  archives:</span> <span class="meta-keyword">/archives/</span> || archive</span><br><span class="line">  <span class="meta">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="meta">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="meta">#commonweal: /404/ || heartbeat</span></span><br><span class="line"><span class="symbol">  switch_lang:</span> /en || language</span><br></pre></td></tr></table></figure>

<p>其中，<code>||</code>之后的值为该链接所使用的FontAwesome Icon的标签名，有需要的话可以自行修改。不过话说回来，我觉得主题默认的图标都还是不错的，没什么必要修改。如果<code>||</code>之后没有填写，则会显示问号图标。</p>
<p>然后，再为NexT的语言支持文件添加对应的翻译。这里的例子中需要修改的是/themes/next/languages/下的zh-CN.yml和en.yml文件。在两个文件中分别添加<code>switch_lang:</code>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">首页</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">归档</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">分类</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">标签</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">关于</span></span><br><span class="line">  <span class="attr">search:</span> <span class="string">搜索</span></span><br><span class="line">  <span class="attr">schedule:</span> <span class="string">日程表</span></span><br><span class="line">  <span class="attr">sitemap:</span> <span class="string">站点地图</span></span><br><span class="line">  <span class="attr">commonweal:</span> <span class="string">公益</span> <span class="number">404</span></span><br><span class="line">  <span class="attr">switch_lang:</span> <span class="string">--&gt;English</span></span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">Home</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">Archives</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">Categories</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">Tags</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">About</span></span><br><span class="line">  <span class="attr">search:</span> <span class="string">Search</span></span><br><span class="line">  <span class="attr">schedule:</span> <span class="string">Schedule</span></span><br><span class="line">  <span class="attr">sitemap:</span> <span class="string">Sitemap</span></span><br><span class="line">  <span class="attr">commonweal:</span> <span class="string">Commonweal</span> <span class="number">404</span></span><br><span class="line">  <span class="attr">switch_lang:</span> <span class="string">--&gt;简体中文</span></span><br></pre></td></tr></table></figure>

<p>细心的话可能已经会发现，之前在Next主题的_config.yml文件中添加的<code>switch_lang:</code>项所对应的链接为/en。这就意味着，如果我们正在浏览英文页面，虽然目录栏中会显示<code>--&gt;简体中文</code>的语言切换栏，但是点击的话则依旧会跳转到/en页面。也就是说，目前这个跳转链接还只是单向可用的！所以我们还需要一步额外的操作，使英文页面在生成时将这个链接更改为指向我们的主页面（中文首页）。</p>
<p><del>在themes/next/layout/_custom/head.swig中<strong>添加下列js代码</strong>，使其在加载完英文页面后，将switch_lang所对应的链接地址替换。</del><br>在<code>source/_data</code>目录下新建head.swig文件，并<strong>添加下列js代码</strong>。<br>同时在主题配置文件中找到<code>custom_file_path</code>，将head所在行的注释去除。这样，我们的博客在加载完英文页面后，就可以自动将switch_lang所对应的链接地址替换。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// Wait for the page to load first</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> _prevOnload = <span class="built_in">window</span>.onload;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> switchLang = <span class="built_in">document</span>.getElementById(<span class="string">"menu"</span>).getElementsByClassName(<span class="string">"menu-item-switch_lang"</span>)[<span class="number">0</span>].childNodes[<span class="number">1</span>];</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> href = <span class="built_in">window</span>.location.href;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> indexOfEn = href.toLowerCase().indexOf(<span class="string">'/en/'</span>);</span></span><br><span class="line">            if(indexOfEn !== -1) &#123;</span><br><span class="line"><span class="actionscript">                switchLang.href = href.replace(<span class="string">'/en/'</span>, <span class="string">'/'</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                switchLang.href = href.replace(<span class="regexp">/(^http[s]?:\/\/[a-z0-9.]*[:?0-9]*\/)(.*)/i</span>, <span class="string">'$1en/$2'</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><em>这段代码还有改进的空间。如果有合适的意见请在评论中指出。</em></p>
<p>好了！终于来到最后一步了：<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code>重新生成并部署。现在应该就能看到一个相对比较理想的中英文双语博客了。</p>
<h1 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h1><p>当然，通过这种方法实现的Hexo双语网站也还远远没有完善。还有非常多待改进的地方：</p>
<ul>
<li>文章页面跳转<br>  暂时全部跳转到首页</li>
<li>分类中全部显示<br>  在分类生成时加入相应的判断语句</li>
<li>所有文章都会被分别加入两个文件夹，导致数量不对<br>  直接调用Hexo中的函数，不好改。有兴趣的话可以重写。</li>
</ul>
<hr>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://wm4n.github.io/Hexo-NexT-%E5%90%8C%E6%99%82%E6%94%AF%E6%8F%B4%E5%A4%9A%E8%AA%9E%E7%B3%BB/" target="_blank" rel="noopener">https://wm4n.github.io/Hexo-NexT-%E5%90%8C%E6%99%82%E6%94%AF%E6%8F%B4%E5%A4%9A%E8%AA%9E%E7%B3%BB/</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
        <tag>Configuration</tag>
      </tags>
  </entry>
  <entry>
    <title>Insert Images to an Hexo Post</title>
    <url>/en/a45b1048/</url>
    <content><![CDATA[<p>First, execute the following command to install <em>hexo-asset-image</em> plugin. </p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">npm install hexo-asset-<span class="built_in">image</span> --<span class="built_in">save</span></span><br></pre></td></tr></table></figure>

<p>Next, please head to _config.yml to <strong>enable post_asset_folder</strong>.</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>From now on, for each time <code>hexo new [layout] &lt;title&gt;</code> is executed, hexo will simoutanuously create a folder having the same name as your new post’s title. If you want to insert images to your post, just  </p>
]]></content>
      <categories>
        <category>Configuration</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title>YouCompleteMe 安装教程</title>
    <url>/zh-CN/d2b4abf1/</url>
    <content><![CDATA[<p>YouCompleteMe作为Vim中最好用（没有之一）的代码自动补全插件，却同时又是最不容易安装的插件之一。其实在YCM的Github官网，有非常详细完整的安装说明。如果在Mac OS X, Windows, Ubuntu, FreeBSD/OpenBSD或Fedora上安装YCM，且英语还Okay的话，建议直接移步<a href="https://github.com/Valloric/YouCompleteMe#installation" target="_blank" rel="noopener">官方安装说明文档</a>。但官方说明文档却没有对在CentOS与Debian中安装YCM的详细说明。所以在这里总结一下具体的步骤给大家作一个参考。</p>
<h1 id="在CentOS中安装YCM"><a href="#在CentOS中安装YCM" class="headerlink" title="在CentOS中安装YCM"></a>在CentOS中安装YCM</h1><h2 id="使用-Vundle-安装YCM"><a href="#使用-Vundle-安装YCM" class="headerlink" title="使用 Vundle 安装YCM"></a>使用 <a href="https://github.com/VundleVim/Vundle.vim" target="_blank" rel="noopener">Vundle</a> 安装YCM</h2><p>Vundle（Vim Bundle的缩写）是一个针对Vim的插件管理器。相较于Vim本身混乱的插件结构，使用Vundle来管理插件就显得非常得方便、简洁。用户只需要在Github上找到自己想要的插件的名字，并将其添加到.vimrc文件中，之后的安装，更新和卸载等操作都可以由vundle来完成了。</p>
<a id="more"></a>
<ol>
<li>下载Vundle <figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/VundleVim/Vundle.<span class="keyword">vim</span>.git ~/.<span class="keyword">vim</span>/bundle/Vundle.<span class="keyword">vim</span></span><br></pre></td></tr></table></figure></li>
<li>编辑 .vimrc 文件<br> 将以下代码添加至你的.vimrc文件中。同时，你也可以根据需求来添加其他你想要安装的vim插件。 <figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> nocompatible              <span class="comment">" be iMproved, required</span></span><br><span class="line"><span class="keyword">filetype</span> off                  <span class="comment">" required</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" set the runtime path to include Vundle and initialize</span></span><br><span class="line"><span class="keyword">set</span> rtp+=~/.<span class="keyword">vim</span>/bundle/Vundle.<span class="keyword">vim</span></span><br><span class="line"><span class="keyword">call</span> vundle#begin()</span><br><span class="line"><span class="comment">" alternatively, pass a path where Vundle should install plugins</span></span><br><span class="line"><span class="comment">"call vundle#begin('~/some/path/here')</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" let Vundle manage Vundle, required</span></span><br><span class="line">Plugin <span class="string">'VundleVim/Vundle.vim'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" The following are examples of different formats supported.</span></span><br><span class="line"><span class="comment">" Keep Plugin commands between vundle#begin/end.</span></span><br><span class="line"><span class="comment">" plugin on GitHub repo</span></span><br><span class="line">Plugin <span class="string">'Valloric/YouCompleteMe'</span></span><br><span class="line"><span class="comment">" plugin from http://vim-scripts.org/vim/scripts.html</span></span><br><span class="line"><span class="comment">" Plugin 'L9'</span></span><br><span class="line"><span class="comment">" Git plugin not hosted on GitHub</span></span><br><span class="line"><span class="comment">"Plugin 'git://git.wincent.com/command-t.git'</span></span><br><span class="line"><span class="comment">" git repos on your local machine (i.e. when working on your own plugin)</span></span><br><span class="line"><span class="comment">"Plugin 'file:///home/gmarik/path/to/plugin'</span></span><br><span class="line"><span class="comment">" The sparkup vim script is in a subdirectory of this repo called vim.</span></span><br><span class="line"><span class="comment">" Pass the path to set the runtimepath properly.</span></span><br><span class="line"><span class="comment">"Plugin 'rstacruz/sparkup', &#123;'rtp': 'vim/'&#125;</span></span><br><span class="line"><span class="comment">" Install L9 and avoid a Naming conflict if you've already installed a</span></span><br><span class="line"><span class="comment">" different version somewhere else.</span></span><br><span class="line"><span class="comment">" Plugin 'ascenator/L9', &#123;'name': 'newL9'&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" All of your Plugins must be added before the following line</span></span><br><span class="line"><span class="keyword">call</span> vundle#end()            <span class="comment">" required</span></span><br><span class="line"><span class="keyword">filetype</span> plugin <span class="built_in">indent</span> <span class="keyword">on</span>    <span class="comment">" required</span></span><br><span class="line"><span class="comment">" To ignore plugin indent changes, instead use:</span></span><br><span class="line"><span class="comment">"filetype plugin on</span></span><br><span class="line"><span class="comment">"</span></span><br><span class="line"><span class="comment">" Brief help</span></span><br><span class="line"><span class="comment">" :PluginList       - lists configured plugins</span></span><br><span class="line"><span class="comment">" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate</span></span><br><span class="line"><span class="comment">" :PluginSearch foo - searches for foo; append `!` to refresh local cache</span></span><br><span class="line"><span class="comment">" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal</span></span><br><span class="line"><span class="comment">"</span></span><br><span class="line"><span class="comment">" see :h vundle for more details or wiki for FAQ</span></span><br><span class="line"><span class="comment">" Put your non-Plugin stuff after this line</span></span><br></pre></td></tr></table></figure></li>
<li>安装插件<br> 打开Vim并运行<code>:PluginInstall</code>指令。<br> 这一步骤可能所需要的时间较长，需要耐心地等待它安装完成。</li>
</ol>
<h2 id="安装编译YCM所需要的软件"><a href="#安装编译YCM所需要的软件" class="headerlink" title="安装编译YCM所需要的软件"></a>安装编译YCM所需要的软件</h2><ol>
<li><p>安装开发工具与CMake:</p>
<pre><code><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">yum <span class="keyword">install </span><span class="keyword">build-essential </span>cmake</span><br></pre></td></tr></table></figure></code></pre></li>
<li><p>并确保python头文件包已经正确安装:</p>
<pre><code><figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">yum install <span class="keyword">python</span>-devel rh-python36-<span class="keyword">python</span>-devel.x86_64</span><br></pre></td></tr></table></figure></code></pre><p><img data-src="/zh-CN/d2b4abf1/YCM1.PNG" alt="image1"></p>
<pre><code>如果你的CentOS上还未安装Python3，那么运行以下命令完成Python3.6的安装:       
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">sudo yum <span class="keyword">install </span>centos-release-<span class="keyword">scl</span></span><br><span class="line"><span class="keyword">sudo </span>yum <span class="keyword">install </span>rh-python36</span><br></pre></td></tr></table></figure>

需要的话，可以将Python3.6作为默认的Python来运行：    
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">scl <span class="builtin-name">enable</span> rh-python36 bash</span><br></pre></td></tr></table></figure></code></pre></li>
</ol>
<h2 id="编译YCM"><a href="#编译YCM" class="headerlink" title="编译YCM"></a>编译YCM</h2><ul>
<li><p>完成包含对C语言家族语义支持的YCM编译</p>
  <figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> ~<span class="string">/.vim/bundle/YouCompleteMe</span></span><br><span class="line"><span class="string">./install.py</span> <span class="params">--clang-completer</span></span><br></pre></td></tr></table></figure></li>
<li><p>不包含语义支持则直接运行install.py</p>
  <figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> ~<span class="string">/.vim/bundle/YouCompleteMe</span></span><br><span class="line"><span class="string">./install.py</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果需要简单的开启对所有语言的支持，则可以用–all标识。</p>
  <figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> ~<span class="string">/.vim/bundle/YouCompleteMe</span></span><br><span class="line"><span class="string">./install.py</span> <span class="params">--all</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul>
<li><a href="https://github.com/Valloric/YouCompleteMe#full-installation-guide" target="_blank" rel="noopener">https://github.com/Valloric/YouCompleteMe#full-installation-guide</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Vim</category>
      </categories>
      <tags>
        <tag>Vim</tag>
        <tag>Vundle</tag>
        <tag>CentOS</tag>
        <tag>YCM</tag>
      </tags>
  </entry>
  <entry>
    <title>YouCompleteMe Installation</title>
    <url>/en/126f49de/</url>
    <content><![CDATA[<p>Acutally, there’re pretty detailed instructions for installation on YCM(YouCompleteMe)’s github page. However, the installation steps on CentOS and Debian cannot be found. </p>
<h1 id="Complete-YCM-Installation-on-CentOS"><a href="#Complete-YCM-Installation-on-CentOS" class="headerlink" title="Complete YCM Installation on CentOS"></a>Complete YCM Installation on CentOS</h1><h2 id="Install-YCM-with-Vundle"><a href="#Install-YCM-with-Vundle" class="headerlink" title="Install YCM with Vundle"></a>Install YCM with <a href="https://github.com/VundleVim/Vundle.vim" target="_blank" rel="noopener">Vundle</a></h2><p>Vundle is a Plugin Manager for Vim. It provides an easy way to install, update and configure Vim Plugins.     </p>
<a id="more"></a>
<ol>
<li>Download Vundle <figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/VundleVim/Vundle.<span class="keyword">vim</span>.git ~/.<span class="keyword">vim</span>/bundle/Vundle.<span class="keyword">vim</span></span><br></pre></td></tr></table></figure></li>
<li>Edit .vimrc<br> Put the following scripts in your .vimrc. You can also add other Plugins. <figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">       <span class="keyword">set</span> nocompatible              <span class="comment">" be iMproved, required</span></span><br><span class="line"><span class="keyword">filetype</span> off                  <span class="comment">" required</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" set the runtime path to include Vundle and initialize</span></span><br><span class="line"><span class="keyword">set</span> rtp+=~/.<span class="keyword">vim</span>/bundle/Vundle.<span class="keyword">vim</span></span><br><span class="line"><span class="keyword">call</span> vundle#begin()</span><br><span class="line"><span class="comment">" alternatively, pass a path where Vundle should install plugins</span></span><br><span class="line"><span class="comment">"call vundle#begin('~/some/path/here')</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" let Vundle manage Vundle, required</span></span><br><span class="line">Plugin <span class="string">'VundleVim/Vundle.vim'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" The following are examples of different formats supported.</span></span><br><span class="line"><span class="comment">" Keep Plugin commands between vundle#begin/end.</span></span><br><span class="line"><span class="comment">" plugin on GitHub repo</span></span><br><span class="line">Plugin <span class="string">'Valloric/YouCompleteMe'</span></span><br><span class="line"><span class="comment">" plugin from http://vim-scripts.org/vim/scripts.html</span></span><br><span class="line"><span class="comment">" Plugin 'L9'</span></span><br><span class="line"><span class="comment">" Git plugin not hosted on GitHub</span></span><br><span class="line"><span class="comment">"Plugin 'git://git.wincent.com/command-t.git'</span></span><br><span class="line"><span class="comment">" git repos on your local machine (i.e. when working on your own plugin)</span></span><br><span class="line"><span class="comment">"Plugin 'file:///home/gmarik/path/to/plugin'</span></span><br><span class="line"><span class="comment">" The sparkup vim script is in a subdirectory of this repo called vim.</span></span><br><span class="line"><span class="comment">" Pass the path to set the runtimepath properly.</span></span><br><span class="line"><span class="comment">"Plugin 'rstacruz/sparkup', &#123;'rtp': 'vim/'&#125;</span></span><br><span class="line"><span class="comment">" Install L9 and avoid a Naming conflict if you've already installed a</span></span><br><span class="line"><span class="comment">" different version somewhere else.</span></span><br><span class="line"><span class="comment">" Plugin 'ascenator/L9', &#123;'name': 'newL9'&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" All of your Plugins must be added before the following line</span></span><br><span class="line"><span class="keyword">call</span> vundle#end()            <span class="comment">" required</span></span><br><span class="line"><span class="keyword">filetype</span> plugin <span class="built_in">indent</span> <span class="keyword">on</span>    <span class="comment">" required</span></span><br><span class="line"><span class="comment">" To ignore plugin indent changes, instead use:</span></span><br><span class="line"><span class="comment">"filetype plugin on</span></span><br><span class="line"><span class="comment">"</span></span><br><span class="line"><span class="comment">" Brief help</span></span><br><span class="line"><span class="comment">" :PluginList       - lists configured plugins</span></span><br><span class="line"><span class="comment">" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate</span></span><br><span class="line"><span class="comment">" :PluginSearch foo - searches for foo; append `!` to refresh local cache</span></span><br><span class="line"><span class="comment">" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal</span></span><br><span class="line"><span class="comment">"</span></span><br><span class="line"><span class="comment">" see :h vundle for more details or wiki for FAQ</span></span><br><span class="line"><span class="comment">" Put your non-Plugin stuff after this line</span></span><br></pre></td></tr></table></figure></li>
<li>Plugin Install<br> Launch vim and run <code>:PluginInstall</code><br> Please be patient. It could take a while to complete the installation. </li>
</ol>
<h2 id="Install-Dependencies-for-Compiling"><a href="#Install-Dependencies-for-Compiling" class="headerlink" title="Install Dependencies for Compiling"></a>Install Dependencies for Compiling</h2><ol>
<li><p>Install development tools and CMake:</p>
 <figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">yum <span class="keyword">install </span><span class="keyword">build-essential </span>cmake</span><br></pre></td></tr></table></figure></li>
<li><p>Make sure you have Python headers installed:</p>
<pre><code><figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">yum install <span class="keyword">python</span>-devel rh-python36-<span class="keyword">python</span>-devel.x86_64</span><br></pre></td></tr></table></figure></code></pre><p><img data-src="/en/126f49de/YCM1.PNG" alt="image1"><br> In case python3 is not installed on your CentOS:<br> Enable Software Collections:</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">sudo yum <span class="keyword">install</span> centos-<span class="keyword">release</span>-scl</span><br></pre></td></tr></table></figure>
<p> Install Python3:</p>
 <figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">sudo yum <span class="keyword">install</span> rh-python36</span><br></pre></td></tr></table></figure>

<p> If you want to use python 3.6 as default</p>
 <figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">scl <span class="builtin-name">enable</span> rh-python36 bash</span><br></pre></td></tr></table></figure>


</li>
</ol>
<h2 id="Compile-YCM"><a href="#Compile-YCM" class="headerlink" title="Compile YCM"></a>Compile YCM</h2><ul>
<li>Compiling YCM with semantic support for C-family languages:<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> ~<span class="string">/.vim/bundle/YouCompleteMe</span></span><br><span class="line"><span class="string">./install.py</span> <span class="params">--clang-completer</span></span><br></pre></td></tr></table></figure></li>
<li>Compiling YCM without semantic support for C-family languages:<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> ~<span class="string">/.vim/bundle/YouCompleteMe</span></span><br><span class="line"><span class="string">./install.py</span></span><br></pre></td></tr></table></figure></li>
<li>To simply compile with everything enabled, there’s a –all flag.    <figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> ~<span class="string">/.vim/bundle/YouCompleteMe</span></span><br><span class="line"><span class="string">./install.py</span> <span class="params">--all</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
<h1 id="Referrence"><a href="#Referrence" class="headerlink" title="Referrence"></a>Referrence</h1><ul>
<li><a href="https://github.com/Valloric/YouCompleteMe#full-installation-guide" target="_blank" rel="noopener">https://github.com/Valloric/YouCompleteMe#full-installation-guide</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Vim</category>
      </categories>
      <tags>
        <tag>Vim</tag>
        <tag>Vundle</tag>
        <tag>CentOS</tag>
        <tag>YCM</tag>
      </tags>
  </entry>
</search>
