<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo版本升级指南</title>
    <url>/zh-CN/Hexo-Update/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>进来想起来自己还有这么一个博客。那么第一件事当然是对版本进行升级咯！可升级的过程远远没有想象中的那般顺利，因此在此记录一下，其他人如果遇到类似的问题，也可以有一个借鉴。<br>升级前，先检查当前hexo的版本号：<code>hexo --version</code>。版本信息如下图所示：<br><img src="/zh-CN/Hexo-Update/hexo_check_version.png" alt="Hexo版本信息"> </p>
<h1 id="升级步骤"><a href="#升级步骤" class="headerlink" title="升级步骤"></a>升级步骤</h1><p> 在Hexo的文档中搜索一番，结果！！完全没有提及版本升级的方法。。。行吧，只能借助万能的Google，经过比较，终于找到了一个简单粗暴的方法：<br>首先进入Hexo的主目录，然后直接执行</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> update</span><br></pre></td></tr></table></figure>

<p>等等等…没动静呐！看来有必要重新配置一下NPM…</p>
<a id="more"></a>

<h2 id="更换NPM镜像服务器地址，解决国内NPM安装依赖速度慢的问题"><a href="#更换NPM镜像服务器地址，解决国内NPM安装依赖速度慢的问题" class="headerlink" title="更换NPM镜像服务器地址，解决国内NPM安装依赖速度慢的问题"></a>更换NPM镜像服务器地址，解决国内NPM安装依赖速度慢的问题</h2><p>在npm的命令最后使用<code>--registry</code>参数指定国内镜像服务器地址，就可以让NPM的安装速度获得显著的提升。<br>这里我们使用阿里巴巴的镜像：</p>
<figure class="highlight tcl"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">update</span> --<span class="keyword">registry</span>=<span class="keyword">http</span>://<span class="keyword">registry</span>.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p>当然，也可以通过如下的命令对NPM进行永久配置：</p>
<figure class="highlight tcl"><table><tr><td class="code"><pre><span class="line">npm config <span class="keyword">set</span> <span class="keyword">registry</span> <span class="keyword">http</span>://<span class="keyword">registry</span>.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p>这样子，我们的NPM命令就可以快速地执行了！</p>
<h2 id="使用NPM进行Hexo版本升级"><a href="#使用NPM进行Hexo版本升级" class="headerlink" title="使用NPM进行Hexo版本升级"></a>使用NPM进行Hexo版本升级</h2><p>这就完了？？？是的！再执行一遍<code>hexo --version</code>,看一下是不是已经到了最新的版本：<br><img src="/zh-CN/Hexo-Update/hexo_check_version_2.png" alt="Hexo版本信息2"></p>
<p>Hmmmmm…版本信息确实产生了变化，从3.7.1升级到了3.9.0。但是，这貌似也不是<a href="http://www.npmjs.com/package/hexo?activeTab=versions" target="_blank" rel="noopener">最新的版本</a>呀！！  </p>
<p>难道是Node.js的版本问题？<a href="https://hexo.io/docs/#installation" target="_blank" rel="noopener">Hexo官方文档</a>中有Node.js的版本要求，Hexo 4.1+ 需要至少8.10版本。</p>
<p><img src="/zh-CN/Hexo-Update/hexo_nodejs_requirement.png" alt="NodeJS版本要求"></p>
<p>我重新看了一下之前<code>hexo --version</code>的输出结果：<code>node: 13.5.0</code>..<br>这个显然是满足的呀！所以完全不会是Node.js的版本问题造成无法更新到最新版本。</p>
<h2 id="Package-json-修改版本信息"><a href="#Package-json-修改版本信息" class="headerlink" title="Package.json 修改版本信息"></a>Package.json 修改版本信息</h2><p>那么，究竟是哪里出了问题呢？<br>仔细思考：NPM是如何管理本地安装的呢？ <strong>package.json</strong>!! 赶紧查看Hexo目录下的<code>package.json</code>文件。果然！我清清楚楚地看到了<code>&quot;hexo&quot; : &quot;^3.9.0&quot;</code>的字样。问题是找到了，但是这一整列的插件，我们如果一个个去查最新的版本，肯定是要费不少功夫，那么有没有更快速的方法呢？<br>我们可以用下列命令来自动化完成这项工作：</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> install -g <span class="built_in">npm</span>-check</span><br><span class="line"><span class="built_in">npm</span> install -g <span class="built_in">npm</span>-upgrade</span><br><span class="line"><span class="built_in">npm</span>-check</span><br><span class="line"><span class="built_in">npm</span>-upgrade</span><br></pre></td></tr></table></figure>

<p>执行结果如下图：<br><img src="/zh-CN/Hexo-Update/npm_upgrade.png" alt="npm-upgrade执行结果"></p>
<p>至此，我们完成了<code>package.json</code>中，版本信息的更新。</p>
<h2 id="完成Hexo版本升级"><a href="#完成Hexo版本升级" class="headerlink" title="完成Hexo版本升级"></a>完成Hexo版本升级</h2><p>我们再次执行<code>npm update</code>。<br>完成以后，我们再次通过<code>hexo version</code>确认版本号。成功，我们终于顺利将Hexo升级到了最新的版本。<br><img src="/zh-CN/Hexo-Update/hexo_check_version_3.png" alt="Hexo版本信息3"></p>
<hr>
<h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><ul>
<li><a href="https://jianshu.com/p/5adcee63c3b8" target="_blank" rel="noopener">https://jianshu.com/p/5adcee63c3b8</a></li>
<li><a href="https://hexo.io/docs/" target="_blank" rel="noopener">https://hexo.io/docs/</a></li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Configuration</tag>
        <tag>NPM</tag>
      </tags>
  </entry>
  <entry>
    <title>Installing-Docker-in-Kali</title>
    <url>/undefined/Installing-Docker-in-Kali/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>MySQL Binlog 调查取证</title>
    <url>/zh-CN/MySQL-Binlog-Forensics/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>最近，公司有一个客户的MySQL数据库被篡改了数据，因此需要对该客户被攻击的服务器进行调查。其中涉及到对MySQL的Binlog日志分析。在任务完成后，将其中相关的步骤进行总结。</p>
<h1 id="Binlog"><a href="#Binlog" class="headerlink" title="Binlog"></a>Binlog</h1><h2 id="定位-Binlog-位置"><a href="#定位-Binlog-位置" class="headerlink" title="定位 Binlog 位置"></a>定位 Binlog 位置</h2><p>找到MySQL安装目录中bin目录的位置，同时确认binlog的储存位置。其相应的配置在my.cnf的log_bin=””中。<br>如果能够使用mySQL命令行连接，也可以使用 <code>showvariables like &#39;%log_bin%&#39;</code>命令查看binlog的相关配置。</p>
<a id="more"></a>

<h2 id="Binlog-结构"><a href="#Binlog-结构" class="headerlink" title="Binlog 结构"></a>Binlog 结构</h2><p>在binlog所在的数据目录(默认为data目录)，可以看到mysql-bin.index 及 mysql-bin.0000xx 文件。其中.index文件为索引文件，记录数据文件列表。每当数据库重启或者当前一个文件写满后会生成新文件，同时使用命令<code>flush logs</code>也可以重新生成新的binlog日志文件。<code>reset master</code>命令可以用于清空binlog日志文件。</p>
<h2 id="Binlog-格式"><a href="#Binlog-格式" class="headerlink" title="Binlog 格式"></a>Binlog 格式</h2><p>Binlog的格式有三个选项：<br>    - Row<br>    - Statement<br>    - Mixed<br>简单介绍这三种格式，分别为：<br>    - Row: 默认格式，记录导致表的行发生变化的事件<br>    - Statement: 记录被执行的原始SQL查询语句<br>    - Mixed: 默认使用Statement格式，再特定情况下使用Row格式<br>Binlog格式可以在my.cnf的binlog-format=中进行配置。在MySQL命令行中可以通过<code>SHOW VARIABLES LIKE &#39;binlog_format&#39;;</code>查看。</p>
<h2 id="Binlog-内容"><a href="#Binlog-内容" class="headerlink" title="Binlog 内容"></a>Binlog 内容</h2><p>由于binlog是以二进制格式储存的，所以无法直接查看。MySQL自带的mysqlbinlog工具可以用来查看binlog。<code>[MySQL directory]\bin\mysqlbinlog mysql-bin.000008</code>即可获取binlog中的内容。当然也可以添加参数(–start-porition, –stop-position, –start-time, –stop-time)来筛选日志。在很多事件调查中，其实都可以将目标时间确定在一个范围之内，因此使用参数进行筛选会给我们带来极大的便利。<br>对于Row格式的Binlog，还可以使用-v参数将日志记录转译为”伪-SQL语句”。</p>
<hr>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://cloud.tencent.com/developer/article/1032755" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1032755</a><br><a href="https://maxchadwick.xyz/blog/working-with-mysql-binary-logs" target="_blank" rel="noopener">https://maxchadwick.xyz/blog/working-with-mysql-binary-logs</a></p>
]]></content>
      <categories>
        <category>Security</category>
        <category>Forensics</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>Binlog</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim 配置</title>
    <url>/zh-CN/Vim-Config/</url>
    <content><![CDATA[<h1 id="Vim插件管理器：Vundle安装"><a href="#Vim插件管理器：Vundle安装" class="headerlink" title="Vim插件管理器：Vundle安装"></a>Vim插件管理器：Vundle安装</h1><ol>
<li>下载Vundle<br><code>git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim</code></li>
</ol>
<a id="more"></a>

<h1 id="修改Vim配置文件-vimrc"><a href="#修改Vim配置文件-vimrc" class="headerlink" title="修改Vim配置文件 ~/.vimrc"></a>修改Vim配置文件 ~/.vimrc</h1><p>将下面的配置添加到<code>~/.vimrc</code>中。可以根据自己的需要添加或者移除Plugin。</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> nocompatible              <span class="comment">" be iMproved, required</span></span><br><span class="line"><span class="keyword">filetype</span> off                  <span class="comment">" required</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" set the runtime path to include Vundle and initialize</span></span><br><span class="line"><span class="keyword">set</span> rtp+=~/.<span class="keyword">vim</span>/bundle/Vundle.<span class="keyword">vim</span></span><br><span class="line"><span class="keyword">call</span> vundle#begin()</span><br><span class="line"><span class="comment">" alternatively, pass a path where Vundle should install plugins</span></span><br><span class="line"><span class="comment">"call vundle#begin('~/some/path/here')</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" let Vundle manage Vundle, required</span></span><br><span class="line">Plugin <span class="string">'VundleVim/Vundle.vim'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" The following are examples of different formats supported.</span></span><br><span class="line"><span class="comment">" Keep Plugin commands between vundle#begin/end.</span></span><br><span class="line"><span class="comment">" plugin on GitHub repo</span></span><br><span class="line">Plugin <span class="string">'tpope/vim-fugitive'</span></span><br><span class="line">Plugin <span class="string">'Valloric/YouCompleteMe'</span></span><br><span class="line">Plugin <span class="string">'plasticboy/vim-markdown'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">" plugin from http://vim-scripts.org/vim/scripts.html</span></span><br><span class="line"><span class="comment">" Plugin 'L9'</span></span><br><span class="line"><span class="comment">" Git plugin not hosted on GitHub</span></span><br><span class="line"><span class="comment">" git repos on your local machine (i.e. when working on your own plugin)</span></span><br><span class="line"><span class="comment">"Plugin 'file:///home/gmarik/path/to/plugin'</span></span><br><span class="line"><span class="comment">" The sparkup vim script is in a subdirectory of this repo called vim.</span></span><br><span class="line"><span class="comment">" Pass the path to set the runtimepath properly.</span></span><br><span class="line">Plugin <span class="string">'rstacruz/sparkup'</span>, &#123;<span class="string">'rtp'</span>: <span class="string">'vim/'</span>&#125;</span><br><span class="line"><span class="comment">" Install L9 and avoid a Naming conflict if you've already installed a</span></span><br><span class="line"><span class="comment">" different version somewhere else.</span></span><br><span class="line"><span class="comment">" Plugin 'ascenator/L9', &#123;'name': 'newL9'&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" Color schemes</span></span><br><span class="line">Plugin <span class="string">'tomasr/molokai'</span></span><br><span class="line">Plugin <span class="string">'altercation/vim-colors-solarized'</span></span><br><span class="line">Plugin <span class="string">'flazz/vim-colorschemes'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">" All of your Plugins must be added before the following line</span></span><br><span class="line"><span class="keyword">call</span> vundle#end()            <span class="comment">" required</span></span><br><span class="line"><span class="keyword">filetype</span> plugin <span class="built_in">indent</span> <span class="keyword">on</span>    <span class="comment">" required</span></span><br><span class="line"><span class="comment">" To ignore plugin indent changes, instead use:</span></span><br><span class="line"><span class="comment">"filetype plugin on</span></span><br><span class="line"><span class="comment">"</span></span><br><span class="line"><span class="comment">" Brief help</span></span><br><span class="line"><span class="comment">" :PluginList       - lists configured plugins</span></span><br><span class="line"><span class="comment">" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate</span></span><br><span class="line"><span class="comment">" :PluginSearch foo - searches for foo; append `!` to refresh local cache</span></span><br><span class="line"><span class="comment">" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal</span></span><br><span class="line"><span class="comment">"</span></span><br><span class="line"><span class="comment">" see :h vundle for more details or wiki for FAQ</span></span><br><span class="line"><span class="comment">" Put your non-Plugin stuff after this line</span></span><br><span class="line"><span class="comment">" </span></span><br><span class="line"><span class="comment">"</span></span><br><span class="line"><span class="comment">"</span></span><br><span class="line"><span class="keyword">syntax</span> enable</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> fdm=marker</span><br><span class="line"><span class="keyword">set</span> tabstop=<span class="number">8</span> softtabstop=<span class="number">0</span> expandtab <span class="built_in">shiftwidth</span>=<span class="number">4</span> smarttab</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">nu</span></span><br></pre></td></tr></table></figure>


<h1 id="下载插件"><a href="#下载插件" class="headerlink" title="下载插件"></a>下载插件</h1><p>通过<code>git clone</code>命令，将需要的插件下载到<code>~/.vim/bundle</code>目录下。<br><img src="/zh-CN/Vim-Config/plugin_download.png" alt></p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/VundleVim/Vundle.<span class="keyword">vim</span>.git ~/.<span class="keyword">vim</span>/bundle/Vundle.<span class="keyword">vim</span></span><br><span class="line"><span class="keyword">cd</span> ~/.<span class="keyword">vim</span>/bundle</span><br><span class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/tpope/<span class="keyword">vim</span>-fugitive</span><br><span class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/altercation/<span class="keyword">vim</span>-colors-solarized</span><br><span class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/Valloric/YouCompleteMe</span><br><span class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/rstacruz/sparkup</span><br><span class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/plasticboy/<span class="keyword">vim</span>-markdown</span><br></pre></td></tr></table></figure>

<h1 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h1><p>运行<strong>Vim</strong>,然后执行<code>:PluginInstall</code>。<br>当然也可以直接在命令行执行<code>vim +PluginInstall +qall</code></p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Vim</category>
      </categories>
      <tags>
        <tag>Configuration</tag>
        <tag>Vim</tag>
        <tag>Vundle</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim Configuration</title>
    <url>/en/Vim-Config_en/</url>
    <content><![CDATA[<h1 id="Install-Vim-Plug-in-Manager：Vundle"><a href="#Install-Vim-Plug-in-Manager：Vundle" class="headerlink" title="Install Vim Plug-in Manager：Vundle"></a>Install Vim Plug-in Manager：Vundle</h1><ol>
<li>Download Vundle<br><code>git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim</code></li>
</ol>
<a id="more"></a>


<h1 id="Configure-Vim-file-vimrc"><a href="#Configure-Vim-file-vimrc" class="headerlink" title="Configure Vim file ~/.vimrc"></a>Configure Vim file ~/.vimrc</h1><p>Add the following content to <code>~/.vimrc</code> file. It’s up to you to add/remove some plug-ins.</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> nocompatible              <span class="comment">" be iMproved, required</span></span><br><span class="line"><span class="keyword">filetype</span> off                  <span class="comment">" required</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" set the runtime path to include Vundle and initialize</span></span><br><span class="line"><span class="keyword">set</span> rtp+=~/.<span class="keyword">vim</span>/bundle/Vundle.<span class="keyword">vim</span></span><br><span class="line"><span class="keyword">call</span> vundle#begin()</span><br><span class="line"><span class="comment">" alternatively, pass a path where Vundle should install plugins</span></span><br><span class="line"><span class="comment">"call vundle#begin('~/some/path/here')</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" let Vundle manage Vundle, required</span></span><br><span class="line">Plugin <span class="string">'VundleVim/Vundle.vim'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" The following are examples of different formats supported.</span></span><br><span class="line"><span class="comment">" Keep Plugin commands between vundle#begin/end.</span></span><br><span class="line"><span class="comment">" plugin on GitHub repo</span></span><br><span class="line">Plugin <span class="string">'tpope/vim-fugitive'</span></span><br><span class="line">Plugin <span class="string">'Valloric/YouCompleteMe'</span></span><br><span class="line">Plugin <span class="string">'plasticboy/vim-markdown'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">" plugin from http://vim-scripts.org/vim/scripts.html</span></span><br><span class="line"><span class="comment">" Plugin 'L9'</span></span><br><span class="line"><span class="comment">" Git plugin not hosted on GitHub</span></span><br><span class="line"><span class="comment">" git repos on your local machine (i.e. when working on your own plugin)</span></span><br><span class="line"><span class="comment">"Plugin 'file:///home/gmarik/path/to/plugin'</span></span><br><span class="line"><span class="comment">" The sparkup vim script is in a subdirectory of this repo called vim.</span></span><br><span class="line"><span class="comment">" Pass the path to set the runtimepath properly.</span></span><br><span class="line">Plugin <span class="string">'rstacruz/sparkup'</span>, &#123;<span class="string">'rtp'</span>: <span class="string">'vim/'</span>&#125;</span><br><span class="line"><span class="comment">" Install L9 and avoid a Naming conflict if you've already installed a</span></span><br><span class="line"><span class="comment">" different version somewhere else.</span></span><br><span class="line"><span class="comment">" Plugin 'ascenator/L9', &#123;'name': 'newL9'&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" Color schemes</span></span><br><span class="line">Plugin <span class="string">'tomasr/molokai'</span></span><br><span class="line">Plugin <span class="string">'altercation/vim-colors-solarized'</span></span><br><span class="line">Plugin <span class="string">'flazz/vim-colorschemes'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">" All of your Plugins must be added before the following line</span></span><br><span class="line"><span class="keyword">call</span> vundle#end()            <span class="comment">" required</span></span><br><span class="line"><span class="keyword">filetype</span> plugin <span class="built_in">indent</span> <span class="keyword">on</span>    <span class="comment">" required</span></span><br><span class="line"><span class="comment">" To ignore plugin indent changes, instead use:</span></span><br><span class="line"><span class="comment">"filetype plugin on</span></span><br><span class="line"><span class="comment">"</span></span><br><span class="line"><span class="comment">" Brief help</span></span><br><span class="line"><span class="comment">" :PluginList       - lists configured plugins</span></span><br><span class="line"><span class="comment">" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate</span></span><br><span class="line"><span class="comment">" :PluginSearch foo - searches for foo; append `!` to refresh local cache</span></span><br><span class="line"><span class="comment">" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal</span></span><br><span class="line"><span class="comment">"</span></span><br><span class="line"><span class="comment">" see :h vundle for more details or wiki for FAQ</span></span><br><span class="line"><span class="comment">" Put your non-Plugin stuff after this line</span></span><br><span class="line"><span class="comment">" </span></span><br><span class="line"><span class="comment">"</span></span><br><span class="line"><span class="comment">"</span></span><br><span class="line"><span class="keyword">syntax</span> enable</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> fdm=marker</span><br><span class="line"><span class="keyword">set</span> tabstop=<span class="number">8</span> softtabstop=<span class="number">0</span> expandtab <span class="built_in">shiftwidth</span>=<span class="number">4</span> smarttab</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">nu</span></span><br></pre></td></tr></table></figure>


<h1 id="Download-Plug-ins"><a href="#Download-Plug-ins" class="headerlink" title="Download Plug-ins"></a>Download Plug-ins</h1><p>Run <code>git clone</code> for each plug-ins, Download them to<code>~/.vim/bundle</code>。<br><img src="/en/Vim-Config_en/plugin_download.png" alt></p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/VundleVim/Vundle.<span class="keyword">vim</span>.git ~/.<span class="keyword">vim</span>/bundle/Vundle.<span class="keyword">vim</span></span><br><span class="line"><span class="keyword">cd</span> ~/.<span class="keyword">vim</span>/bundle</span><br><span class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/tpope/<span class="keyword">vim</span>-fugitive</span><br><span class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/altercation/<span class="keyword">vim</span>-colors-solarized</span><br><span class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/Valloric/YouCompleteMe</span><br><span class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/rstacruz/sparkup</span><br><span class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/plasticboy/<span class="keyword">vim</span>-markdown</span><br></pre></td></tr></table></figure>

<h1 id="Install-Plug-ins"><a href="#Install-Plug-ins" class="headerlink" title="Install Plug-ins"></a>Install Plug-ins</h1><p>Run<strong>Vim</strong>, and then execute<code>:PluginInstall</code>。<br>Alternatively, you can run <code>vim +PluginInstall +qall</code> directly in shell. </p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Vim</category>
      </categories>
      <tags>
        <tag>Configuration</tag>
        <tag>Vim</tag>
        <tag>Vundle</tag>
      </tags>
  </entry>
  <entry>
    <title>利用Hexo框架搭建中英文双语网站</title>
    <url>/zh-CN/Hexo-Bilingual-Blog/</url>
    <content><![CDATA[<h1 id="2019-12更新"><a href="#2019-12更新" class="headerlink" title="2019.12更新"></a>2019.12更新</h1><p>对该方法进行了更新，文中引用的代码适用于Hexo v4.2.0, Next v7.7.0.<br>请各位根据自己的版本情况进行相应的微调。  </p>
<hr>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Hexo本身有对于博客国际化的多语言的支持。但 是简单倒腾后发现，所谓的国际化只是在显示文章时，根据文章设定的语言将导航栏，侧边栏中的链接名称改为相对应的语言。但博客本身的博文列表中，各个语言的文章仍然混杂在一起。</p>
<p>而我理想中的中英文双语站点可以通过一张图片非常形象的表示出来：<br><img src="/zh-CN/Hexo-Bilingual-Blog/bilingualize.png" alt="理想网站结构"></p>
<p>通过一段时间的搜索，我发现了两种较为可行的方法来实现这个功能。这里我挑选了一个我认为更加合理的方法来实现。</p>
<a id="more"></a>

<p>（另一种方法通过两套Hexo+NexT来实现。即构建中英文两个相互独立的Hexo站点。这样做的好处在于结构清晰，两种语言不存在互相干扰的可能。但缺点则是这样子相当于维护两套Hexo站点，每次生成都需要执行两次，致使操作相对繁杂。具体的实现方法详见：<a href="https://chenyxmr.github.io/2016/08/04/hexo-bilingual/）" target="_blank" rel="noopener">https://chenyxmr.github.io/2016/08/04/hexo-bilingual/）</a></p>
<p>好了，切入正题，接下来我将详细介绍基于hexo-generator-i18n插件的方法。</p>
<h1 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h1><h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><p> 首先，安装hexo-generator-i18n插件。相信这条命令大家已经非常熟悉了。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-generator-i18n <span class="comment">--save</span></span><br></pre></td></tr></table></figure>
<p>插件成功安装完成后，在Hexo的根目录中找到package.json文件，这个文件记录了已经安装的各个Hexo插件名称及版本号。在这个文件中将<code>hexo-generator-i18n</code>所在的这一行移动到<code>hexo-generator-</code>的最后一行。</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="string">"dependencies"</span>: &#123;</span><br><span class="line">  <span class="string">"canvas-nest.js"</span>: <span class="string">"^2.0.3"</span>,</span><br><span class="line">  <span class="string">"gitment"</span>: <span class="string">"0.0.3"</span>,</span><br><span class="line">  <span class="string">"hexo"</span>: <span class="string">"^3.7.0"</span>,</span><br><span class="line">  <span class="string">"hexo-asset-image"</span>: <span class="string">"0.0.3"</span>,</span><br><span class="line">  <span class="string">"hexo-deployer-git"</span>: <span class="string">"^0.3.1"</span>,</span><br><span class="line">  <span class="string">"hexo-generator-archive"</span>: <span class="string">"^0.1.5"</span>,</span><br><span class="line">  <span class="string">"hexo-generator-category"</span>: <span class="string">"^0.1.3"</span>,</span><br><span class="line">  <span class="string">"hexo-generator-index"</span>: <span class="string">"^0.2.1"</span>,</span><br><span class="line">  <span class="string">"hexo-generator-searchdb"</span>: <span class="string">"^1.0.8"</span>,</span><br><span class="line">  <span class="string">"hexo-generator-tag"</span>: <span class="string">"^0.2.0"</span>,             </span><br><span class="line">  <span class="string">"hexo-generator-i18n"</span>: <span class="string">"0.0.7"</span>,</span><br><span class="line">  <span class="string">"hexo-neat"</span>: <span class="string">"^1.0.4"</span>,</span><br><span class="line">  <span class="string">"hexo-renderer-ejs"</span>: <span class="string">"^0.3.1"</span>,</span><br><span class="line">  <span class="string">"hexo-renderer-marked"</span>: <span class="string">"^0.3.2"</span>,</span><br><span class="line">  <span class="string">"hexo-renderer-stylus"</span>: <span class="string">"^0.3.3"</span>,</span><br></pre></td></tr></table></figure>
<p><em>（根据观察，每次重新安装完插件的时候该文件会自动根据首字母重新排序,要记得修改顺序。）</em></p>
<h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><p>首先修改Hexo根目录中的配置文件_config.yml的语言选项：</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="meta">#language: </span></span><br><span class="line"><span class="meta">#- zh-CN</span></span><br><span class="line"><span class="meta">#- en</span></span><br><span class="line"><span class="symbol">language:</span> [zh-CN,en]</span><br><span class="line"><span class="symbol">i18n:</span></span><br><span class="line"><span class="symbol">  type:</span> [page, post]</span><br><span class="line"><span class="symbol">  generator:</span> [index, archive, category, tag]</span><br></pre></td></tr></table></figure>

<p>完成后保存并退出。尝试运行命令 <code>hexo clean &amp;&amp; hexo g</code> 重新生成public文件夹。<br>此时，public目录下应该会包含了一个新的目录/en。 这个目录就是英文站相关文件所在的路径。每次执行<code>hexo g</code>命令时，所有的博文会在这两个文件目录中各生成一份。此时，如果我们访问网站时，已经可以通过访问 <a href="http://www.yourwebsite.com/en" target="_blank" rel="noopener">www.yourwebsite.com/en</a> 来进入英文站点。但是，显而易见，在当前条件下，无论文章是以何种语言呈现，所有的文章都会在中英文网站中各出现一次。这显然也不是我们所希望得到的效果。因此，我们还需要找一个方法，让Hexo在生成页面时，根据文章的语言将其呈现在对应的页面中。</p>
<p><strong>注意</strong>: 对于NexT v6.0.0以后的版本，务必在主题配置文件中修改配置：  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>否则，在语言切换的过程中，菜单栏以及页脚的语言会出现问题。</p>
<h2 id="添加生成条件"><a href="#添加生成条件" class="headerlink" title="添加生成条件"></a>添加生成条件</h2><p>首先，在博文(post)的标题处加上lang:标识。简体中文博客标记为lang: zh-CN，英文版则是lang: en。</p>
<p>在 themes/next/layout/index.swig文件中，为 </p>
<figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">&#123;&#123; partial(<span class="name">'_macro/post.swig'</span>, &#123;post: post, is_index: <span class="literal">true</span>&#125;) &#125;&#125;</span><br></pre></td></tr></table></figure>

<p> 添加判断条件。   (题外话：此处使用行内代码写包含<code>{</code> <code>%</code> <code>%</code> <code>}</code>这样的语句，会使渲染器尝试解析该断代码，并导致<code>Template render error:</code>这样的错误。我找到的<a href="https://hoxis.github.io/hexo-unexpected-token.html" target="_blank" rel="noopener">相关解决方法</a>)<br>具体代码如下(<em>记得删除注释</em>)：</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> content %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"posts-expand"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;%- <span class="name"><span class="name">for</span></span> post <span class="keyword">in</span> page.posts.toArray() %&#125;</span></span><br><span class="line"><span class="xml">      </span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> page.lang === post.lang %&#125;</span></span><br><span class="line"><span class="xml">        </span><span class="template-variable">&#123;&#123; partial('_macro/post.swig', &#123;post: post, is_index: true&#125;) &#125;&#125;</span></span><br><span class="line"><span class="xml">      </span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;%- <span class="name"><span class="name">endfor</span></span> %&#125;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">  </span><span class="template-tag">&#123;% <span class="name"><span class="name">include</span></span> '_partials/pagination.swig' %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span></span><br></pre></td></tr></table></figure>

<p>再加入该语句之后，只有当页面的语言与文章的语言完全一致时，这篇文章才会被生成。此时再打开首页观察一下，所有的文章都已经根据语言分类到对应的页面中了。</p>
<p>同理，如果站点启用了其他导航页面，你希望在这些页面中，显示的文章同样也根据当前页面的语言来显示的话。那就对其相对应的生成页面做相同的改动就可以了。如，我希望更改归档页面，那就找到themes/next/layout/archive.swig, 并为</p>
<figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">&#123;&#123; partial(<span class="name">'_macro/post.swig'</span>, &#123;post: post, is_index: <span class="literal">true</span>&#125;) &#125;&#125;</span><br></pre></td></tr></table></figure>
<p>添加判断条件。</p>
<p>但是，这也还没有结束。虽然我们已经有两个基本符合我们想象的中英文页面，但他们却还互不相通。因此，我们还需要在导航栏中创建一个链接来实现中英文页面之间的跳转。</p>
<h2 id="在目录栏中添加切换语言项"><a href="#在目录栏中添加切换语言项" class="headerlink" title="在目录栏中添加切换语言项"></a>在目录栏中添加切换语言项</h2><p>首先，找到/themes/next/_config.yml文件，在<code>Menu:</code>下添加<code>switch_lang:</code>关键词：</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">menu:</span></span><br><span class="line"><span class="symbol">  home:</span> / || home</span><br><span class="line">  <span class="meta">#about: /about/ || user</span></span><br><span class="line">  <span class="meta">#tags: /tags/ || tags</span></span><br><span class="line"><span class="symbol">  categories:</span> <span class="meta-keyword">/categories/</span> || th</span><br><span class="line"><span class="symbol">  archives:</span> <span class="meta-keyword">/archives/</span> || archive</span><br><span class="line">  <span class="meta">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="meta">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="meta">#commonweal: /404/ || heartbeat</span></span><br><span class="line"><span class="symbol">  switch_lang:</span> /en || language</span><br></pre></td></tr></table></figure>

<p>其中，<code>||</code>之后的值为该链接所使用的FontAwesome Icon的标签名，有需要的话可以自行修改。不过话说回来，我觉得主题默认的图标都还是不错的，没什么必要修改。如果<code>||</code>之后没有填写，则会显示问号图标。</p>
<p>然后，再为NexT的语言支持文件添加对应的翻译。这里的例子中需要修改的是/themes/next/languages/下的zh-CN.yml和en.yml文件。在两个文件中分别添加<code>switch_lang:</code>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">首页</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">归档</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">分类</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">标签</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">关于</span></span><br><span class="line">  <span class="attr">search:</span> <span class="string">搜索</span></span><br><span class="line">  <span class="attr">schedule:</span> <span class="string">日程表</span></span><br><span class="line">  <span class="attr">sitemap:</span> <span class="string">站点地图</span></span><br><span class="line">  <span class="attr">commonweal:</span> <span class="string">公益</span> <span class="number">404</span></span><br><span class="line">  <span class="attr">switch_lang:</span> <span class="string">--&gt;English</span></span><br></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">Home</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">Archives</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">Categories</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">Tags</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">About</span></span><br><span class="line">  <span class="attr">search:</span> <span class="string">Search</span></span><br><span class="line">  <span class="attr">schedule:</span> <span class="string">Schedule</span></span><br><span class="line">  <span class="attr">sitemap:</span> <span class="string">Sitemap</span></span><br><span class="line">  <span class="attr">commonweal:</span> <span class="string">Commonweal</span> <span class="number">404</span></span><br><span class="line">  <span class="attr">switch_lang:</span> <span class="string">--&gt;简体中文</span></span><br></pre></td></tr></table></figure>

<p>细心的话可能已经会发现，之前在Next主题的_config.yml文件中添加的<code>switch_lang:</code>项所对应的链接为/en。这就意味着，如果我们正在浏览英文页面，虽然目录栏中会显示<code>--&gt;简体中文</code>的语言切换栏，但是点击的话则依旧会跳转到/en页面。也就是说，目前这个跳转链接还只是单向可用的！所以我们还需要一步额外的操作，使英文页面在生成时将这个链接更改为指向我们的主页面（中文首页）。</p>
<p><del>在themes/next/layout/_custom/head.swig中<strong>添加下列js代码</strong>，使其在加载完英文页面后，将switch_lang所对应的链接地址替换。</del><br>在<code>source/_data</code>目录下新建head.swig文件，并<strong>添加下列js代码</strong>。<br>同时在主题配置文件中找到<code>custom_file_path</code>，将head所在行的注释去除。这样，我们的博客在加载完英文页面后，就可以自动将switch_lang所对应的链接地址替换。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// Wait for the page to load first</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> _prevOnload = <span class="built_in">window</span>.onload;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> switchLang = <span class="built_in">document</span>.getElementById(<span class="string">"menu"</span>).getElementsByClassName(<span class="string">"menu-item-switch_lang"</span>)[<span class="number">0</span>].childNodes[<span class="number">1</span>];</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> href = <span class="built_in">window</span>.location.href;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> indexOfEn = href.toLowerCase().indexOf(<span class="string">'/en/'</span>);</span></span><br><span class="line">            if(indexOfEn !== -1) &#123;</span><br><span class="line"><span class="actionscript">                switchLang.href = href.replace(<span class="string">'/en/'</span>, <span class="string">'/'</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                switchLang.href = href.replace(<span class="regexp">/(^http[s]?:\/\/[a-z0-9.]*[:?0-9]*\/)(.*)/i</span>, <span class="string">'$1en/$2'</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><em>这段代码还有改进的空间。如果有合适的意见请在评论中指出。</em></p>
<p>好了！终于来到最后一步了：<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code>重新生成并部署。现在应该就能看到一个相对比较理想的中英文双语博客了。</p>
<h1 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h1><p>当然，通过这种方法实现的Hexo双语网站也还远远没有完善。还有非常多待改进的地方：</p>
<ul>
<li>文章页面跳转<br>  暂时全部跳转到首页</li>
<li>分类中全部显示<br>  在分类生成时加入相应的判断语句</li>
<li>所有文章都会被分别加入两个文件夹，导致数量不对<br>  直接调用Hexo中的函数，不好改。有兴趣的话可以重写。</li>
</ul>
<hr>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://wm4n.github.io/Hexo-NexT-%E5%90%8C%E6%99%82%E6%94%AF%E6%8F%B4%E5%A4%9A%E8%AA%9E%E7%B3%BB/" target="_blank" rel="noopener">https://wm4n.github.io/Hexo-NexT-%E5%90%8C%E6%99%82%E6%94%AF%E6%8F%B4%E5%A4%9A%E8%AA%9E%E7%B3%BB/</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
        <tag>Configuration</tag>
      </tags>
  </entry>
  <entry>
    <title>Insert Images to an Hexo Post</title>
    <url>/en/Insert-Images-to-an-Hexo-Post/</url>
    <content><![CDATA[<p>First, execute the following command to install <em>hexo-asset-image</em> plugin. </p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">npm install hexo-asset-<span class="built_in">image</span> --<span class="built_in">save</span></span><br></pre></td></tr></table></figure>

<p>Next, please head to _config.yml to <strong>enable post_asset_folder</strong>.</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>From now on, for each time <code>hexo new [layout] &lt;title&gt;</code> is executed, hexo will simoutanuously create a folder having the same name as your new post’s title. If you want to insert images to your post, just  </p>
]]></content>
      <categories>
        <category>Configuration</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title>YouCompleteMe 安装教程</title>
    <url>/zh-CN/YouCompleteMe-Installation/</url>
    <content><![CDATA[<p>YouCompleteMe作为Vim中最好用（没有之一）的代码自动补全插件，却同时又是最不容易安装的插件之一。其实在YCM的Github官网，有非常详细完整的安装说明。如果在Mac OS X, Windows, Ubuntu, FreeBSD/OpenBSD或Fedora上安装YCM，且英语还Okay的话，建议直接移步<a href="https://github.com/Valloric/YouCompleteMe#installation" target="_blank" rel="noopener">官方安装说明文档</a>。但官方说明文档却没有对在CentOS与Debian中安装YCM的详细说明。所以在这里总结一下具体的步骤给大家作一个参考。</p>
<h1 id="在CentOS中安装YCM"><a href="#在CentOS中安装YCM" class="headerlink" title="在CentOS中安装YCM"></a>在CentOS中安装YCM</h1><h2 id="使用-Vundle-安装YCM"><a href="#使用-Vundle-安装YCM" class="headerlink" title="使用 Vundle 安装YCM"></a>使用 <a href="https://github.com/VundleVim/Vundle.vim" target="_blank" rel="noopener">Vundle</a> 安装YCM</h2><p>Vundle（Vim Bundle的缩写）是一个针对Vim的插件管理器。相较于Vim本身混乱的插件结构，使用Vundle来管理插件就显得非常得方便、简洁。用户只需要在Github上找到自己想要的插件的名字，并将其添加到.vimrc文件中，之后的安装，更新和卸载等操作都可以由vundle来完成了。</p>
<a id="more"></a>
<ol>
<li>下载Vundle <figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/VundleVim/Vundle.<span class="keyword">vim</span>.git ~/.<span class="keyword">vim</span>/bundle/Vundle.<span class="keyword">vim</span></span><br></pre></td></tr></table></figure></li>
<li>编辑 .vimrc 文件<br> 将以下代码添加至你的.vimrc文件中。同时，你也可以根据需求来添加其他你想要安装的vim插件。 <figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> nocompatible              <span class="comment">" be iMproved, required</span></span><br><span class="line"><span class="keyword">filetype</span> off                  <span class="comment">" required</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" set the runtime path to include Vundle and initialize</span></span><br><span class="line"><span class="keyword">set</span> rtp+=~/.<span class="keyword">vim</span>/bundle/Vundle.<span class="keyword">vim</span></span><br><span class="line"><span class="keyword">call</span> vundle#begin()</span><br><span class="line"><span class="comment">" alternatively, pass a path where Vundle should install plugins</span></span><br><span class="line"><span class="comment">"call vundle#begin('~/some/path/here')</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" let Vundle manage Vundle, required</span></span><br><span class="line">Plugin <span class="string">'VundleVim/Vundle.vim'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" The following are examples of different formats supported.</span></span><br><span class="line"><span class="comment">" Keep Plugin commands between vundle#begin/end.</span></span><br><span class="line"><span class="comment">" plugin on GitHub repo</span></span><br><span class="line">Plugin <span class="string">'Valloric/YouCompleteMe'</span></span><br><span class="line"><span class="comment">" plugin from http://vim-scripts.org/vim/scripts.html</span></span><br><span class="line"><span class="comment">" Plugin 'L9'</span></span><br><span class="line"><span class="comment">" Git plugin not hosted on GitHub</span></span><br><span class="line"><span class="comment">"Plugin 'git://git.wincent.com/command-t.git'</span></span><br><span class="line"><span class="comment">" git repos on your local machine (i.e. when working on your own plugin)</span></span><br><span class="line"><span class="comment">"Plugin 'file:///home/gmarik/path/to/plugin'</span></span><br><span class="line"><span class="comment">" The sparkup vim script is in a subdirectory of this repo called vim.</span></span><br><span class="line"><span class="comment">" Pass the path to set the runtimepath properly.</span></span><br><span class="line"><span class="comment">"Plugin 'rstacruz/sparkup', &#123;'rtp': 'vim/'&#125;</span></span><br><span class="line"><span class="comment">" Install L9 and avoid a Naming conflict if you've already installed a</span></span><br><span class="line"><span class="comment">" different version somewhere else.</span></span><br><span class="line"><span class="comment">" Plugin 'ascenator/L9', &#123;'name': 'newL9'&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" All of your Plugins must be added before the following line</span></span><br><span class="line"><span class="keyword">call</span> vundle#end()            <span class="comment">" required</span></span><br><span class="line"><span class="keyword">filetype</span> plugin <span class="built_in">indent</span> <span class="keyword">on</span>    <span class="comment">" required</span></span><br><span class="line"><span class="comment">" To ignore plugin indent changes, instead use:</span></span><br><span class="line"><span class="comment">"filetype plugin on</span></span><br><span class="line"><span class="comment">"</span></span><br><span class="line"><span class="comment">" Brief help</span></span><br><span class="line"><span class="comment">" :PluginList       - lists configured plugins</span></span><br><span class="line"><span class="comment">" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate</span></span><br><span class="line"><span class="comment">" :PluginSearch foo - searches for foo; append `!` to refresh local cache</span></span><br><span class="line"><span class="comment">" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal</span></span><br><span class="line"><span class="comment">"</span></span><br><span class="line"><span class="comment">" see :h vundle for more details or wiki for FAQ</span></span><br><span class="line"><span class="comment">" Put your non-Plugin stuff after this line</span></span><br></pre></td></tr></table></figure></li>
<li>安装插件<br> 打开Vim并运行<code>:PluginInstall</code>指令。<br> 这一步骤可能所需要的时间较长，需要耐心地等待它安装完成。</li>
</ol>
<h2 id="安装编译YCM所需要的软件"><a href="#安装编译YCM所需要的软件" class="headerlink" title="安装编译YCM所需要的软件"></a>安装编译YCM所需要的软件</h2><ol>
<li><p>安装开发工具与CMake:</p>
<pre><code><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">yum <span class="keyword">install </span><span class="keyword">build-essential </span>cmake</span><br></pre></td></tr></table></figure></code></pre></li>
<li><p>并确保python头文件包已经正确安装:</p>
<pre><code><figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">yum install <span class="keyword">python</span>-devel rh-python36-<span class="keyword">python</span>-devel.x86_64</span><br></pre></td></tr></table></figure></code></pre><p><img src="/zh-CN/YouCompleteMe-Installation/YCM1.PNG" alt="image1"></p>
<pre><code>如果你的CentOS上还未安装Python3，那么运行以下命令完成Python3.6的安装:       
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">sudo yum <span class="keyword">install </span>centos-release-<span class="keyword">scl</span></span><br><span class="line"><span class="keyword">sudo </span>yum <span class="keyword">install </span>rh-python36</span><br></pre></td></tr></table></figure>

需要的话，可以将Python3.6作为默认的Python来运行：    
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">scl <span class="builtin-name">enable</span> rh-python36 bash</span><br></pre></td></tr></table></figure></code></pre></li>
</ol>
<h2 id="编译YCM"><a href="#编译YCM" class="headerlink" title="编译YCM"></a>编译YCM</h2><ul>
<li><p>完成包含对C语言家族语义支持的YCM编译</p>
  <figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> ~<span class="string">/.vim/bundle/YouCompleteMe</span></span><br><span class="line"><span class="string">./install.py</span> <span class="params">--clang-completer</span></span><br></pre></td></tr></table></figure></li>
<li><p>不包含语义支持则直接运行install.py</p>
  <figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> ~<span class="string">/.vim/bundle/YouCompleteMe</span></span><br><span class="line"><span class="string">./install.py</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果需要简单的开启对所有语言的支持，则可以用–all标识。</p>
  <figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> ~<span class="string">/.vim/bundle/YouCompleteMe</span></span><br><span class="line"><span class="string">./install.py</span> <span class="params">--all</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul>
<li><a href="https://github.com/Valloric/YouCompleteMe#full-installation-guide" target="_blank" rel="noopener">https://github.com/Valloric/YouCompleteMe#full-installation-guide</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Vim</category>
      </categories>
      <tags>
        <tag>Vim</tag>
        <tag>Vundle</tag>
        <tag>CentOS</tag>
        <tag>YCM</tag>
      </tags>
  </entry>
  <entry>
    <title>YouCompleteMe Installation</title>
    <url>/en/YouCompleteMe-Installation_en/</url>
    <content><![CDATA[<p>Acutally, there’re pretty detailed instructions for installation on YCM(YouCompleteMe)’s github page. However, the installation steps on CentOS and Debian cannot be found. </p>
<h1 id="Complete-YCM-Installation-on-CentOS"><a href="#Complete-YCM-Installation-on-CentOS" class="headerlink" title="Complete YCM Installation on CentOS"></a>Complete YCM Installation on CentOS</h1><h2 id="Install-YCM-with-Vundle"><a href="#Install-YCM-with-Vundle" class="headerlink" title="Install YCM with Vundle"></a>Install YCM with <a href="https://github.com/VundleVim/Vundle.vim" target="_blank" rel="noopener">Vundle</a></h2><p>Vundle is a Plugin Manager for Vim. It provides an easy way to install, update and configure Vim Plugins.     </p>
<a id="more"></a>
<ol>
<li>Download Vundle <figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/VundleVim/Vundle.<span class="keyword">vim</span>.git ~/.<span class="keyword">vim</span>/bundle/Vundle.<span class="keyword">vim</span></span><br></pre></td></tr></table></figure></li>
<li>Edit .vimrc<br> Put the following scripts in your .vimrc. You can also add other Plugins. <figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">       <span class="keyword">set</span> nocompatible              <span class="comment">" be iMproved, required</span></span><br><span class="line"><span class="keyword">filetype</span> off                  <span class="comment">" required</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" set the runtime path to include Vundle and initialize</span></span><br><span class="line"><span class="keyword">set</span> rtp+=~/.<span class="keyword">vim</span>/bundle/Vundle.<span class="keyword">vim</span></span><br><span class="line"><span class="keyword">call</span> vundle#begin()</span><br><span class="line"><span class="comment">" alternatively, pass a path where Vundle should install plugins</span></span><br><span class="line"><span class="comment">"call vundle#begin('~/some/path/here')</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" let Vundle manage Vundle, required</span></span><br><span class="line">Plugin <span class="string">'VundleVim/Vundle.vim'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" The following are examples of different formats supported.</span></span><br><span class="line"><span class="comment">" Keep Plugin commands between vundle#begin/end.</span></span><br><span class="line"><span class="comment">" plugin on GitHub repo</span></span><br><span class="line">Plugin <span class="string">'Valloric/YouCompleteMe'</span></span><br><span class="line"><span class="comment">" plugin from http://vim-scripts.org/vim/scripts.html</span></span><br><span class="line"><span class="comment">" Plugin 'L9'</span></span><br><span class="line"><span class="comment">" Git plugin not hosted on GitHub</span></span><br><span class="line"><span class="comment">"Plugin 'git://git.wincent.com/command-t.git'</span></span><br><span class="line"><span class="comment">" git repos on your local machine (i.e. when working on your own plugin)</span></span><br><span class="line"><span class="comment">"Plugin 'file:///home/gmarik/path/to/plugin'</span></span><br><span class="line"><span class="comment">" The sparkup vim script is in a subdirectory of this repo called vim.</span></span><br><span class="line"><span class="comment">" Pass the path to set the runtimepath properly.</span></span><br><span class="line"><span class="comment">"Plugin 'rstacruz/sparkup', &#123;'rtp': 'vim/'&#125;</span></span><br><span class="line"><span class="comment">" Install L9 and avoid a Naming conflict if you've already installed a</span></span><br><span class="line"><span class="comment">" different version somewhere else.</span></span><br><span class="line"><span class="comment">" Plugin 'ascenator/L9', &#123;'name': 'newL9'&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">" All of your Plugins must be added before the following line</span></span><br><span class="line"><span class="keyword">call</span> vundle#end()            <span class="comment">" required</span></span><br><span class="line"><span class="keyword">filetype</span> plugin <span class="built_in">indent</span> <span class="keyword">on</span>    <span class="comment">" required</span></span><br><span class="line"><span class="comment">" To ignore plugin indent changes, instead use:</span></span><br><span class="line"><span class="comment">"filetype plugin on</span></span><br><span class="line"><span class="comment">"</span></span><br><span class="line"><span class="comment">" Brief help</span></span><br><span class="line"><span class="comment">" :PluginList       - lists configured plugins</span></span><br><span class="line"><span class="comment">" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate</span></span><br><span class="line"><span class="comment">" :PluginSearch foo - searches for foo; append `!` to refresh local cache</span></span><br><span class="line"><span class="comment">" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal</span></span><br><span class="line"><span class="comment">"</span></span><br><span class="line"><span class="comment">" see :h vundle for more details or wiki for FAQ</span></span><br><span class="line"><span class="comment">" Put your non-Plugin stuff after this line</span></span><br></pre></td></tr></table></figure></li>
<li>Plugin Install<br> Launch vim and run <code>:PluginInstall</code><br> Please be patient. It could take a while to complete the installation. </li>
</ol>
<h2 id="Install-Dependencies-for-Compiling"><a href="#Install-Dependencies-for-Compiling" class="headerlink" title="Install Dependencies for Compiling"></a>Install Dependencies for Compiling</h2><ol>
<li><p>Install development tools and CMake:</p>
 <figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">yum <span class="keyword">install </span><span class="keyword">build-essential </span>cmake</span><br></pre></td></tr></table></figure></li>
<li><p>Make sure you have Python headers installed:</p>
<pre><code><figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">yum install <span class="keyword">python</span>-devel rh-python36-<span class="keyword">python</span>-devel.x86_64</span><br></pre></td></tr></table></figure></code></pre><p><img src="/en/YouCompleteMe-Installation_en/YCM1.PNG" alt="image1"><br> In case python3 is not installed on your CentOS:<br> Enable Software Collections:</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">sudo yum <span class="keyword">install</span> centos-<span class="keyword">release</span>-scl</span><br></pre></td></tr></table></figure>
<p> Install Python3:</p>
 <figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">sudo yum <span class="keyword">install</span> rh-python36</span><br></pre></td></tr></table></figure>

<p> If you want to use python 3.6 as default</p>
 <figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">scl <span class="builtin-name">enable</span> rh-python36 bash</span><br></pre></td></tr></table></figure>


</li>
</ol>
<h2 id="Compile-YCM"><a href="#Compile-YCM" class="headerlink" title="Compile YCM"></a>Compile YCM</h2><ul>
<li>Compiling YCM with semantic support for C-family languages:<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> ~<span class="string">/.vim/bundle/YouCompleteMe</span></span><br><span class="line"><span class="string">./install.py</span> <span class="params">--clang-completer</span></span><br></pre></td></tr></table></figure></li>
<li>Compiling YCM without semantic support for C-family languages:<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> ~<span class="string">/.vim/bundle/YouCompleteMe</span></span><br><span class="line"><span class="string">./install.py</span></span><br></pre></td></tr></table></figure></li>
<li>To simply compile with everything enabled, there’s a –all flag.    <figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> ~<span class="string">/.vim/bundle/YouCompleteMe</span></span><br><span class="line"><span class="string">./install.py</span> <span class="params">--all</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
<h1 id="Referrence"><a href="#Referrence" class="headerlink" title="Referrence"></a>Referrence</h1><ul>
<li><a href="https://github.com/Valloric/YouCompleteMe#full-installation-guide" target="_blank" rel="noopener">https://github.com/Valloric/YouCompleteMe#full-installation-guide</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Vim</category>
      </categories>
      <tags>
        <tag>Vim</tag>
        <tag>Vundle</tag>
        <tag>CentOS</tag>
        <tag>YCM</tag>
      </tags>
  </entry>
</search>
